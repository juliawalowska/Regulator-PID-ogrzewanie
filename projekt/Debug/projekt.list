
projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bae0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  0800bcb0  0800bcb0  0001bcb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c124  0800c124  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c12c  0800c12c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c12c  0800c12c  0001c12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c130  0800c130  0001c130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800c134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008c8  200001d8  0800c30c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000aa0  0800c30c  00020aa0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017143  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ea2  00000000  00000000  0003738e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003a230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100b  00000000  00000000  0003b6b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000284a3  00000000  00000000  0003c6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ccb  00000000  00000000  00064b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f61da  00000000  00000000  0007e831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cd4  00000000  00000000  00174a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  0017b6e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc98 	.word	0x0800bc98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800bc98 	.word	0x0800bc98

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_ldivmod>:
 8000cc8:	b97b      	cbnz	r3, 8000cea <__aeabi_ldivmod+0x22>
 8000cca:	b972      	cbnz	r2, 8000cea <__aeabi_ldivmod+0x22>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bfbe      	ittt	lt
 8000cd0:	2000      	movlt	r0, #0
 8000cd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000cd6:	e006      	blt.n	8000ce6 <__aeabi_ldivmod+0x1e>
 8000cd8:	bf08      	it	eq
 8000cda:	2800      	cmpeq	r0, #0
 8000cdc:	bf1c      	itt	ne
 8000cde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ce2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ce6:	f000 b9f1 	b.w	80010cc <__aeabi_idiv0>
 8000cea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf2:	2900      	cmp	r1, #0
 8000cf4:	db09      	blt.n	8000d0a <__aeabi_ldivmod+0x42>
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	db1a      	blt.n	8000d30 <__aeabi_ldivmod+0x68>
 8000cfa:	f000 f883 	bl	8000e04 <__udivmoddi4>
 8000cfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d06:	b004      	add	sp, #16
 8000d08:	4770      	bx	lr
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db1b      	blt.n	8000d4c <__aeabi_ldivmod+0x84>
 8000d14:	f000 f876 	bl	8000e04 <__udivmoddi4>
 8000d18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d20:	b004      	add	sp, #16
 8000d22:	4240      	negs	r0, r0
 8000d24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d28:	4252      	negs	r2, r2
 8000d2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d2e:	4770      	bx	lr
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	f000 f865 	bl	8000e04 <__udivmoddi4>
 8000d3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d42:	b004      	add	sp, #16
 8000d44:	4240      	negs	r0, r0
 8000d46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4a:	4770      	bx	lr
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d52:	f000 f857 	bl	8000e04 <__udivmoddi4>
 8000d56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d5e:	b004      	add	sp, #16
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_uldivmod>:
 8000d68:	b953      	cbnz	r3, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6a:	b94a      	cbnz	r2, 8000d80 <__aeabi_uldivmod+0x18>
 8000d6c:	2900      	cmp	r1, #0
 8000d6e:	bf08      	it	eq
 8000d70:	2800      	cmpeq	r0, #0
 8000d72:	bf1c      	itt	ne
 8000d74:	f04f 31ff 	movne.w	r1, #4294967295
 8000d78:	f04f 30ff 	movne.w	r0, #4294967295
 8000d7c:	f000 b9a6 	b.w	80010cc <__aeabi_idiv0>
 8000d80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d88:	f000 f83c 	bl	8000e04 <__udivmoddi4>
 8000d8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d94:	b004      	add	sp, #16
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2lz>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	460d      	mov	r5, r1
 8000da2:	f7ff febb 	bl	8000b1c <__aeabi_dcmplt>
 8000da6:	b928      	cbnz	r0, 8000db4 <__aeabi_d2lz+0x1c>
 8000da8:	4620      	mov	r0, r4
 8000daa:	4629      	mov	r1, r5
 8000dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000db0:	f000 b80a 	b.w	8000dc8 <__aeabi_d2ulz>
 8000db4:	4620      	mov	r0, r4
 8000db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000dba:	f000 f805 	bl	8000dc8 <__aeabi_d2ulz>
 8000dbe:	4240      	negs	r0, r0
 8000dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dc4:	bd38      	pop	{r3, r4, r5, pc}
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_d2ulz>:
 8000dc8:	b5d0      	push	{r4, r6, r7, lr}
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <__aeabi_d2ulz+0x34>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	4606      	mov	r6, r0
 8000dd0:	460f      	mov	r7, r1
 8000dd2:	f7ff fc31 	bl	8000638 <__aeabi_dmul>
 8000dd6:	f7ff ff07 	bl	8000be8 <__aeabi_d2uiz>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	f7ff fbb2 	bl	8000544 <__aeabi_ui2d>
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <__aeabi_d2ulz+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	f7ff fc28 	bl	8000638 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4630      	mov	r0, r6
 8000dee:	4639      	mov	r1, r7
 8000df0:	f7ff fa6a 	bl	80002c8 <__aeabi_dsub>
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2uiz>
 8000df8:	4621      	mov	r1, r4
 8000dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000dfc:	3df00000 	.word	0x3df00000
 8000e00:	41f00000 	.word	0x41f00000

08000e04 <__udivmoddi4>:
 8000e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e08:	9e08      	ldr	r6, [sp, #32]
 8000e0a:	460d      	mov	r5, r1
 8000e0c:	4604      	mov	r4, r0
 8000e0e:	460f      	mov	r7, r1
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d14a      	bne.n	8000eaa <__udivmoddi4+0xa6>
 8000e14:	428a      	cmp	r2, r1
 8000e16:	4694      	mov	ip, r2
 8000e18:	d965      	bls.n	8000ee6 <__udivmoddi4+0xe2>
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	b143      	cbz	r3, 8000e32 <__udivmoddi4+0x2e>
 8000e20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e24:	f1c3 0220 	rsb	r2, r3, #32
 8000e28:	409f      	lsls	r7, r3
 8000e2a:	fa20 f202 	lsr.w	r2, r0, r2
 8000e2e:	4317      	orrs	r7, r2
 8000e30:	409c      	lsls	r4, r3
 8000e32:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e36:	fa1f f58c 	uxth.w	r5, ip
 8000e3a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000e3e:	0c22      	lsrs	r2, r4, #16
 8000e40:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e44:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e48:	fb01 f005 	mul.w	r0, r1, r5
 8000e4c:	4290      	cmp	r0, r2
 8000e4e:	d90a      	bls.n	8000e66 <__udivmoddi4+0x62>
 8000e50:	eb1c 0202 	adds.w	r2, ip, r2
 8000e54:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e58:	f080 811c 	bcs.w	8001094 <__udivmoddi4+0x290>
 8000e5c:	4290      	cmp	r0, r2
 8000e5e:	f240 8119 	bls.w	8001094 <__udivmoddi4+0x290>
 8000e62:	3902      	subs	r1, #2
 8000e64:	4462      	add	r2, ip
 8000e66:	1a12      	subs	r2, r2, r0
 8000e68:	b2a4      	uxth	r4, r4
 8000e6a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e6e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e72:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e76:	fb00 f505 	mul.w	r5, r0, r5
 8000e7a:	42a5      	cmp	r5, r4
 8000e7c:	d90a      	bls.n	8000e94 <__udivmoddi4+0x90>
 8000e7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e82:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e86:	f080 8107 	bcs.w	8001098 <__udivmoddi4+0x294>
 8000e8a:	42a5      	cmp	r5, r4
 8000e8c:	f240 8104 	bls.w	8001098 <__udivmoddi4+0x294>
 8000e90:	4464      	add	r4, ip
 8000e92:	3802      	subs	r0, #2
 8000e94:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	b11e      	cbz	r6, 8000ea6 <__udivmoddi4+0xa2>
 8000e9e:	40dc      	lsrs	r4, r3
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	e9c6 4300 	strd	r4, r3, [r6]
 8000ea6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0xbc>
 8000eae:	2e00      	cmp	r6, #0
 8000eb0:	f000 80ed 	beq.w	800108e <__udivmoddi4+0x28a>
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	e9c6 0500 	strd	r0, r5, [r6]
 8000eba:	4608      	mov	r0, r1
 8000ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec0:	fab3 f183 	clz	r1, r3
 8000ec4:	2900      	cmp	r1, #0
 8000ec6:	d149      	bne.n	8000f5c <__udivmoddi4+0x158>
 8000ec8:	42ab      	cmp	r3, r5
 8000eca:	d302      	bcc.n	8000ed2 <__udivmoddi4+0xce>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	f200 80f8 	bhi.w	80010c2 <__udivmoddi4+0x2be>
 8000ed2:	1a84      	subs	r4, r0, r2
 8000ed4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ed8:	2001      	movs	r0, #1
 8000eda:	4617      	mov	r7, r2
 8000edc:	2e00      	cmp	r6, #0
 8000ede:	d0e2      	beq.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ee4:	e7df      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8000ee6:	b902      	cbnz	r2, 8000eea <__udivmoddi4+0xe6>
 8000ee8:	deff      	udf	#255	; 0xff
 8000eea:	fab2 f382 	clz	r3, r2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f040 8090 	bne.w	8001014 <__udivmoddi4+0x210>
 8000ef4:	1a8a      	subs	r2, r1, r2
 8000ef6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efa:	fa1f fe8c 	uxth.w	lr, ip
 8000efe:	2101      	movs	r1, #1
 8000f00:	fbb2 f5f7 	udiv	r5, r2, r7
 8000f04:	fb07 2015 	mls	r0, r7, r5, r2
 8000f08:	0c22      	lsrs	r2, r4, #16
 8000f0a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f0e:	fb0e f005 	mul.w	r0, lr, r5
 8000f12:	4290      	cmp	r0, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x124>
 8000f16:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f1e:	d202      	bcs.n	8000f26 <__udivmoddi4+0x122>
 8000f20:	4290      	cmp	r0, r2
 8000f22:	f200 80cb 	bhi.w	80010bc <__udivmoddi4+0x2b8>
 8000f26:	4645      	mov	r5, r8
 8000f28:	1a12      	subs	r2, r2, r0
 8000f2a:	b2a4      	uxth	r4, r4
 8000f2c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f30:	fb07 2210 	mls	r2, r7, r0, r2
 8000f34:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f38:	fb0e fe00 	mul.w	lr, lr, r0
 8000f3c:	45a6      	cmp	lr, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x14e>
 8000f40:	eb1c 0404 	adds.w	r4, ip, r4
 8000f44:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f48:	d202      	bcs.n	8000f50 <__udivmoddi4+0x14c>
 8000f4a:	45a6      	cmp	lr, r4
 8000f4c:	f200 80bb 	bhi.w	80010c6 <__udivmoddi4+0x2c2>
 8000f50:	4610      	mov	r0, r2
 8000f52:	eba4 040e 	sub.w	r4, r4, lr
 8000f56:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f5a:	e79f      	b.n	8000e9c <__udivmoddi4+0x98>
 8000f5c:	f1c1 0720 	rsb	r7, r1, #32
 8000f60:	408b      	lsls	r3, r1
 8000f62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f6a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f72:	40fd      	lsrs	r5, r7
 8000f74:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f78:	4323      	orrs	r3, r4
 8000f7a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f7e:	fa1f fe8c 	uxth.w	lr, ip
 8000f82:	fb09 5518 	mls	r5, r9, r8, r5
 8000f86:	0c1c      	lsrs	r4, r3, #16
 8000f88:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f8c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f90:	42a5      	cmp	r5, r4
 8000f92:	fa02 f201 	lsl.w	r2, r2, r1
 8000f96:	fa00 f001 	lsl.w	r0, r0, r1
 8000f9a:	d90b      	bls.n	8000fb4 <__udivmoddi4+0x1b0>
 8000f9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000fa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fa4:	f080 8088 	bcs.w	80010b8 <__udivmoddi4+0x2b4>
 8000fa8:	42a5      	cmp	r5, r4
 8000faa:	f240 8085 	bls.w	80010b8 <__udivmoddi4+0x2b4>
 8000fae:	f1a8 0802 	sub.w	r8, r8, #2
 8000fb2:	4464      	add	r4, ip
 8000fb4:	1b64      	subs	r4, r4, r5
 8000fb6:	b29d      	uxth	r5, r3
 8000fb8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000fbc:	fb09 4413 	mls	r4, r9, r3, r4
 8000fc0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000fc4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000fc8:	45a6      	cmp	lr, r4
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x1da>
 8000fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000fd4:	d26c      	bcs.n	80010b0 <__udivmoddi4+0x2ac>
 8000fd6:	45a6      	cmp	lr, r4
 8000fd8:	d96a      	bls.n	80010b0 <__udivmoddi4+0x2ac>
 8000fda:	3b02      	subs	r3, #2
 8000fdc:	4464      	add	r4, ip
 8000fde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fe2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fe6:	eba4 040e 	sub.w	r4, r4, lr
 8000fea:	42ac      	cmp	r4, r5
 8000fec:	46c8      	mov	r8, r9
 8000fee:	46ae      	mov	lr, r5
 8000ff0:	d356      	bcc.n	80010a0 <__udivmoddi4+0x29c>
 8000ff2:	d053      	beq.n	800109c <__udivmoddi4+0x298>
 8000ff4:	b156      	cbz	r6, 800100c <__udivmoddi4+0x208>
 8000ff6:	ebb0 0208 	subs.w	r2, r0, r8
 8000ffa:	eb64 040e 	sbc.w	r4, r4, lr
 8000ffe:	fa04 f707 	lsl.w	r7, r4, r7
 8001002:	40ca      	lsrs	r2, r1
 8001004:	40cc      	lsrs	r4, r1
 8001006:	4317      	orrs	r7, r2
 8001008:	e9c6 7400 	strd	r7, r4, [r6]
 800100c:	4618      	mov	r0, r3
 800100e:	2100      	movs	r1, #0
 8001010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001014:	f1c3 0120 	rsb	r1, r3, #32
 8001018:	fa02 fc03 	lsl.w	ip, r2, r3
 800101c:	fa20 f201 	lsr.w	r2, r0, r1
 8001020:	fa25 f101 	lsr.w	r1, r5, r1
 8001024:	409d      	lsls	r5, r3
 8001026:	432a      	orrs	r2, r5
 8001028:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fbb1 f0f7 	udiv	r0, r1, r7
 8001034:	fb07 1510 	mls	r5, r7, r0, r1
 8001038:	0c11      	lsrs	r1, r2, #16
 800103a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800103e:	fb00 f50e 	mul.w	r5, r0, lr
 8001042:	428d      	cmp	r5, r1
 8001044:	fa04 f403 	lsl.w	r4, r4, r3
 8001048:	d908      	bls.n	800105c <__udivmoddi4+0x258>
 800104a:	eb1c 0101 	adds.w	r1, ip, r1
 800104e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001052:	d22f      	bcs.n	80010b4 <__udivmoddi4+0x2b0>
 8001054:	428d      	cmp	r5, r1
 8001056:	d92d      	bls.n	80010b4 <__udivmoddi4+0x2b0>
 8001058:	3802      	subs	r0, #2
 800105a:	4461      	add	r1, ip
 800105c:	1b49      	subs	r1, r1, r5
 800105e:	b292      	uxth	r2, r2
 8001060:	fbb1 f5f7 	udiv	r5, r1, r7
 8001064:	fb07 1115 	mls	r1, r7, r5, r1
 8001068:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800106c:	fb05 f10e 	mul.w	r1, r5, lr
 8001070:	4291      	cmp	r1, r2
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x282>
 8001074:	eb1c 0202 	adds.w	r2, ip, r2
 8001078:	f105 38ff 	add.w	r8, r5, #4294967295
 800107c:	d216      	bcs.n	80010ac <__udivmoddi4+0x2a8>
 800107e:	4291      	cmp	r1, r2
 8001080:	d914      	bls.n	80010ac <__udivmoddi4+0x2a8>
 8001082:	3d02      	subs	r5, #2
 8001084:	4462      	add	r2, ip
 8001086:	1a52      	subs	r2, r2, r1
 8001088:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800108c:	e738      	b.n	8000f00 <__udivmoddi4+0xfc>
 800108e:	4631      	mov	r1, r6
 8001090:	4630      	mov	r0, r6
 8001092:	e708      	b.n	8000ea6 <__udivmoddi4+0xa2>
 8001094:	4639      	mov	r1, r7
 8001096:	e6e6      	b.n	8000e66 <__udivmoddi4+0x62>
 8001098:	4610      	mov	r0, r2
 800109a:	e6fb      	b.n	8000e94 <__udivmoddi4+0x90>
 800109c:	4548      	cmp	r0, r9
 800109e:	d2a9      	bcs.n	8000ff4 <__udivmoddi4+0x1f0>
 80010a0:	ebb9 0802 	subs.w	r8, r9, r2
 80010a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80010a8:	3b01      	subs	r3, #1
 80010aa:	e7a3      	b.n	8000ff4 <__udivmoddi4+0x1f0>
 80010ac:	4645      	mov	r5, r8
 80010ae:	e7ea      	b.n	8001086 <__udivmoddi4+0x282>
 80010b0:	462b      	mov	r3, r5
 80010b2:	e794      	b.n	8000fde <__udivmoddi4+0x1da>
 80010b4:	4640      	mov	r0, r8
 80010b6:	e7d1      	b.n	800105c <__udivmoddi4+0x258>
 80010b8:	46d0      	mov	r8, sl
 80010ba:	e77b      	b.n	8000fb4 <__udivmoddi4+0x1b0>
 80010bc:	3d02      	subs	r5, #2
 80010be:	4462      	add	r2, ip
 80010c0:	e732      	b.n	8000f28 <__udivmoddi4+0x124>
 80010c2:	4608      	mov	r0, r1
 80010c4:	e70a      	b.n	8000edc <__udivmoddi4+0xd8>
 80010c6:	4464      	add	r4, ip
 80010c8:	3802      	subs	r0, #2
 80010ca:	e742      	b.n	8000f52 <__udivmoddi4+0x14e>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <BMP280_Read8>:
  return tmp;
}
#endif
#ifdef BMP280
uint8_t BMP280_Read8(uint8_t addr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, &tmp, 1, 10);
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <BMP280_Read8+0x38>)
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	230a      	movs	r3, #10
 80010e8:	9302      	str	r3, [sp, #8]
 80010ea:	2301      	movs	r3, #1
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	f107 030f 	add.w	r3, r7, #15
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	21ec      	movs	r1, #236	; 0xec
 80010f8:	f002 fc44 	bl	8003984 <HAL_I2C_Mem_Read>
  return tmp;
 80010fc:	7bfb      	ldrb	r3, [r7, #15]
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return tmp[1];
#endif
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200001f4 	.word	0x200001f4

0800110c <BMP280_Read16>:
	return ((tmp[0] << 8) | tmp[1]);
}
#endif
#ifdef BMP280
uint16_t BMP280_Read16(uint8_t addr)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af04      	add	r7, sp, #16
 8001112:	4603      	mov	r3, r0
 8001114:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[2];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 2, 10);
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <BMP280_Read16+0x40>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	b29a      	uxth	r2, r3
 800111e:	230a      	movs	r3, #10
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2302      	movs	r3, #2
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	2301      	movs	r3, #1
 800112e:	21ec      	movs	r1, #236	; 0xec
 8001130:	f002 fc28 	bl	8003984 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 8) | tmp[1]);
 8001134:	7b3b      	ldrb	r3, [r7, #12]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	7b7b      	ldrb	r3, [r7, #13]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21b      	sxth	r3, r3
 8001142:	b29b      	uxth	r3, r3
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 8) | tmp[2]);
#endif
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	200001f4 	.word	0x200001f4

08001150 <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;

	tmp = BMP280_Read16(addr);
 800115a:	79fb      	ldrb	r3, [r7, #7]
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffd5 	bl	800110c <BMP280_Read16>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8001166:	89fb      	ldrh	r3, [r7, #14]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	b21a      	sxth	r2, r3
 800116e:	89fb      	ldrh	r3, [r7, #14]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21b      	sxth	r3, r3
 8001178:	b29b      	uxth	r3, r3
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <BMP280_Write8>:
	HAL_I2C_Mem_Write(i2c_h, BMP180_I2CADDR, address, 1, &data, 1, 10);
}
#endif
#ifdef BMP280
void BMP280_Write8(uint8_t address, uint8_t data)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af04      	add	r7, sp, #16
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
#if(BMP_I2C == 1)
	HAL_I2C_Mem_Write(i2c_h, BMP280_I2CADDR, address, 1, &data, 1, 10);
 8001194:	4b08      	ldr	r3, [pc, #32]	; (80011b8 <BMP280_Write8+0x34>)
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b29a      	uxth	r2, r3
 800119c:	230a      	movs	r3, #10
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2301      	movs	r3, #1
 80011aa:	21ec      	movs	r1, #236	; 0xec
 80011ac:	f002 fad6 	bl	800375c <HAL_I2C_Mem_Write>
	tmp[1] = data;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 2, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200001f4 	.word	0x200001f4

080011bc <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af04      	add	r7, sp, #16
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
#if(BMP_I2C == 1)
	uint8_t tmp[3];
	HAL_I2C_Mem_Read(i2c_h, BMP280_I2CADDR, addr, 1, tmp, 3, 10);
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <BMP280_Read24+0x40>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	230a      	movs	r3, #10
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2303      	movs	r3, #3
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 030c 	add.w	r3, r7, #12
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	2301      	movs	r3, #1
 80011de:	21ec      	movs	r1, #236	; 0xec
 80011e0:	f002 fbd0 	bl	8003984 <HAL_I2C_Mem_Read>
	return ((tmp[0] << 16) | tmp[1] << 8 | tmp[2]);
 80011e4:	7b3b      	ldrb	r3, [r7, #12]
 80011e6:	041a      	lsls	r2, r3, #16
 80011e8:	7b7b      	ldrb	r3, [r7, #13]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	4313      	orrs	r3, r2
 80011ee:	7bba      	ldrb	r2, [r7, #14]
 80011f0:	4313      	orrs	r3, r2
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_SPI_TransmitReceive(spi_h, tmp, tmp, 3, 10);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
#endif
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200001f4 	.word	0x200001f4

08001200 <BMP280_Init>:
{
	BMP280_Write8(BMP280_CONFIG, (((standby_time & 0x7) << 5) | ((filter & 0x7) << 2)) & 0xFC);
}
#if(BMP_I2C == 1)
void BMP280_Init(I2C_HandleTypeDef *i2c_handler, uint8_t temperature_resolution, uint8_t pressure_oversampling, uint8_t mode)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	4608      	mov	r0, r1
 800120a:	4611      	mov	r1, r2
 800120c:	461a      	mov	r2, r3
 800120e:	4603      	mov	r3, r0
 8001210:	70fb      	strb	r3, [r7, #3]
 8001212:	460b      	mov	r3, r1
 8001214:	70bb      	strb	r3, [r7, #2]
 8001216:	4613      	mov	r3, r2
 8001218:	707b      	strb	r3, [r7, #1]
	i2c_h = i2c_handler;
 800121a:	4a48      	ldr	r2, [pc, #288]	; (800133c <BMP280_Init+0x13c>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
	spi_h = spi_handler;
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_RESET);
	HAL_Delay(5);
	HAL_GPIO_WritePin(BMP_CS_GPIO_Port, BMP_CS_Pin, GPIO_PIN_SET);
#endif
	if (mode > BMP280_NORMALMODE)
 8001220:	787b      	ldrb	r3, [r7, #1]
 8001222:	2b03      	cmp	r3, #3
 8001224:	d901      	bls.n	800122a <BMP280_Init+0x2a>
	    mode = BMP280_NORMALMODE;
 8001226:	2303      	movs	r3, #3
 8001228:	707b      	strb	r3, [r7, #1]
	_mode = mode;
 800122a:	4a45      	ldr	r2, [pc, #276]	; (8001340 <BMP280_Init+0x140>)
 800122c:	787b      	ldrb	r3, [r7, #1]
 800122e:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d101      	bne.n	800123a <BMP280_Init+0x3a>
		mode = BMP280_SLEEPMODE;
 8001236:	2300      	movs	r3, #0
 8001238:	707b      	strb	r3, [r7, #1]



	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800123a:	78fb      	ldrb	r3, [r7, #3]
 800123c:	2b05      	cmp	r3, #5
 800123e:	d901      	bls.n	8001244 <BMP280_Init+0x44>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001240:	2305      	movs	r3, #5
 8001242:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001244:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <BMP280_Init+0x144>)
 8001246:	78fb      	ldrb	r3, [r7, #3]
 8001248:	7013      	strb	r3, [r2, #0]

	if (pressure_oversampling > BMP280_ULTRAHIGHRES)
 800124a:	78bb      	ldrb	r3, [r7, #2]
 800124c:	2b05      	cmp	r3, #5
 800124e:	d901      	bls.n	8001254 <BMP280_Init+0x54>
		pressure_oversampling = BMP280_ULTRAHIGHRES;
 8001250:	2305      	movs	r3, #5
 8001252:	70bb      	strb	r3, [r7, #2]
	_pressure_oversampling = pressure_oversampling;
 8001254:	4a3c      	ldr	r2, [pc, #240]	; (8001348 <BMP280_Init+0x148>)
 8001256:	78bb      	ldrb	r3, [r7, #2]
 8001258:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800125a:	bf00      	nop
 800125c:	20d0      	movs	r0, #208	; 0xd0
 800125e:	f7ff ff37 	bl	80010d0 <BMP280_Read8>
 8001262:	4603      	mov	r3, r0
 8001264:	2b58      	cmp	r3, #88	; 0x58
 8001266:	d1f9      	bne.n	800125c <BMP280_Init+0x5c>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 8001268:	2088      	movs	r0, #136	; 0x88
 800126a:	f7ff ff71 	bl	8001150 <BMP280_Read16LE>
 800126e:	4603      	mov	r3, r0
 8001270:	461a      	mov	r2, r3
 8001272:	4b36      	ldr	r3, [pc, #216]	; (800134c <BMP280_Init+0x14c>)
 8001274:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 8001276:	208a      	movs	r0, #138	; 0x8a
 8001278:	f7ff ff6a 	bl	8001150 <BMP280_Read16LE>
 800127c:	4603      	mov	r3, r0
 800127e:	b21a      	sxth	r2, r3
 8001280:	4b33      	ldr	r3, [pc, #204]	; (8001350 <BMP280_Init+0x150>)
 8001282:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001284:	208c      	movs	r0, #140	; 0x8c
 8001286:	f7ff ff63 	bl	8001150 <BMP280_Read16LE>
 800128a:	4603      	mov	r3, r0
 800128c:	b21a      	sxth	r2, r3
 800128e:	4b31      	ldr	r3, [pc, #196]	; (8001354 <BMP280_Init+0x154>)
 8001290:	801a      	strh	r2, [r3, #0]

	p1 = BMP280_Read16LE(BMP280_DIG_P1);
 8001292:	208e      	movs	r0, #142	; 0x8e
 8001294:	f7ff ff5c 	bl	8001150 <BMP280_Read16LE>
 8001298:	4603      	mov	r3, r0
 800129a:	461a      	mov	r2, r3
 800129c:	4b2e      	ldr	r3, [pc, #184]	; (8001358 <BMP280_Init+0x158>)
 800129e:	801a      	strh	r2, [r3, #0]
	p2 = BMP280_Read16LE(BMP280_DIG_P2);
 80012a0:	2090      	movs	r0, #144	; 0x90
 80012a2:	f7ff ff55 	bl	8001150 <BMP280_Read16LE>
 80012a6:	4603      	mov	r3, r0
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <BMP280_Init+0x15c>)
 80012ac:	801a      	strh	r2, [r3, #0]
	p3 = BMP280_Read16LE(BMP280_DIG_P3);
 80012ae:	2092      	movs	r0, #146	; 0x92
 80012b0:	f7ff ff4e 	bl	8001150 <BMP280_Read16LE>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b21a      	sxth	r2, r3
 80012b8:	4b29      	ldr	r3, [pc, #164]	; (8001360 <BMP280_Init+0x160>)
 80012ba:	801a      	strh	r2, [r3, #0]
	p4 = BMP280_Read16LE(BMP280_DIG_P4);
 80012bc:	2094      	movs	r0, #148	; 0x94
 80012be:	f7ff ff47 	bl	8001150 <BMP280_Read16LE>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <BMP280_Init+0x164>)
 80012c8:	801a      	strh	r2, [r3, #0]
	p5 = BMP280_Read16LE(BMP280_DIG_P5);
 80012ca:	2096      	movs	r0, #150	; 0x96
 80012cc:	f7ff ff40 	bl	8001150 <BMP280_Read16LE>
 80012d0:	4603      	mov	r3, r0
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <BMP280_Init+0x168>)
 80012d6:	801a      	strh	r2, [r3, #0]
	p6 = BMP280_Read16LE(BMP280_DIG_P6);
 80012d8:	2098      	movs	r0, #152	; 0x98
 80012da:	f7ff ff39 	bl	8001150 <BMP280_Read16LE>
 80012de:	4603      	mov	r3, r0
 80012e0:	b21a      	sxth	r2, r3
 80012e2:	4b22      	ldr	r3, [pc, #136]	; (800136c <BMP280_Init+0x16c>)
 80012e4:	801a      	strh	r2, [r3, #0]
	p7 = BMP280_Read16LE(BMP280_DIG_P7);
 80012e6:	209a      	movs	r0, #154	; 0x9a
 80012e8:	f7ff ff32 	bl	8001150 <BMP280_Read16LE>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b21a      	sxth	r2, r3
 80012f0:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <BMP280_Init+0x170>)
 80012f2:	801a      	strh	r2, [r3, #0]
	p8 = BMP280_Read16LE(BMP280_DIG_P8);
 80012f4:	209c      	movs	r0, #156	; 0x9c
 80012f6:	f7ff ff2b 	bl	8001150 <BMP280_Read16LE>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b21a      	sxth	r2, r3
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <BMP280_Init+0x174>)
 8001300:	801a      	strh	r2, [r3, #0]
	p9 = BMP280_Read16LE(BMP280_DIG_P9);
 8001302:	209e      	movs	r0, #158	; 0x9e
 8001304:	f7ff ff24 	bl	8001150 <BMP280_Read16LE>
 8001308:	4603      	mov	r3, r0
 800130a:	b21a      	sxth	r2, r3
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <BMP280_Init+0x178>)
 800130e:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, ((temperature_resolution<<5) | (pressure_oversampling<<2) | mode));
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	015b      	lsls	r3, r3, #5
 8001314:	b25a      	sxtb	r2, r3
 8001316:	78bb      	ldrb	r3, [r7, #2]
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25a      	sxtb	r2, r3
 8001320:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001324:	4313      	orrs	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	20f4      	movs	r0, #244	; 0xf4
 800132e:	f7ff ff29 	bl	8001184 <BMP280_Write8>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200001f4 	.word	0x200001f4
 8001340:	200001fa 	.word	0x200001fa
 8001344:	200001f8 	.word	0x200001f8
 8001348:	200001f9 	.word	0x200001f9
 800134c:	20000210 	.word	0x20000210
 8001350:	200001fc 	.word	0x200001fc
 8001354:	200001fe 	.word	0x200001fe
 8001358:	20000212 	.word	0x20000212
 800135c:	20000200 	.word	0x20000200
 8001360:	20000202 	.word	0x20000202
 8001364:	20000204 	.word	0x20000204
 8001368:	20000206 	.word	0x20000206
 800136c:	20000208 	.word	0x20000208
 8001370:	2000020a 	.word	0x2000020a
 8001374:	2000020c 	.word	0x2000020c
 8001378:	2000020e 	.word	0x2000020e

0800137c <BMP280_ReadTemperature>:
	  return temp;
}
#endif
#ifdef BMP280
float BMP280_ReadTemperature(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <BMP280_ReadTemperature+0xfc>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d16d      	bne.n	8001466 <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 800138a:	20f4      	movs	r0, #244	; 0xf4
 800138c:	f7ff fea0 	bl	80010d0 <BMP280_Read8>
 8001390:	4603      	mov	r3, r0
 8001392:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03);
 8001394:	7dfb      	ldrb	r3, [r7, #23]
 8001396:	f023 0303 	bic.w	r3, r3, #3
 800139a:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80013a4:	7dfb      	ldrb	r3, [r7, #23]
 80013a6:	4619      	mov	r1, r3
 80013a8:	20f4      	movs	r0, #244	; 0xf4
 80013aa:	f7ff feeb 	bl	8001184 <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80013ae:	20f4      	movs	r0, #244	; 0xf4
 80013b0:	f7ff fe8e 	bl	80010d0 <BMP280_Read8>
 80013b4:	4603      	mov	r3, r0
 80013b6:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	f003 0303 	and.w	r3, r3, #3
 80013be:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80013c0:	7dbb      	ldrb	r3, [r7, #22]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d14f      	bne.n	8001466 <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013c6:	20f4      	movs	r0, #244	; 0xf4
 80013c8:	f7ff fe82 	bl	80010d0 <BMP280_Read8>
 80013cc:	4603      	mov	r3, r0
 80013ce:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 80013d8:	7dbb      	ldrb	r3, [r7, #22]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d000      	beq.n	80013e0 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 80013de:	e7f2      	b.n	80013c6 <BMP280_ReadTemperature+0x4a>
				  break;
 80013e0:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80013e2:	20fa      	movs	r0, #250	; 0xfa
 80013e4:	f7ff feea 	bl	80011bc <BMP280_Read24>
 80013e8:	4603      	mov	r3, r0
 80013ea:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	111b      	asrs	r3, r3, #4
 80013f0:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	10da      	asrs	r2, r3, #3
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <BMP280_ReadTemperature+0x100>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80013fe:	4a20      	ldr	r2, [pc, #128]	; (8001480 <BMP280_ReadTemperature+0x104>)
 8001400:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	12db      	asrs	r3, r3, #11
 800140a:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	111b      	asrs	r3, r3, #4
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <BMP280_ReadTemperature+0x100>)
 8001412:	8812      	ldrh	r2, [r2, #0]
 8001414:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	1112      	asrs	r2, r2, #4
 800141a:	4918      	ldr	r1, [pc, #96]	; (800147c <BMP280_ReadTemperature+0x100>)
 800141c:	8809      	ldrh	r1, [r1, #0]
 800141e:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001420:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001424:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <BMP280_ReadTemperature+0x108>)
 8001428:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800142c:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001430:	139b      	asrs	r3, r3, #14
 8001432:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 8001434:	68fa      	ldr	r2, [r7, #12]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	4413      	add	r3, r2
 800143a:	4a13      	ldr	r2, [pc, #76]	; (8001488 <BMP280_ReadTemperature+0x10c>)
 800143c:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <BMP280_ReadTemperature+0x10c>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	3380      	adds	r3, #128	; 0x80
 800144a:	121b      	asrs	r3, r3, #8
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001454:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001458:	edd7 7a01 	vldr	s15, [r7, #4]
 800145c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800148c <BMP280_ReadTemperature+0x110>
 8001460:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001464:	e001      	b.n	800146a <BMP280_ReadTemperature+0xee>
	  }
  }

  return -99;
 8001466:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001490 <BMP280_ReadTemperature+0x114>
}
 800146a:	eef0 7a47 	vmov.f32	s15, s14
 800146e:	eeb0 0a67 	vmov.f32	s0, s15
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001fa 	.word	0x200001fa
 800147c:	20000210 	.word	0x20000210
 8001480:	200001fc 	.word	0x200001fc
 8001484:	200001fe 	.word	0x200001fe
 8001488:	20000214 	.word	0x20000214
 800148c:	42c80000 	.word	0x42c80000
 8001490:	c2c60000 	.word	0xc2c60000

08001494 <BMP280_ReadTemperatureAndPressure>:
}
#endif

#ifdef BMP280
uint8_t BMP280_ReadTemperatureAndPressure(float *temperature, int32_t *pressure)
{
 8001494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001498:	b0cc      	sub	sp, #304	; 0x130
 800149a:	af00      	add	r7, sp, #0
 800149c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 80014a0:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
	  int64_t var1, var2, p;

	  // Must be done first to get the t_fine variable set up
	  *temperature = BMP280_ReadTemperature();
 80014a4:	f7ff ff6a 	bl	800137c <BMP280_ReadTemperature>
 80014a8:	eef0 7a40 	vmov.f32	s15, s0
 80014ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b0:	edc3 7a00 	vstr	s15, [r3]

	  if(*temperature == -99)
 80014b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800178c <BMP280_ReadTemperatureAndPressure+0x2f8>
 80014c0:	eef4 7a47 	vcmp.f32	s15, s14
 80014c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014c8:	d101      	bne.n	80014ce <BMP280_ReadTemperatureAndPressure+0x3a>
		  return -1;
 80014ca:	23ff      	movs	r3, #255	; 0xff
 80014cc:	e2bf      	b.n	8001a4e <BMP280_ReadTemperatureAndPressure+0x5ba>

	  int32_t adc_P = BMP280_Read24(BMP280_PRESSUREDATA);
 80014ce:	20f7      	movs	r0, #247	; 0xf7
 80014d0:	f7ff fe74 	bl	80011bc <BMP280_Read24>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	  adc_P >>= 4;
 80014da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80014de:	111b      	asrs	r3, r3, #4
 80014e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	  var1 = ((int64_t)t_fine) - 128000;
 80014e4:	4baa      	ldr	r3, [pc, #680]	; (8001790 <BMP280_ReadTemperatureAndPressure+0x2fc>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	17da      	asrs	r2, r3, #31
 80014ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80014ee:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80014f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80014f6:	460b      	mov	r3, r1
 80014f8:	f5b3 33fa 	subs.w	r3, r3, #128000	; 0x1f400
 80014fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80014fe:	4613      	mov	r3, r2
 8001500:	f143 33ff 	adc.w	r3, r3, #4294967295
 8001504:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001506:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = var1 * var1 * (int64_t)p6;
 800150e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001516:	fb03 f102 	mul.w	r1, r3, r2
 800151a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800151e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001522:	fb02 f303 	mul.w	r3, r2, r3
 8001526:	18ca      	adds	r2, r1, r3
 8001528:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800152c:	fba3 4503 	umull	r4, r5, r3, r3
 8001530:	1953      	adds	r3, r2, r5
 8001532:	461d      	mov	r5, r3
 8001534:	4b97      	ldr	r3, [pc, #604]	; (8001794 <BMP280_ReadTemperatureAndPressure+0x300>)
 8001536:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153a:	b21b      	sxth	r3, r3
 800153c:	17da      	asrs	r2, r3, #31
 800153e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001542:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001546:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800154a:	4603      	mov	r3, r0
 800154c:	fb03 f205 	mul.w	r2, r3, r5
 8001550:	460b      	mov	r3, r1
 8001552:	fb04 f303 	mul.w	r3, r4, r3
 8001556:	4413      	add	r3, r2
 8001558:	4602      	mov	r2, r0
 800155a:	fba4 8902 	umull	r8, r9, r4, r2
 800155e:	444b      	add	r3, r9
 8001560:	4699      	mov	r9, r3
 8001562:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
 8001566:	e9c7 8946 	strd	r8, r9, [r7, #280]	; 0x118
	  var2 = var2 + ((var1*(int64_t)p5)<<17);
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <BMP280_ReadTemperatureAndPressure+0x304>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	b21b      	sxth	r3, r3
 8001572:	17da      	asrs	r2, r3, #31
 8001574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800157c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001580:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 8001584:	462a      	mov	r2, r5
 8001586:	fb02 f203 	mul.w	r2, r2, r3
 800158a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800158e:	4621      	mov	r1, r4
 8001590:	fb01 f303 	mul.w	r3, r1, r3
 8001594:	441a      	add	r2, r3
 8001596:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800159a:	4621      	mov	r1, r4
 800159c:	fba3 ab01 	umull	sl, fp, r3, r1
 80015a0:	eb02 030b 	add.w	r3, r2, fp
 80015a4:	469b      	mov	fp, r3
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80015b2:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 80015b6:	ea4f 404a 	mov.w	r0, sl, lsl #17
 80015ba:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015be:	1814      	adds	r4, r2, r0
 80015c0:	643c      	str	r4, [r7, #64]	; 0x40
 80015c2:	414b      	adcs	r3, r1
 80015c4:	647b      	str	r3, [r7, #68]	; 0x44
 80015c6:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 80015ca:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var2 = var2 + (((int64_t)p4)<<35);
 80015ce:	4b73      	ldr	r3, [pc, #460]	; (800179c <BMP280_ReadTemperatureAndPressure+0x308>)
 80015d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	17da      	asrs	r2, r3, #31
 80015d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015dc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015e0:	f04f 0000 	mov.w	r0, #0
 80015e4:	f04f 0100 	mov.w	r1, #0
 80015e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80015ec:	00d9      	lsls	r1, r3, #3
 80015ee:	2000      	movs	r0, #0
 80015f0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80015f4:	1814      	adds	r4, r2, r0
 80015f6:	63bc      	str	r4, [r7, #56]	; 0x38
 80015f8:	414b      	adcs	r3, r1
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015fc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001600:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001604:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001608:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800160c:	fb03 f102 	mul.w	r1, r3, r2
 8001610:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001614:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001618:	fb02 f303 	mul.w	r3, r2, r3
 800161c:	18ca      	adds	r2, r1, r3
 800161e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001622:	fba3 1303 	umull	r1, r3, r3, r3
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800162a:	460b      	mov	r3, r1
 800162c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001630:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001634:	18d3      	adds	r3, r2, r3
 8001636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800163a:	4b59      	ldr	r3, [pc, #356]	; (80017a0 <BMP280_ReadTemperatureAndPressure+0x30c>)
 800163c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001640:	b21b      	sxth	r3, r3
 8001642:	17da      	asrs	r2, r3, #31
 8001644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001648:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800164c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001650:	462b      	mov	r3, r5
 8001652:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8001656:	4642      	mov	r2, r8
 8001658:	fb02 f203 	mul.w	r2, r2, r3
 800165c:	464b      	mov	r3, r9
 800165e:	4621      	mov	r1, r4
 8001660:	fb01 f303 	mul.w	r3, r1, r3
 8001664:	4413      	add	r3, r2
 8001666:	4622      	mov	r2, r4
 8001668:	4641      	mov	r1, r8
 800166a:	fba2 1201 	umull	r1, r2, r2, r1
 800166e:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001672:	460a      	mov	r2, r1
 8001674:	f8c7 20f8 	str.w	r2, [r7, #248]	; 0xf8
 8001678:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800167c:	4413      	add	r3, r2
 800167e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800168e:	4623      	mov	r3, r4
 8001690:	0a18      	lsrs	r0, r3, #8
 8001692:	462b      	mov	r3, r5
 8001694:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001698:	462b      	mov	r3, r5
 800169a:	1219      	asrs	r1, r3, #8
	    ((var1 * (int64_t)p2)<<12);
 800169c:	4b41      	ldr	r3, [pc, #260]	; (80017a4 <BMP280_ReadTemperatureAndPressure+0x310>)
 800169e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	17da      	asrs	r2, r3, #31
 80016a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016ae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016b6:	464a      	mov	r2, r9
 80016b8:	fb02 f203 	mul.w	r2, r2, r3
 80016bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80016c0:	4644      	mov	r4, r8
 80016c2:	fb04 f303 	mul.w	r3, r4, r3
 80016c6:	441a      	add	r2, r3
 80016c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80016cc:	4644      	mov	r4, r8
 80016ce:	fba3 4304 	umull	r4, r3, r3, r4
 80016d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016d6:	4623      	mov	r3, r4
 80016d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80016dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80016e0:	18d3      	adds	r3, r2, r3
 80016e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 80016f2:	464c      	mov	r4, r9
 80016f4:	0323      	lsls	r3, r4, #12
 80016f6:	4644      	mov	r4, r8
 80016f8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016fc:	4644      	mov	r4, r8
 80016fe:	0322      	lsls	r2, r4, #12
	  var1 = ((var1 * var1 * (int64_t)p3)>>8) +
 8001700:	1884      	adds	r4, r0, r2
 8001702:	633c      	str	r4, [r7, #48]	; 0x30
 8001704:	eb41 0303 	adc.w	r3, r1, r3
 8001708:	637b      	str	r3, [r7, #52]	; 0x34
 800170a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800170e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)p1)>>33;
 8001712:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001716:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800171a:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 800171e:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <BMP280_ReadTemperatureAndPressure+0x314>)
 8001724:	881b      	ldrh	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	2200      	movs	r2, #0
 800172a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800172e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001732:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 8001736:	462b      	mov	r3, r5
 8001738:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 800173c:	4642      	mov	r2, r8
 800173e:	fb02 f203 	mul.w	r2, r2, r3
 8001742:	464b      	mov	r3, r9
 8001744:	4621      	mov	r1, r4
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4413      	add	r3, r2
 800174c:	4622      	mov	r2, r4
 800174e:	4641      	mov	r1, r8
 8001750:	fba2 1201 	umull	r1, r2, r2, r1
 8001754:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001758:	460a      	mov	r2, r1
 800175a:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 800175e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001762:	4413      	add	r3, r2
 8001764:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001774:	4629      	mov	r1, r5
 8001776:	104a      	asrs	r2, r1, #1
 8001778:	4629      	mov	r1, r5
 800177a:	17cb      	asrs	r3, r1, #31
 800177c:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120

	  if (var1 == 0) {
 8001780:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001784:	4313      	orrs	r3, r2
 8001786:	d111      	bne.n	80017ac <BMP280_ReadTemperatureAndPressure+0x318>
	    return 0;  // avoid exception caused by division by zero
 8001788:	2300      	movs	r3, #0
 800178a:	e160      	b.n	8001a4e <BMP280_ReadTemperatureAndPressure+0x5ba>
 800178c:	c2c60000 	.word	0xc2c60000
 8001790:	20000214 	.word	0x20000214
 8001794:	20000208 	.word	0x20000208
 8001798:	20000206 	.word	0x20000206
 800179c:	20000204 	.word	0x20000204
 80017a0:	20000202 	.word	0x20000202
 80017a4:	20000200 	.word	0x20000200
 80017a8:	20000212 	.word	0x20000212
	  }
	  p = 1048576 - adc_P;
 80017ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80017b0:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 80017b4:	17da      	asrs	r2, r3, #31
 80017b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80017b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017ba:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017be:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  p = (((p<<31) - var2)*3125) / var1;
 80017c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017c6:	105b      	asrs	r3, r3, #1
 80017c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80017cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80017d0:	07db      	lsls	r3, r3, #31
 80017d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80017d6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80017da:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 80017de:	4621      	mov	r1, r4
 80017e0:	1a89      	subs	r1, r1, r2
 80017e2:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80017e6:	4629      	mov	r1, r5
 80017e8:	eb61 0303 	sbc.w	r3, r1, r3
 80017ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017f0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 80017f4:	4622      	mov	r2, r4
 80017f6:	462b      	mov	r3, r5
 80017f8:	1891      	adds	r1, r2, r2
 80017fa:	6239      	str	r1, [r7, #32]
 80017fc:	415b      	adcs	r3, r3
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001800:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001804:	4621      	mov	r1, r4
 8001806:	1851      	adds	r1, r2, r1
 8001808:	61b9      	str	r1, [r7, #24]
 800180a:	4629      	mov	r1, r5
 800180c:	414b      	adcs	r3, r1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800181c:	4649      	mov	r1, r9
 800181e:	018b      	lsls	r3, r1, #6
 8001820:	4641      	mov	r1, r8
 8001822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001826:	4641      	mov	r1, r8
 8001828:	018a      	lsls	r2, r1, #6
 800182a:	4641      	mov	r1, r8
 800182c:	1889      	adds	r1, r1, r2
 800182e:	6139      	str	r1, [r7, #16]
 8001830:	4649      	mov	r1, r9
 8001832:	eb43 0101 	adc.w	r1, r3, r1
 8001836:	6179      	str	r1, [r7, #20]
 8001838:	f04f 0200 	mov.w	r2, #0
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001844:	4649      	mov	r1, r9
 8001846:	008b      	lsls	r3, r1, #2
 8001848:	4641      	mov	r1, r8
 800184a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800184e:	4641      	mov	r1, r8
 8001850:	008a      	lsls	r2, r1, #2
 8001852:	4610      	mov	r0, r2
 8001854:	4619      	mov	r1, r3
 8001856:	4603      	mov	r3, r0
 8001858:	4622      	mov	r2, r4
 800185a:	189b      	adds	r3, r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
 800185e:	460b      	mov	r3, r1
 8001860:	462a      	mov	r2, r5
 8001862:	eb42 0303 	adc.w	r3, r2, r3
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	f04f 0300 	mov.w	r3, #0
 8001870:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001874:	4649      	mov	r1, r9
 8001876:	008b      	lsls	r3, r1, #2
 8001878:	4641      	mov	r1, r8
 800187a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800187e:	4641      	mov	r1, r8
 8001880:	008a      	lsls	r2, r1, #2
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	4603      	mov	r3, r0
 8001888:	4622      	mov	r2, r4
 800188a:	189b      	adds	r3, r3, r2
 800188c:	67bb      	str	r3, [r7, #120]	; 0x78
 800188e:	462b      	mov	r3, r5
 8001890:	460a      	mov	r2, r1
 8001892:	eb42 0303 	adc.w	r3, r2, r3
 8001896:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001898:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800189c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80018a0:	f7ff fa12 	bl	8000cc8 <__aeabi_ldivmod>
 80018a4:	4602      	mov	r2, r0
 80018a6:	460b      	mov	r3, r1
 80018a8:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	  var1 = (((int64_t)p9) * (p>>13) * (p>>13)) >> 25;
 80018ac:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <BMP280_ReadTemperatureAndPressure+0x5c8>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	b21b      	sxth	r3, r3
 80018b4:	17da      	asrs	r2, r3, #31
 80018b6:	673b      	str	r3, [r7, #112]	; 0x70
 80018b8:	677a      	str	r2, [r7, #116]	; 0x74
 80018ba:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018be:	f04f 0000 	mov.w	r0, #0
 80018c2:	f04f 0100 	mov.w	r1, #0
 80018c6:	0b50      	lsrs	r0, r2, #13
 80018c8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018cc:	1359      	asrs	r1, r3, #13
 80018ce:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 80018d2:	462b      	mov	r3, r5
 80018d4:	fb00 f203 	mul.w	r2, r0, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	fb03 f301 	mul.w	r3, r3, r1
 80018de:	4413      	add	r3, r2
 80018e0:	4622      	mov	r2, r4
 80018e2:	fba2 1200 	umull	r1, r2, r2, r0
 80018e6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80018ea:	460a      	mov	r2, r1
 80018ec:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80018f0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80018f4:	4413      	add	r3, r2
 80018f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018fa:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 80018fe:	f04f 0000 	mov.w	r0, #0
 8001902:	f04f 0100 	mov.w	r1, #0
 8001906:	0b50      	lsrs	r0, r2, #13
 8001908:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800190c:	1359      	asrs	r1, r3, #13
 800190e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8001912:	462b      	mov	r3, r5
 8001914:	fb00 f203 	mul.w	r2, r0, r3
 8001918:	4623      	mov	r3, r4
 800191a:	fb03 f301 	mul.w	r3, r3, r1
 800191e:	4413      	add	r3, r2
 8001920:	4622      	mov	r2, r4
 8001922:	fba2 1200 	umull	r1, r2, r2, r0
 8001926:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800192a:	460a      	mov	r2, r1
 800192c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001930:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001934:	4413      	add	r3, r2
 8001936:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001946:	4621      	mov	r1, r4
 8001948:	0e4a      	lsrs	r2, r1, #25
 800194a:	4629      	mov	r1, r5
 800194c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001950:	4629      	mov	r1, r5
 8001952:	164b      	asrs	r3, r1, #25
 8001954:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	  var2 = (((int64_t)p8) * p) >> 19;
 8001958:	4b41      	ldr	r3, [pc, #260]	; (8001a60 <BMP280_ReadTemperatureAndPressure+0x5cc>)
 800195a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195e:	b21b      	sxth	r3, r3
 8001960:	17da      	asrs	r2, r3, #31
 8001962:	66bb      	str	r3, [r7, #104]	; 0x68
 8001964:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001966:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800196a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800196e:	462a      	mov	r2, r5
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001978:	4621      	mov	r1, r4
 800197a:	fb01 f303 	mul.w	r3, r1, r3
 800197e:	4413      	add	r3, r2
 8001980:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001984:	4621      	mov	r1, r4
 8001986:	fba2 1201 	umull	r1, r2, r2, r1
 800198a:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800198e:	460a      	mov	r2, r1
 8001990:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001994:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001998:	4413      	add	r3, r2
 800199a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019aa:	4621      	mov	r1, r4
 80019ac:	0cca      	lsrs	r2, r1, #19
 80019ae:	4629      	mov	r1, r5
 80019b0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019b4:	4629      	mov	r1, r5
 80019b6:	14cb      	asrs	r3, r1, #19
 80019b8:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

	  p = ((p + var1 + var2) >> 8) + (((int64_t)p7)<<4);
 80019bc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80019c0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80019c4:	1884      	adds	r4, r0, r2
 80019c6:	663c      	str	r4, [r7, #96]	; 0x60
 80019c8:	eb41 0303 	adc.w	r3, r1, r3
 80019cc:	667b      	str	r3, [r7, #100]	; 0x64
 80019ce:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 80019d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019d6:	4621      	mov	r1, r4
 80019d8:	1889      	adds	r1, r1, r2
 80019da:	65b9      	str	r1, [r7, #88]	; 0x58
 80019dc:	4629      	mov	r1, r5
 80019de:	eb43 0101 	adc.w	r1, r3, r1
 80019e2:	65f9      	str	r1, [r7, #92]	; 0x5c
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80019f0:	4623      	mov	r3, r4
 80019f2:	0a18      	lsrs	r0, r3, #8
 80019f4:	462b      	mov	r3, r5
 80019f6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80019fa:	462b      	mov	r3, r5
 80019fc:	1219      	asrs	r1, r3, #8
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <BMP280_ReadTemperatureAndPressure+0x5d0>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	b21b      	sxth	r3, r3
 8001a06:	17da      	asrs	r2, r3, #31
 8001a08:	653b      	str	r3, [r7, #80]	; 0x50
 8001a0a:	657a      	str	r2, [r7, #84]	; 0x54
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001a18:	464c      	mov	r4, r9
 8001a1a:	0123      	lsls	r3, r4, #4
 8001a1c:	4644      	mov	r4, r8
 8001a1e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a22:	4644      	mov	r4, r8
 8001a24:	0122      	lsls	r2, r4, #4
 8001a26:	1884      	adds	r4, r0, r2
 8001a28:	603c      	str	r4, [r7, #0]
 8001a2a:	eb41 0303 	adc.w	r3, r1, r3
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a34:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	  *pressure = (int32_t)p/256;
 8001a38:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	da00      	bge.n	8001a42 <BMP280_ReadTemperatureAndPressure+0x5ae>
 8001a40:	33ff      	adds	r3, #255	; 0xff
 8001a42:	121b      	asrs	r3, r3, #8
 8001a44:	461a      	mov	r2, r3
 8001a46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a4a:	601a      	str	r2, [r3, #0]

	  return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8001a54:	46bd      	mov	sp, r7
 8001a56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000020e 	.word	0x2000020e
 8001a60:	2000020c 	.word	0x2000020c
 8001a64:	2000020a 	.word	0x2000020a

08001a68 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x70 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f023 030f 	bic.w	r3, r3, #15
 8001a78:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001a80:	7bfb      	ldrb	r3, [r7, #15]
 8001a82:	f043 030c 	orr.w	r3, r3, #12
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	f043 0308 	orr.w	r3, r3, #8
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	f043 030c 	orr.w	r3, r3, #12
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001a9e:	7bbb      	ldrb	r3, [r7, #14]
 8001aa0:	f043 0308 	orr.w	r3, r3, #8
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001aa8:	f107 0208 	add.w	r2, r7, #8
 8001aac:	2364      	movs	r3, #100	; 0x64
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	2170      	movs	r1, #112	; 0x70
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <lcd_send_cmd+0x5c>)
 8001ab6:	f001 fd5d 	bl	8003574 <HAL_I2C_Master_Transmit>
}
 8001aba:	bf00      	nop
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	2000026c 	.word	0x2000026c

08001ac8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	f023 030f 	bic.w	r3, r3, #15
 8001ad8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001ae0:	7bfb      	ldrb	r3, [r7, #15]
 8001ae2:	f043 030d 	orr.w	r3, r3, #13
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001aea:	7bfb      	ldrb	r3, [r7, #15]
 8001aec:	f043 0309 	orr.w	r3, r3, #9
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001af4:	7bbb      	ldrb	r3, [r7, #14]
 8001af6:	f043 030d 	orr.w	r3, r3, #13
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001afe:	7bbb      	ldrb	r3, [r7, #14]
 8001b00:	f043 0309 	orr.w	r3, r3, #9
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c4, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001b08:	f107 0208 	add.w	r2, r7, #8
 8001b0c:	2364      	movs	r3, #100	; 0x64
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2304      	movs	r3, #4
 8001b12:	2170      	movs	r1, #112	; 0x70
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <lcd_send_data+0x5c>)
 8001b16:	f001 fd2d 	bl	8003574 <HAL_I2C_Master_Transmit>
}
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000026c 	.word	0x2000026c

08001b28 <lcd_clear>:

void lcd_clear (void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001b2e:	2080      	movs	r0, #128	; 0x80
 8001b30:	f7ff ff9a 	bl	8001a68 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8001b34:	2300      	movs	r3, #0
 8001b36:	607b      	str	r3, [r7, #4]
 8001b38:	e005      	b.n	8001b46 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8001b3a:	2020      	movs	r0, #32
 8001b3c:	f7ff ffc4 	bl	8001ac8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2b45      	cmp	r3, #69	; 0x45
 8001b4a:	ddf6      	ble.n	8001b3a <lcd_clear+0x12>
	}
	lcd_put_cur(0, 0); //Dopisane ustawienie kursora na 0,0
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f000 f804 	bl	8001b5c <lcd_put_cur>
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
    switch (row)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d003      	beq.n	8001b74 <lcd_put_cur+0x18>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d005      	beq.n	8001b7e <lcd_put_cur+0x22>
 8001b72:	e009      	b.n	8001b88 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b7a:	603b      	str	r3, [r7, #0]
            break;
 8001b7c:	e004      	b.n	8001b88 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b84:	603b      	str	r3, [r7, #0]
            break;
 8001b86:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff6b 	bl	8001a68 <lcd_send_cmd>
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <lcd_init>:


void lcd_init (void)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001b9e:	2032      	movs	r0, #50	; 0x32
 8001ba0:	f001 f956 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001ba4:	2030      	movs	r0, #48	; 0x30
 8001ba6:	f7ff ff5f 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001baa:	2005      	movs	r0, #5
 8001bac:	f001 f950 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001bb0:	2030      	movs	r0, #48	; 0x30
 8001bb2:	f7ff ff59 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f001 f94a 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001bbc:	2030      	movs	r0, #48	; 0x30
 8001bbe:	f7ff ff53 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(10);
 8001bc2:	200a      	movs	r0, #10
 8001bc4:	f001 f944 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001bc8:	2020      	movs	r0, #32
 8001bca:	f7ff ff4d 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(10);
 8001bce:	200a      	movs	r0, #10
 8001bd0:	f001 f93e 	bl	8002e50 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001bd4:	2028      	movs	r0, #40	; 0x28
 8001bd6:	f7ff ff47 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(1);
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f001 f938 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001be0:	2008      	movs	r0, #8
 8001be2:	f7ff ff41 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f001 f932 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001bec:	2001      	movs	r0, #1
 8001bee:	f7ff ff3b 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f001 f92c 	bl	8002e50 <HAL_Delay>
	HAL_Delay(1);
 8001bf8:	2001      	movs	r0, #1
 8001bfa:	f001 f929 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001bfe:	2006      	movs	r0, #6
 8001c00:	f7ff ff32 	bl	8001a68 <lcd_send_cmd>
	HAL_Delay(1);
 8001c04:	2001      	movs	r0, #1
 8001c06:	f001 f923 	bl	8002e50 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001c0a:	200c      	movs	r0, #12
 8001c0c:	f7ff ff2c 	bl	8001a68 <lcd_send_cmd>
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
	while (*str)
 8001c1c:	e006      	b.n	8001c2c <lcd_send_string+0x18>
	{
		lcd_send_data (*str++);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	1c5a      	adds	r2, r3, #1
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff ff4e 	bl	8001ac8 <lcd_send_data>
	while (*str)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f4      	bne.n	8001c1e <lcd_send_string+0xa>
	}
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c40:	b5b0      	push	{r4, r5, r7, lr}
 8001c42:	b08c      	sub	sp, #48	; 0x30
 8001c44:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c46:	f001 f8a6 	bl	8002d96 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c4a:	f000 fa25 	bl	8002098 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c4e:	f000 fc3d 	bl	80024cc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001c52:	f000 fbdd 	bl	8002410 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c56:	f000 fc0b 	bl	8002470 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001c5a:	f000 fa85 	bl	8002168 <MX_I2C1_Init>
  MX_TIM1_Init();
 8001c5e:	f000 fb03 	bl	8002268 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001c62:	f000 fb5b 	bl	800231c <MX_TIM3_Init>
  MX_I2C4_Init();
 8001c66:	f000 fabf 	bl	80021e8 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	480a      	ldr	r0, [pc, #40]	; (8001c98 <main+0x58>)
 8001c6e:	f001 fbd6 	bl	800341e <HAL_GPIO_TogglePin>
  uint32_t wait=HAL_GetTick();
 8001c72:	f001 f8e1 	bl	8002e38 <HAL_GetTick>
 8001c76:	6278      	str	r0, [r7, #36]	; 0x24
  while(HAL_GetTick()-wait<5000){
 8001c78:	e012      	b.n	8001ca0 <main+0x60>
	  if (HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin) == 1){
 8001c7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c7e:	4807      	ldr	r0, [pc, #28]	; (8001c9c <main+0x5c>)
 8001c80:	f001 fb9c 	bl	80033bc <HAL_GPIO_ReadPin>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10a      	bne.n	8001ca0 <main+0x60>
  		  HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8001c8a:	2180      	movs	r1, #128	; 0x80
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <main+0x58>)
 8001c8e:	f001 fbc6 	bl	800341e <HAL_GPIO_TogglePin>
  		  lcd_init ();
 8001c92:	f7ff ff82 	bl	8001b9a <lcd_init>
  		  break;
 8001c96:	e00c      	b.n	8001cb2 <main+0x72>
 8001c98:	40020400 	.word	0x40020400
 8001c9c:	40020800 	.word	0x40020800
  while(HAL_GetTick()-wait<5000){
 8001ca0:	f001 f8ca 	bl	8002e38 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	f241 3287 	movw	r2, #4999	; 0x1387
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d9e3      	bls.n	8001c7a <main+0x3a>
  	  }
  }
  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	48c0      	ldr	r0, [pc, #768]	; (8001fb8 <main+0x378>)
 8001cb6:	f001 fbb2 	bl	800341e <HAL_GPIO_TogglePin>
  BMP280_Init(&hi2c1, BMP280_TEMPERATURE_16BIT, BMP280_STANDARD, BMP280_FORCEDMODE);
 8001cba:	2301      	movs	r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	48be      	ldr	r0, [pc, #760]	; (8001fbc <main+0x37c>)
 8001cc2:	f7ff fa9d 	bl	8001200 <BMP280_Init>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001cc6:	213c      	movs	r1, #60	; 0x3c
 8001cc8:	48bd      	ldr	r0, [pc, #756]	; (8001fc0 <main+0x380>)
 8001cca:	f003 ff11 	bl	8005af0 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001cce:	2100      	movs	r1, #0
 8001cd0:	48bc      	ldr	r0, [pc, #752]	; (8001fc4 <main+0x384>)
 8001cd2:	f003 fd6d 	bl	80057b0 <HAL_TIM_PWM_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(HAL_GPIO_ReadPin(GPIOB, LD3_Pin) == 0){
 8001cd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cda:	48b7      	ldr	r0, [pc, #732]	; (8001fb8 <main+0x378>)
 8001cdc:	f001 fb6e 	bl	80033bc <HAL_GPIO_ReadPin>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d10b      	bne.n	8001cfe <main+0xbe>
	  zadana=__HAL_TIM_GET_COUNTER(&htim1)/8+20;
 8001ce6:	4bb6      	ldr	r3, [pc, #728]	; (8001fc0 <main+0x380>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	08db      	lsrs	r3, r3, #3
 8001cee:	3314      	adds	r3, #20
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	4bb3      	ldr	r3, [pc, #716]	; (8001fc8 <main+0x388>)
 8001cfa:	edc3 7a00 	vstr	s15, [r3]
	  }
	  //temperature=BMP280_ReadTemperature();
	  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8001cfe:	49b3      	ldr	r1, [pc, #716]	; (8001fcc <main+0x38c>)
 8001d00:	48b3      	ldr	r0, [pc, #716]	; (8001fd0 <main+0x390>)
 8001d02:	f7ff fbc7 	bl	8001494 <BMP280_ReadTemperatureAndPressure>
	  poprzedniuchyb=filtrowanyuchyb;
 8001d06:	4bb3      	ldr	r3, [pc, #716]	; (8001fd4 <main+0x394>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4ab3      	ldr	r2, [pc, #716]	; (8001fd8 <main+0x398>)
 8001d0c:	6013      	str	r3, [r2, #0]
	  uchyb=zadana-temperature;
 8001d0e:	4bae      	ldr	r3, [pc, #696]	; (8001fc8 <main+0x388>)
 8001d10:	ed93 7a00 	vldr	s14, [r3]
 8001d14:	4bae      	ldr	r3, [pc, #696]	; (8001fd0 <main+0x390>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1e:	4baf      	ldr	r3, [pc, #700]	; (8001fdc <main+0x39c>)
 8001d20:	edc3 7a00 	vstr	s15, [r3]
	  filtrowanyuchyb=0.20787957635076193/2*filtrowanyuchyb+(1-0.20787957635076193/2)*uchyb;
 8001d24:	4bab      	ldr	r3, [pc, #684]	; (8001fd4 <main+0x394>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc2d 	bl	8000588 <__aeabi_f2d>
 8001d2e:	a39e      	add	r3, pc, #632	; (adr r3, 8001fa8 <main+0x368>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc80 	bl	8000638 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4ba6      	ldr	r3, [pc, #664]	; (8001fdc <main+0x39c>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc1f 	bl	8000588 <__aeabi_f2d>
 8001d4a:	a399      	add	r3, pc, #612	; (adr r3, 8001fb0 <main+0x370>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fc72 	bl	8000638 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fab6 	bl	80002cc <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe ff5e 	bl	8000c28 <__aeabi_d2f>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	4a99      	ldr	r2, [pc, #612]	; (8001fd4 <main+0x394>)
 8001d70:	6013      	str	r3, [r2, #0]
	  calkowanyuchyb=calkowanyuchyb+uchyb;
 8001d72:	4b9b      	ldr	r3, [pc, #620]	; (8001fe0 <main+0x3a0>)
 8001d74:	ed93 7a00 	vldr	s14, [r3]
 8001d78:	4b98      	ldr	r3, [pc, #608]	; (8001fdc <main+0x39c>)
 8001d7a:	edd3 7a00 	vldr	s15, [r3]
 8001d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d82:	4b97      	ldr	r3, [pc, #604]	; (8001fe0 <main+0x3a0>)
 8001d84:	edc3 7a00 	vstr	s15, [r3]
	  pTp=Tp;
 8001d88:	4b96      	ldr	r3, [pc, #600]	; (8001fe4 <main+0x3a4>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <main+0x3a8>)
 8001d8e:	6013      	str	r3, [r2, #0]
	  Tp=HAL_GetTick();
 8001d90:	f001 f852 	bl	8002e38 <HAL_GetTick>
 8001d94:	ee07 0a90 	vmov	s15, r0
 8001d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9c:	4b91      	ldr	r3, [pc, #580]	; (8001fe4 <main+0x3a4>)
 8001d9e:	edc3 7a00 	vstr	s15, [r3]
	  sterowanie=round(kp*uchyb+kd/(Tp-pTp)*(filtrowanyuchyb-poprzedniuchyb)+ki*calkowanyuchyb);
 8001da2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001fec <main+0x3ac>
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <main+0x39c>)
 8001da8:	edd3 7a00 	vldr	s15, [r3]
 8001dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db0:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 8001db4:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <main+0x3a4>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	4b8b      	ldr	r3, [pc, #556]	; (8001fe8 <main+0x3a8>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dc4:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001dc8:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <main+0x394>)
 8001dca:	ed93 6a00 	vldr	s12, [r3]
 8001dce:	4b82      	ldr	r3, [pc, #520]	; (8001fd8 <main+0x398>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001dd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ddc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001de0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001de4:	4b7e      	ldr	r3, [pc, #504]	; (8001fe0 <main+0x3a0>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001df2:	ee17 0a90 	vmov	r0, s15
 8001df6:	f7fe fbc7 	bl	8000588 <__aeabi_f2d>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	ec43 2b10 	vmov	d0, r2, r3
 8001e02:	f009 ff01 	bl	800bc08 <round>
 8001e06:	ec53 2b10 	vmov	r2, r3, d0
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f7fe ff0b 	bl	8000c28 <__aeabi_d2f>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a76      	ldr	r2, [pc, #472]	; (8001ff0 <main+0x3b0>)
 8001e16:	6013      	str	r3, [r2, #0]
	  if(sterowanie<0){
 8001e18:	4b75      	ldr	r3, [pc, #468]	; (8001ff0 <main+0x3b0>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e26:	d503      	bpl.n	8001e30 <main+0x1f0>
		  sterowanie=0;
 8001e28:	4b71      	ldr	r3, [pc, #452]	; (8001ff0 <main+0x3b0>)
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
	  }
	  if(sterowanie>65535){
 8001e30:	4b6f      	ldr	r3, [pc, #444]	; (8001ff0 <main+0x3b0>)
 8001e32:	edd3 7a00 	vldr	s15, [r3]
 8001e36:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001ff4 <main+0x3b4>
 8001e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dd02      	ble.n	8001e4a <main+0x20a>
		  sterowanie=65535;
 8001e44:	4b6a      	ldr	r3, [pc, #424]	; (8001ff0 <main+0x3b0>)
 8001e46:	4a6c      	ldr	r2, [pc, #432]	; (8001ff8 <main+0x3b8>)
 8001e48:	601a      	str	r2, [r3, #0]
	  }
	  if(calkowanyuchyb*ki>65535){
 8001e4a:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <main+0x3a0>)
 8001e4c:	edd3 7a00 	vldr	s15, [r3]
 8001e50:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e58:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001ff4 <main+0x3b4>
 8001e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e64:	dd08      	ble.n	8001e78 <main+0x238>
		  calkowanyuchyb=65535/ki;
 8001e66:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e6a:	eddf 6a62 	vldr	s13, [pc, #392]	; 8001ff4 <main+0x3b4>
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	4b5b      	ldr	r3, [pc, #364]	; (8001fe0 <main+0x3a0>)
 8001e74:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if(calkowanyuchyb*ki<-65535){
 8001e78:	4b59      	ldr	r3, [pc, #356]	; (8001fe0 <main+0x3a0>)
 8001e7a:	edd3 7a00 	vldr	s15, [r3]
 8001e7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e86:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001ffc <main+0x3bc>
 8001e8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e92:	d508      	bpl.n	8001ea6 <main+0x266>
	  		  calkowanyuchyb=-65535/ki;
 8001e94:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001e98:	eddf 6a58 	vldr	s13, [pc, #352]	; 8001ffc <main+0x3bc>
 8001e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <main+0x3a0>)
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
	  	  }
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, sterowanie);
 8001ea6:	4b52      	ldr	r3, [pc, #328]	; (8001ff0 <main+0x3b0>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	4b45      	ldr	r3, [pc, #276]	; (8001fc4 <main+0x384>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001eb4:	ee17 2a90 	vmov	r2, s15
 8001eb8:	635a      	str	r2, [r3, #52]	; 0x34
//	  sprintf((char*)msg, "Temperatura aktualna= %3i\n\r °C", temperature);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
//	  sprintf((char*)msg, "Temperatura zadana= %3i\n\r °C", temperature);
//	  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
	  sprintf((char*)msg, "%f\n\r%09.6f\n\r", temperature, zadana);
 8001eba:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <main+0x390>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb62 	bl	8000588 <__aeabi_f2d>
 8001ec4:	4604      	mov	r4, r0
 8001ec6:	460d      	mov	r5, r1
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <main+0x388>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb5b 	bl	8000588 <__aeabi_f2d>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eda:	4622      	mov	r2, r4
 8001edc:	462b      	mov	r3, r5
 8001ede:	4948      	ldr	r1, [pc, #288]	; (8002000 <main+0x3c0>)
 8001ee0:	4848      	ldr	r0, [pc, #288]	; (8002004 <main+0x3c4>)
 8001ee2:	f007 f891 	bl	8009008 <siprintf>
	  if (startuart){
 8001ee6:	4b48      	ldr	r3, [pc, #288]	; (8002008 <main+0x3c8>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00a      	beq.n	8001f04 <main+0x2c4>
		  HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 1000);
 8001eee:	4845      	ldr	r0, [pc, #276]	; (8002004 <main+0x3c4>)
 8001ef0:	f7fe f9de 	bl	80002b0 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001efc:	4941      	ldr	r1, [pc, #260]	; (8002004 <main+0x3c4>)
 8001efe:	4843      	ldr	r0, [pc, #268]	; (800200c <main+0x3cc>)
 8001f00:	f004 fcfc 	bl	80068fc <HAL_UART_Transmit>
	  }
	  if (HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin) == 1 && !startuart){
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	4841      	ldr	r0, [pc, #260]	; (8002010 <main+0x3d0>)
 8001f0a:	f001 fa57 	bl	80033bc <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d112      	bne.n	8001f3a <main+0x2fa>
 8001f14:	4b3c      	ldr	r3, [pc, #240]	; (8002008 <main+0x3c8>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <main+0x2fa>
		  startuart=true;
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <main+0x3c8>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
		  while(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin) == 1){}
 8001f28:	bf00      	nop
 8001f2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f2e:	4838      	ldr	r0, [pc, #224]	; (8002010 <main+0x3d0>)
 8001f30:	f001 fa44 	bl	80033bc <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d0f7      	beq.n	8001f2a <main+0x2ea>
	  }
	  if (HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin) == 1 && startuart){
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	4834      	ldr	r0, [pc, #208]	; (8002010 <main+0x3d0>)
 8001f40:	f001 fa3c 	bl	80033bc <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d166      	bne.n	8002018 <main+0x3d8>
 8001f4a:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <main+0x3c8>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d062      	beq.n	8002018 <main+0x3d8>
		  HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8001f52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f56:	4818      	ldr	r0, [pc, #96]	; (8001fb8 <main+0x378>)
 8001f58:	f001 fa61 	bl	800341e <HAL_GPIO_TogglePin>
		  if (HAL_GPIO_ReadPin(GPIOB, LD3_Pin) == 1){
 8001f5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f60:	4815      	ldr	r0, [pc, #84]	; (8001fb8 <main+0x378>)
 8001f62:	f001 fa2b 	bl	80033bc <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d112      	bne.n	8001f92 <main+0x352>
			  HAL_UART_Receive(&huart3,(uint8_t*)otrzymana, 8, 10000);
 8001f6c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001f70:	2208      	movs	r2, #8
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <main+0x3d4>)
 8001f74:	4825      	ldr	r0, [pc, #148]	; (800200c <main+0x3cc>)
 8001f76:	f004 fd44 	bl	8006a02 <HAL_UART_Receive>
			  zadana=atof(otrzymana);
 8001f7a:	4826      	ldr	r0, [pc, #152]	; (8002014 <main+0x3d4>)
 8001f7c:	f005 fcfe 	bl	800797c <atof>
 8001f80:	ec53 2b10 	vmov	r2, r3, d0
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f7fe fe4e 	bl	8000c28 <__aeabi_d2f>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	4a0e      	ldr	r2, [pc, #56]	; (8001fc8 <main+0x388>)
 8001f90:	6013      	str	r3, [r2, #0]
		  }
		  while(HAL_GPIO_ReadPin(GPIOC, USER_Btn_Pin) == 1){}
 8001f92:	bf00      	nop
 8001f94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f98:	481d      	ldr	r0, [pc, #116]	; (8002010 <main+0x3d0>)
 8001f9a:	f001 fa0f 	bl	80033bc <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d0f7      	beq.n	8001f94 <main+0x354>
 8001fa4:	e038      	b.n	8002018 <main+0x3d8>
 8001fa6:	bf00      	nop
 8001fa8:	46f767e0 	.word	0x46f767e0
 8001fac:	3fba9bcc 	.word	0x3fba9bcc
 8001fb0:	77211304 	.word	0x77211304
 8001fb4:	3fecac86 	.word	0x3fecac86
 8001fb8:	40020400 	.word	0x40020400
 8001fbc:	20000218 	.word	0x20000218
 8001fc0:	200002c0 	.word	0x200002c0
 8001fc4:	2000030c 	.word	0x2000030c
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	200008ec 	.word	0x200008ec
 8001fd0:	200008e8 	.word	0x200008e8
 8001fd4:	200008f4 	.word	0x200008f4
 8001fd8:	200008f8 	.word	0x200008f8
 8001fdc:	200008f0 	.word	0x200008f0
 8001fe0:	200008fc 	.word	0x200008fc
 8001fe4:	20000904 	.word	0x20000904
 8001fe8:	20000908 	.word	0x20000908
 8001fec:	45bb8000 	.word	0x45bb8000
 8001ff0:	20000900 	.word	0x20000900
 8001ff4:	477fff00 	.word	0x477fff00
 8001ff8:	477fff00 	.word	0x477fff00
 8001ffc:	c77fff00 	.word	0xc77fff00
 8002000:	0800bcb0 	.word	0x0800bcb0
 8002004:	2000090c 	.word	0x2000090c
 8002008:	20000948 	.word	0x20000948
 800200c:	20000358 	.word	0x20000358
 8002010:	40020800 	.word	0x40020800
 8002014:	20000940 	.word	0x20000940
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, LD2_Pin) == 1){
 8002018:	2180      	movs	r1, #128	; 0x80
 800201a:	481a      	ldr	r0, [pc, #104]	; (8002084 <main+0x444>)
 800201c:	f001 f9ce 	bl	80033bc <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	f47f ae57 	bne.w	8001cd6 <main+0x96>
		  BMP280_ReadTemperatureAndPressure(&temperature, &pressure);
 8002028:	4917      	ldr	r1, [pc, #92]	; (8002088 <main+0x448>)
 800202a:	4818      	ldr	r0, [pc, #96]	; (800208c <main+0x44c>)
 800202c:	f7ff fa32 	bl	8001494 <BMP280_ReadTemperatureAndPressure>
		   lcd_clear ();
 8002030:	f7ff fd7a 	bl	8001b28 <lcd_clear>
		   lcd_put_cur(0, 0);
 8002034:	2100      	movs	r1, #0
 8002036:	2000      	movs	r0, #0
 8002038:	f7ff fd90 	bl	8001b5c <lcd_put_cur>
		   sprintf((char*)text, "Temp. %.2f C", temperature);
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <main+0x44c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe faa1 	bl	8000588 <__aeabi_f2d>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	1d38      	adds	r0, r7, #4
 800204c:	4910      	ldr	r1, [pc, #64]	; (8002090 <main+0x450>)
 800204e:	f006 ffdb 	bl	8009008 <siprintf>
		   lcd_send_string(text);
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fddd 	bl	8001c14 <lcd_send_string>
		   lcd_put_cur(1, 0);
 800205a:	2100      	movs	r1, #0
 800205c:	2001      	movs	r0, #1
 800205e:	f7ff fd7d 	bl	8001b5c <lcd_put_cur>
		   sprintf((char*)text, "Cisn. %ld Pa", pressure);
 8002062:	4b09      	ldr	r3, [pc, #36]	; (8002088 <main+0x448>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	1d3b      	adds	r3, r7, #4
 8002068:	490a      	ldr	r1, [pc, #40]	; (8002094 <main+0x454>)
 800206a:	4618      	mov	r0, r3
 800206c:	f006 ffcc 	bl	8009008 <siprintf>
		   lcd_send_string(text);
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff fdce 	bl	8001c14 <lcd_send_string>
		   HAL_Delay(1000);
 8002078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800207c:	f000 fee8 	bl	8002e50 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(GPIOB, LD3_Pin) == 0){
 8002080:	e629      	b.n	8001cd6 <main+0x96>
 8002082:	bf00      	nop
 8002084:	40020400 	.word	0x40020400
 8002088:	200008ec 	.word	0x200008ec
 800208c:	200008e8 	.word	0x200008e8
 8002090:	0800bcc0 	.word	0x0800bcc0
 8002094:	0800bcd0 	.word	0x0800bcd0

08002098 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b094      	sub	sp, #80	; 0x50
 800209c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800209e:	f107 0320 	add.w	r3, r7, #32
 80020a2:	2230      	movs	r2, #48	; 0x30
 80020a4:	2100      	movs	r1, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	f007 f811 	bl	80090ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020ac:	f107 030c 	add.w	r3, r7, #12
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
 80020ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80020bc:	f002 f9f6 	bl	80044ac <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	4b27      	ldr	r3, [pc, #156]	; (8002160 <SystemClock_Config+0xc8>)
 80020c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c4:	4a26      	ldr	r2, [pc, #152]	; (8002160 <SystemClock_Config+0xc8>)
 80020c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ca:	6413      	str	r3, [r2, #64]	; 0x40
 80020cc:	4b24      	ldr	r3, [pc, #144]	; (8002160 <SystemClock_Config+0xc8>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020d8:	4b22      	ldr	r3, [pc, #136]	; (8002164 <SystemClock_Config+0xcc>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020e0:	4a20      	ldr	r2, [pc, #128]	; (8002164 <SystemClock_Config+0xcc>)
 80020e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e6:	6013      	str	r3, [r2, #0]
 80020e8:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <SystemClock_Config+0xcc>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020f0:	607b      	str	r3, [r7, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80020f4:	2301      	movs	r3, #1
 80020f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80020f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80020fc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fe:	2302      	movs	r3, #2
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002108:	2304      	movs	r3, #4
 800210a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800210c:	2348      	movs	r3, #72	; 0x48
 800210e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002110:	2302      	movs	r3, #2
 8002112:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8002114:	2303      	movs	r3, #3
 8002116:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	4618      	mov	r0, r3
 800211e:	f002 f9d5 	bl	80044cc <HAL_RCC_OscConfig>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002128:	f000 fac2 	bl	80026b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212c:	230f      	movs	r3, #15
 800212e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002130:	2302      	movs	r3, #2
 8002132:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002142:	f107 030c 	add.w	r3, r7, #12
 8002146:	2102      	movs	r1, #2
 8002148:	4618      	mov	r0, r3
 800214a:	f002 fc63 	bl	8004a14 <HAL_RCC_ClockConfig>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002154:	f000 faac 	bl	80026b0 <Error_Handler>
  }
}
 8002158:	bf00      	nop
 800215a:	3750      	adds	r7, #80	; 0x50
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000

08002168 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <MX_I2C1_Init+0x74>)
 800216e:	4a1c      	ldr	r2, [pc, #112]	; (80021e0 <MX_I2C1_Init+0x78>)
 8002170:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8002172:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <MX_I2C1_Init+0x74>)
 8002174:	4a1b      	ldr	r2, [pc, #108]	; (80021e4 <MX_I2C1_Init+0x7c>)
 8002176:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002178:	4b18      	ldr	r3, [pc, #96]	; (80021dc <MX_I2C1_Init+0x74>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <MX_I2C1_Init+0x74>)
 8002180:	2201      	movs	r2, #1
 8002182:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002184:	4b15      	ldr	r3, [pc, #84]	; (80021dc <MX_I2C1_Init+0x74>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800218a:	4b14      	ldr	r3, [pc, #80]	; (80021dc <MX_I2C1_Init+0x74>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002190:	4b12      	ldr	r3, [pc, #72]	; (80021dc <MX_I2C1_Init+0x74>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <MX_I2C1_Init+0x74>)
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800219c:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a2:	480e      	ldr	r0, [pc, #56]	; (80021dc <MX_I2C1_Init+0x74>)
 80021a4:	f001 f956 	bl	8003454 <HAL_I2C_Init>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021ae:	f000 fa7f 	bl	80026b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021b2:	2100      	movs	r1, #0
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <MX_I2C1_Init+0x74>)
 80021b6:	f001 ff99 	bl	80040ec <HAL_I2CEx_ConfigAnalogFilter>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021c0:	f000 fa76 	bl	80026b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021c4:	2100      	movs	r1, #0
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <MX_I2C1_Init+0x74>)
 80021c8:	f001 ffdb 	bl	8004182 <HAL_I2CEx_ConfigDigitalFilter>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021d2:	f000 fa6d 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000218 	.word	0x20000218
 80021e0:	40005400 	.word	0x40005400
 80021e4:	00808cd2 	.word	0x00808cd2

080021e8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80021ec:	4b1b      	ldr	r3, [pc, #108]	; (800225c <MX_I2C4_Init+0x74>)
 80021ee:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <MX_I2C4_Init+0x78>)
 80021f0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00808CD2;
 80021f2:	4b1a      	ldr	r3, [pc, #104]	; (800225c <MX_I2C4_Init+0x74>)
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <MX_I2C4_Init+0x7c>)
 80021f6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80021f8:	4b18      	ldr	r3, [pc, #96]	; (800225c <MX_I2C4_Init+0x74>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021fe:	4b17      	ldr	r3, [pc, #92]	; (800225c <MX_I2C4_Init+0x74>)
 8002200:	2201      	movs	r2, #1
 8002202:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002204:	4b15      	ldr	r3, [pc, #84]	; (800225c <MX_I2C4_Init+0x74>)
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800220a:	4b14      	ldr	r3, [pc, #80]	; (800225c <MX_I2C4_Init+0x74>)
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002210:	4b12      	ldr	r3, [pc, #72]	; (800225c <MX_I2C4_Init+0x74>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002216:	4b11      	ldr	r3, [pc, #68]	; (800225c <MX_I2C4_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <MX_I2C4_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8002222:	480e      	ldr	r0, [pc, #56]	; (800225c <MX_I2C4_Init+0x74>)
 8002224:	f001 f916 	bl	8003454 <HAL_I2C_Init>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800222e:	f000 fa3f 	bl	80026b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002232:	2100      	movs	r1, #0
 8002234:	4809      	ldr	r0, [pc, #36]	; (800225c <MX_I2C4_Init+0x74>)
 8002236:	f001 ff59 	bl	80040ec <HAL_I2CEx_ConfigAnalogFilter>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002240:	f000 fa36 	bl	80026b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8002244:	2100      	movs	r1, #0
 8002246:	4805      	ldr	r0, [pc, #20]	; (800225c <MX_I2C4_Init+0x74>)
 8002248:	f001 ff9b 	bl	8004182 <HAL_I2CEx_ConfigDigitalFilter>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8002252:	f000 fa2d 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	2000026c 	.word	0x2000026c
 8002260:	40006000 	.word	0x40006000
 8002264:	00808cd2 	.word	0x00808cd2

08002268 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08c      	sub	sp, #48	; 0x30
 800226c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f006 ff29 	bl	80090ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]
 8002284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <MX_TIM1_Init+0xac>)
 8002288:	4a23      	ldr	r2, [pc, #140]	; (8002318 <MX_TIM1_Init+0xb0>)
 800228a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800228c:	4b21      	ldr	r3, [pc, #132]	; (8002314 <MX_TIM1_Init+0xac>)
 800228e:	2200      	movs	r2, #0
 8002290:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <MX_TIM1_Init+0xac>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 163;
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <MX_TIM1_Init+0xac>)
 800229a:	22a3      	movs	r2, #163	; 0xa3
 800229c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <MX_TIM1_Init+0xac>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <MX_TIM1_Init+0xac>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <MX_TIM1_Init+0xac>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022b0:	2303      	movs	r3, #3
 80022b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022b4:	2300      	movs	r3, #0
 80022b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022b8:	2301      	movs	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022bc:	2300      	movs	r3, #0
 80022be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	4619      	mov	r1, r3
 80022da:	480e      	ldr	r0, [pc, #56]	; (8002314 <MX_TIM1_Init+0xac>)
 80022dc:	f003 fb62 	bl	80059a4 <HAL_TIM_Encoder_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80022e6:	f000 f9e3 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ea:	2300      	movs	r3, #0
 80022ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80022f6:	463b      	mov	r3, r7
 80022f8:	4619      	mov	r1, r3
 80022fa:	4806      	ldr	r0, [pc, #24]	; (8002314 <MX_TIM1_Init+0xac>)
 80022fc:	f004 fa22 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8002306:	f000 f9d3 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800230a:	bf00      	nop
 800230c:	3730      	adds	r7, #48	; 0x30
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200002c0 	.word	0x200002c0
 8002318:	40010000 	.word	0x40010000

0800231c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08e      	sub	sp, #56	; 0x38
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233c:	463b      	mov	r3, r7
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
 8002346:	60da      	str	r2, [r3, #12]
 8002348:	611a      	str	r2, [r3, #16]
 800234a:	615a      	str	r2, [r3, #20]
 800234c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800234e:	4b2e      	ldr	r3, [pc, #184]	; (8002408 <MX_TIM3_Init+0xec>)
 8002350:	4a2e      	ldr	r2, [pc, #184]	; (800240c <MX_TIM3_Init+0xf0>)
 8002352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6000;
 8002354:	4b2c      	ldr	r3, [pc, #176]	; (8002408 <MX_TIM3_Init+0xec>)
 8002356:	f241 7270 	movw	r2, #6000	; 0x1770
 800235a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235c:	4b2a      	ldr	r3, [pc, #168]	; (8002408 <MX_TIM3_Init+0xec>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002362:	4b29      	ldr	r3, [pc, #164]	; (8002408 <MX_TIM3_Init+0xec>)
 8002364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002368:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800236a:	4b27      	ldr	r3, [pc, #156]	; (8002408 <MX_TIM3_Init+0xec>)
 800236c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002370:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002372:	4b25      	ldr	r3, [pc, #148]	; (8002408 <MX_TIM3_Init+0xec>)
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002378:	4823      	ldr	r0, [pc, #140]	; (8002408 <MX_TIM3_Init+0xec>)
 800237a:	f003 f961 	bl	8005640 <HAL_TIM_Base_Init>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8002384:	f000 f994 	bl	80026b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002388:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800238e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002392:	4619      	mov	r1, r3
 8002394:	481c      	ldr	r0, [pc, #112]	; (8002408 <MX_TIM3_Init+0xec>)
 8002396:	f003 fd4d 	bl	8005e34 <HAL_TIM_ConfigClockSource>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80023a0:	f000 f986 	bl	80026b0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80023a4:	4818      	ldr	r0, [pc, #96]	; (8002408 <MX_TIM3_Init+0xec>)
 80023a6:	f003 f9a2 	bl	80056ee <HAL_TIM_PWM_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80023b0:	f000 f97e 	bl	80026b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023bc:	f107 031c 	add.w	r3, r7, #28
 80023c0:	4619      	mov	r1, r3
 80023c2:	4811      	ldr	r0, [pc, #68]	; (8002408 <MX_TIM3_Init+0xec>)
 80023c4:	f004 f9be 	bl	8006744 <HAL_TIMEx_MasterConfigSynchronization>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 80023ce:	f000 f96f 	bl	80026b0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023d2:	2360      	movs	r3, #96	; 0x60
 80023d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023da:	2300      	movs	r3, #0
 80023dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023e2:	463b      	mov	r3, r7
 80023e4:	2200      	movs	r2, #0
 80023e6:	4619      	mov	r1, r3
 80023e8:	4807      	ldr	r0, [pc, #28]	; (8002408 <MX_TIM3_Init+0xec>)
 80023ea:	f003 fc0f 	bl	8005c0c <HAL_TIM_PWM_ConfigChannel>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM3_Init+0xdc>
  {
    Error_Handler();
 80023f4:	f000 f95c 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023f8:	4803      	ldr	r0, [pc, #12]	; (8002408 <MX_TIM3_Init+0xec>)
 80023fa:	f000 fa8f 	bl	800291c <HAL_TIM_MspPostInit>

}
 80023fe:	bf00      	nop
 8002400:	3738      	adds	r7, #56	; 0x38
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	2000030c 	.word	0x2000030c
 800240c:	40000400 	.word	0x40000400

08002410 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002414:	4b14      	ldr	r3, [pc, #80]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <MX_USART3_UART_Init+0x5c>)
 8002418:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800241a:	4b13      	ldr	r3, [pc, #76]	; (8002468 <MX_USART3_UART_Init+0x58>)
 800241c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002420:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <MX_USART3_UART_Init+0x58>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002436:	220c      	movs	r2, #12
 8002438:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800243a:	4b0b      	ldr	r3, [pc, #44]	; (8002468 <MX_USART3_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002440:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002446:	4b08      	ldr	r3, [pc, #32]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <MX_USART3_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002452:	4805      	ldr	r0, [pc, #20]	; (8002468 <MX_USART3_UART_Init+0x58>)
 8002454:	f004 fa04 	bl	8006860 <HAL_UART_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800245e:	f000 f927 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000358 	.word	0x20000358
 800246c:	40004800 	.word	0x40004800

08002470 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002476:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800247a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800247e:	2206      	movs	r2, #6
 8002480:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002484:	2202      	movs	r2, #2
 8002486:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800248a:	2200      	movs	r2, #0
 800248c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002490:	2202      	movs	r2, #2
 8002492:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002496:	2201      	movs	r2, #1
 8002498:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024a8:	2201      	movs	r2, #1
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80024b4:	f001 feb1 	bl	800421a <HAL_PCD_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80024be:	f000 f8f7 	bl	80026b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200003e0 	.word	0x200003e0

080024cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08c      	sub	sp, #48	; 0x30
 80024d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d2:	f107 031c 	add.w	r3, r7, #28
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	605a      	str	r2, [r3, #4]
 80024dc:	609a      	str	r2, [r3, #8]
 80024de:	60da      	str	r2, [r3, #12]
 80024e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b6e      	ldr	r3, [pc, #440]	; (800269c <MX_GPIO_Init+0x1d0>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a6d      	ldr	r2, [pc, #436]	; (800269c <MX_GPIO_Init+0x1d0>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b6b      	ldr	r3, [pc, #428]	; (800269c <MX_GPIO_Init+0x1d0>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	61bb      	str	r3, [r7, #24]
 80024f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024fa:	4b68      	ldr	r3, [pc, #416]	; (800269c <MX_GPIO_Init+0x1d0>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a67      	ldr	r2, [pc, #412]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b65      	ldr	r3, [pc, #404]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800250e:	617b      	str	r3, [r7, #20]
 8002510:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002512:	4b62      	ldr	r3, [pc, #392]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a61      	ldr	r2, [pc, #388]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b5f      	ldr	r3, [pc, #380]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252a:	4b5c      	ldr	r3, [pc, #368]	; (800269c <MX_GPIO_Init+0x1d0>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a5b      	ldr	r2, [pc, #364]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002530:	f043 0302 	orr.w	r3, r3, #2
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b59      	ldr	r3, [pc, #356]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	60fb      	str	r3, [r7, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002542:	4b56      	ldr	r3, [pc, #344]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a55      	ldr	r2, [pc, #340]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002548:	f043 0310 	orr.w	r3, r3, #16
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b53      	ldr	r3, [pc, #332]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <MX_GPIO_Init+0x1d0>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255e:	4a4f      	ldr	r2, [pc, #316]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6313      	str	r3, [r2, #48]	; 0x30
 8002566:	4b4d      	ldr	r3, [pc, #308]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002572:	4b4a      	ldr	r3, [pc, #296]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a49      	ldr	r2, [pc, #292]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b47      	ldr	r3, [pc, #284]	; (800269c <MX_GPIO_Init+0x1d0>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800258a:	2200      	movs	r2, #0
 800258c:	f244 0181 	movw	r1, #16513	; 0x4081
 8002590:	4843      	ldr	r0, [pc, #268]	; (80026a0 <MX_GPIO_Init+0x1d4>)
 8002592:	f000 ff2b 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002596:	2200      	movs	r2, #0
 8002598:	2140      	movs	r1, #64	; 0x40
 800259a:	4842      	ldr	r0, [pc, #264]	; (80026a4 <MX_GPIO_Init+0x1d8>)
 800259c:	f000 ff26 	bl	80033ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80025b0:	f107 031c 	add.w	r3, r7, #28
 80025b4:	4619      	mov	r1, r3
 80025b6:	483c      	ldr	r0, [pc, #240]	; (80026a8 <MX_GPIO_Init+0x1dc>)
 80025b8:	f000 fd54 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80025bc:	2332      	movs	r3, #50	; 0x32
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c8:	2303      	movs	r3, #3
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025cc:	230b      	movs	r3, #11
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4834      	ldr	r0, [pc, #208]	; (80026a8 <MX_GPIO_Init+0x1dc>)
 80025d8:	f000 fd44 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80025dc:	2386      	movs	r3, #134	; 0x86
 80025de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e0:	2302      	movs	r3, #2
 80025e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025e8:	2303      	movs	r3, #3
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80025ec:	230b      	movs	r3, #11
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025f0:	f107 031c 	add.w	r3, r7, #28
 80025f4:	4619      	mov	r1, r3
 80025f6:	482d      	ldr	r0, [pc, #180]	; (80026ac <MX_GPIO_Init+0x1e0>)
 80025f8:	f000 fd34 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80025fc:	f244 0381 	movw	r3, #16513	; 0x4081
 8002600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002602:	2301      	movs	r3, #1
 8002604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260e:	f107 031c 	add.w	r3, r7, #28
 8002612:	4619      	mov	r1, r3
 8002614:	4822      	ldr	r0, [pc, #136]	; (80026a0 <MX_GPIO_Init+0x1d4>)
 8002616:	f000 fd25 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800261a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800261e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002620:	2302      	movs	r3, #2
 8002622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800262c:	230b      	movs	r3, #11
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 031c 	add.w	r3, r7, #28
 8002634:	4619      	mov	r1, r3
 8002636:	481a      	ldr	r0, [pc, #104]	; (80026a0 <MX_GPIO_Init+0x1d4>)
 8002638:	f000 fd14 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800263c:	2340      	movs	r3, #64	; 0x40
 800263e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002640:	2301      	movs	r3, #1
 8002642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002648:	2300      	movs	r3, #0
 800264a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800264c:	f107 031c 	add.w	r3, r7, #28
 8002650:	4619      	mov	r1, r3
 8002652:	4814      	ldr	r0, [pc, #80]	; (80026a4 <MX_GPIO_Init+0x1d8>)
 8002654:	f000 fd06 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	4619      	mov	r1, r3
 800266a:	480e      	ldr	r0, [pc, #56]	; (80026a4 <MX_GPIO_Init+0x1d8>)
 800266c:	f000 fcfa 	bl	8003064 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002670:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002676:	2302      	movs	r3, #2
 8002678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267a:	2300      	movs	r3, #0
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002682:	230b      	movs	r3, #11
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002686:	f107 031c 	add.w	r3, r7, #28
 800268a:	4619      	mov	r1, r3
 800268c:	4805      	ldr	r0, [pc, #20]	; (80026a4 <MX_GPIO_Init+0x1d8>)
 800268e:	f000 fce9 	bl	8003064 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002692:	bf00      	nop
 8002694:	3730      	adds	r7, #48	; 0x30
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800
 80026a0:	40020400 	.word	0x40020400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40020800 	.word	0x40020800
 80026ac:	40020000 	.word	0x40020000

080026b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026b4:	b672      	cpsid	i
}
 80026b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026b8:	e7fe      	b.n	80026b8 <Error_Handler+0x8>
	...

080026bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80026c2:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <HAL_MspInit+0x44>)
 80026c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c6:	4a0e      	ldr	r2, [pc, #56]	; (8002700 <HAL_MspInit+0x44>)
 80026c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026cc:	6413      	str	r3, [r2, #64]	; 0x40
 80026ce:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_MspInit+0x44>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_MspInit+0x44>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_MspInit+0x44>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	; 0x44
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_MspInit+0x44>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ee:	603b      	str	r3, [r7, #0]
 80026f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b0ac      	sub	sp, #176	; 0xb0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 0318 	add.w	r3, r7, #24
 8002720:	2284      	movs	r2, #132	; 0x84
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f006 fcd2 	bl	80090ce <memset>
  if(hi2c->Instance==I2C1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a44      	ldr	r2, [pc, #272]	; (8002840 <HAL_I2C_MspInit+0x13c>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d13d      	bne.n	80027b0 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002734:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002738:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800273a:	2300      	movs	r3, #0
 800273c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fb8c 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800274e:	f7ff ffaf 	bl	80026b0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002752:	4b3c      	ldr	r3, [pc, #240]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a3b      	ldr	r2, [pc, #236]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b39      	ldr	r3, [pc, #228]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800276a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800276e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002772:	2312      	movs	r3, #18
 8002774:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002778:	2300      	movs	r3, #0
 800277a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277e:	2303      	movs	r3, #3
 8002780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002784:	2304      	movs	r3, #4
 8002786:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800278e:	4619      	mov	r1, r3
 8002790:	482d      	ldr	r0, [pc, #180]	; (8002848 <HAL_I2C_MspInit+0x144>)
 8002792:	f000 fc67 	bl	8003064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <HAL_I2C_MspInit+0x140>)
 800279c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a0:	6413      	str	r3, [r2, #64]	; 0x40
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_I2C_MspInit+0x140>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80027ae:	e042      	b.n	8002836 <HAL_I2C_MspInit+0x132>
  else if(hi2c->Instance==I2C4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a25      	ldr	r2, [pc, #148]	; (800284c <HAL_I2C_MspInit+0x148>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d13d      	bne.n	8002836 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80027ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027be:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80027c0:	2300      	movs	r3, #0
 80027c2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 fb48 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80027d6:	f7ff ff6b 	bl	80026b0 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	4b1a      	ldr	r3, [pc, #104]	; (8002844 <HAL_I2C_MspInit+0x140>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_I2C_MspInit+0x140>)
 80027e0:	f043 0308 	orr.w	r3, r3, #8
 80027e4:	6313      	str	r3, [r2, #48]	; 0x30
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_I2C_MspInit+0x140>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	60fb      	str	r3, [r7, #12]
 80027f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027f2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80027f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fa:	2312      	movs	r3, #18
 80027fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002806:	2303      	movs	r3, #3
 8002808:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800280c:	2304      	movs	r3, #4
 800280e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002812:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002816:	4619      	mov	r1, r3
 8002818:	480d      	ldr	r0, [pc, #52]	; (8002850 <HAL_I2C_MspInit+0x14c>)
 800281a:	f000 fc23 	bl	8003064 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800281e:	4b09      	ldr	r3, [pc, #36]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	4a08      	ldr	r2, [pc, #32]	; (8002844 <HAL_I2C_MspInit+0x140>)
 8002824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002828:	6413      	str	r3, [r2, #64]	; 0x40
 800282a:	4b06      	ldr	r3, [pc, #24]	; (8002844 <HAL_I2C_MspInit+0x140>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002832:	60bb      	str	r3, [r7, #8]
 8002834:	68bb      	ldr	r3, [r7, #8]
}
 8002836:	bf00      	nop
 8002838:	37b0      	adds	r7, #176	; 0xb0
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40005400 	.word	0x40005400
 8002844:	40023800 	.word	0x40023800
 8002848:	40020400 	.word	0x40020400
 800284c:	40006000 	.word	0x40006000
 8002850:	40020c00 	.word	0x40020c00

08002854 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a17      	ldr	r2, [pc, #92]	; (80028d0 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d128      	bne.n	80028c8 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002876:	4b17      	ldr	r3, [pc, #92]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287a:	4a16      	ldr	r2, [pc, #88]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	6453      	str	r3, [r2, #68]	; 0x44
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	613b      	str	r3, [r7, #16]
 800288c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800288e:	4b11      	ldr	r3, [pc, #68]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 8002894:	f043 0310 	orr.w	r3, r3, #16
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_TIM_Encoder_MspInit+0x80>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0310 	and.w	r3, r3, #16
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80028a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b4:	2300      	movs	r3, #0
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028b8:	2301      	movs	r3, #1
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	4805      	ldr	r0, [pc, #20]	; (80028d8 <HAL_TIM_Encoder_MspInit+0x84>)
 80028c4:	f000 fbce 	bl	8003064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80028c8:	bf00      	nop
 80028ca:	3728      	adds	r7, #40	; 0x28
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40010000 	.word	0x40010000
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40021000 	.word	0x40021000

080028dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_TIM_Base_MspInit+0x38>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10b      	bne.n	8002906 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028ee:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40
 80028fa:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_TIM_Base_MspInit+0x3c>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002906:	bf00      	nop
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40000400 	.word	0x40000400
 8002918:	40023800 	.word	0x40023800

0800291c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b088      	sub	sp, #32
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002924:	f107 030c 	add.w	r3, r7, #12
 8002928:	2200      	movs	r2, #0
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	605a      	str	r2, [r3, #4]
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a11      	ldr	r2, [pc, #68]	; (8002980 <HAL_TIM_MspPostInit+0x64>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d11b      	bne.n	8002976 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6313      	str	r3, [r2, #48]	; 0x30
 800294a:	4b0e      	ldr	r3, [pc, #56]	; (8002984 <HAL_TIM_MspPostInit+0x68>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002966:	2302      	movs	r3, #2
 8002968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	4619      	mov	r1, r3
 8002970:	4805      	ldr	r0, [pc, #20]	; (8002988 <HAL_TIM_MspPostInit+0x6c>)
 8002972:	f000 fb77 	bl	8003064 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002976:	bf00      	nop
 8002978:	3720      	adds	r7, #32
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40000400 	.word	0x40000400
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000

0800298c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b0aa      	sub	sp, #168	; 0xa8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002994:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	2284      	movs	r2, #132	; 0x84
 80029aa:	2100      	movs	r1, #0
 80029ac:	4618      	mov	r0, r3
 80029ae:	f006 fb8e 	bl	80090ce <memset>
  if(huart->Instance==USART3)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <HAL_UART_MspInit+0xb4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d13c      	bne.n	8002a36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029c0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029c2:	2300      	movs	r3, #0
 80029c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c6:	f107 0310 	add.w	r3, r7, #16
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fa48 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80029d6:	f7ff fe6b 	bl	80026b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	4a19      	ldr	r2, [pc, #100]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029e4:	6413      	str	r3, [r2, #64]	; 0x40
 80029e6:	4b17      	ldr	r3, [pc, #92]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029f2:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	4a13      	ldr	r2, [pc, #76]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6313      	str	r3, [r2, #48]	; 0x30
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_UART_MspInit+0xb8>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002a0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a12:	2302      	movs	r3, #2
 8002a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a24:	2307      	movs	r3, #7
 8002a26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a2a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <HAL_UART_MspInit+0xbc>)
 8002a32:	f000 fb17 	bl	8003064 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a36:	bf00      	nop
 8002a38:	37a8      	adds	r7, #168	; 0xa8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40004800 	.word	0x40004800
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40020c00 	.word	0x40020c00

08002a4c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0ac      	sub	sp, #176	; 0xb0
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	2284      	movs	r2, #132	; 0x84
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f006 fb2e 	bl	80090ce <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a7a:	d159      	bne.n	8002b30 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002a7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a80:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a88:	f107 0318 	add.w	r3, r7, #24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f002 f9e7 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002a98:	f7ff fe0a 	bl	80026b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	4a25      	ldr	r2, [pc, #148]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa8:	4b23      	ldr	r3, [pc, #140]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002ab4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002ab8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002ace:	230a      	movs	r3, #10
 8002ad0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ad4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4818      	ldr	r0, [pc, #96]	; (8002b3c <HAL_PCD_MspInit+0xf0>)
 8002adc:	f000 fac2 	bl	8003064 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ae0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002af4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002af8:	4619      	mov	r1, r3
 8002afa:	4810      	ldr	r0, [pc, #64]	; (8002b3c <HAL_PCD_MspInit+0xf0>)
 8002afc:	f000 fab2 	bl	8003064 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b04:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b0a:	6353      	str	r3, [r2, #52]	; 0x34
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	4a06      	ldr	r2, [pc, #24]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b22:	6453      	str	r3, [r2, #68]	; 0x44
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <HAL_PCD_MspInit+0xec>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002b30:	bf00      	nop
 8002b32:	37b0      	adds	r7, #176	; 0xb0
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020000 	.word	0x40020000

08002b40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <NMI_Handler+0x4>

08002b46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b4a:	e7fe      	b.n	8002b4a <HardFault_Handler+0x4>

08002b4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <MemManage_Handler+0x4>

08002b52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b56:	e7fe      	b.n	8002b56 <BusFault_Handler+0x4>

08002b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <UsageFault_Handler+0x4>

08002b5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b62:	bf00      	nop
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b70:	bf00      	nop
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8c:	f000 f940 	bl	8002e10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b90:	bf00      	nop
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return 1;
 8002b98:	2301      	movs	r3, #1
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_kill>:

int _kill(int pid, int sig)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bae:	f006 faf3 	bl	8009198 <__errno>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2216      	movs	r2, #22
 8002bb6:	601a      	str	r2, [r3, #0]
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_exit>:

void _exit (int status)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ffe7 	bl	8002ba4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002bd6:	e7fe      	b.n	8002bd6 <_exit+0x12>

08002bd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be4:	2300      	movs	r3, #0
 8002be6:	617b      	str	r3, [r7, #20]
 8002be8:	e00a      	b.n	8002c00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bea:	f3af 8000 	nop.w
 8002bee:	4601      	mov	r1, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	60ba      	str	r2, [r7, #8]
 8002bf6:	b2ca      	uxtb	r2, r1
 8002bf8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	dbf0      	blt.n	8002bea <_read+0x12>
  }

  return len;
 8002c08:	687b      	ldr	r3, [r7, #4]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3718      	adds	r7, #24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c12:	b580      	push	{r7, lr}
 8002c14:	b086      	sub	sp, #24
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	60f8      	str	r0, [r7, #12]
 8002c1a:	60b9      	str	r1, [r7, #8]
 8002c1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1e:	2300      	movs	r3, #0
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e009      	b.n	8002c38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	60ba      	str	r2, [r7, #8]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	3301      	adds	r3, #1
 8002c36:	617b      	str	r3, [r7, #20]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	dbf1      	blt.n	8002c24 <_write+0x12>
  }
  return len;
 8002c40:	687b      	ldr	r3, [r7, #4]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <_close>:

int _close(int file)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b083      	sub	sp, #12
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c72:	605a      	str	r2, [r3, #4]
  return 0;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr

08002c82 <_isatty>:

int _isatty(int file)
{
 8002c82:	b480      	push	{r7}
 8002c84:	b083      	sub	sp, #12
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c8a:	2301      	movs	r3, #1
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cbc:	4a14      	ldr	r2, [pc, #80]	; (8002d10 <_sbrk+0x5c>)
 8002cbe:	4b15      	ldr	r3, [pc, #84]	; (8002d14 <_sbrk+0x60>)
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cd0:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <_sbrk+0x64>)
 8002cd2:	4a12      	ldr	r2, [pc, #72]	; (8002d1c <_sbrk+0x68>)
 8002cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <_sbrk+0x64>)
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d207      	bcs.n	8002cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce4:	f006 fa58 	bl	8009198 <__errno>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	220c      	movs	r2, #12
 8002cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	e009      	b.n	8002d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cfa:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	4a05      	ldr	r2, [pc, #20]	; (8002d18 <_sbrk+0x64>)
 8002d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d06:	68fb      	ldr	r3, [r7, #12]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20050000 	.word	0x20050000
 8002d14:	00000400 	.word	0x00000400
 8002d18:	2000094c 	.word	0x2000094c
 8002d1c:	20000aa0 	.word	0x20000aa0

08002d20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <SystemInit+0x20>)
 8002d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2a:	4a05      	ldr	r2, [pc, #20]	; (8002d40 <SystemInit+0x20>)
 8002d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d34:	bf00      	nop
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d48:	480d      	ldr	r0, [pc, #52]	; (8002d80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d4a:	490e      	ldr	r1, [pc, #56]	; (8002d84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d4c:	4a0e      	ldr	r2, [pc, #56]	; (8002d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0b      	ldr	r2, [pc, #44]	; (8002d8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d60:	4c0b      	ldr	r4, [pc, #44]	; (8002d90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d6e:	f7ff ffd7 	bl	8002d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f006 fa17 	bl	80091a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe ff63 	bl	8001c40 <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002d7c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002d88:	0800c134 	.word	0x0800c134
  ldr r2, =_sbss
 8002d8c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002d90:	20000aa0 	.word	0x20000aa0

08002d94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <ADC_IRQHandler>

08002d96 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9a:	2003      	movs	r0, #3
 8002d9c:	f000 f92e 	bl	8002ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 f805 	bl	8002db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da6:	f7ff fc89 	bl	80026bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_InitTick+0x54>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_InitTick+0x58>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f000 f93b 	bl	800304a <HAL_SYSTICK_Config>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00e      	b.n	8002dfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b0f      	cmp	r3, #15
 8002de2:	d80a      	bhi.n	8002dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de4:	2200      	movs	r2, #0
 8002de6:	6879      	ldr	r1, [r7, #4]
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f000 f911 	bl	8003012 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df0:	4a06      	ldr	r2, [pc, #24]	; (8002e0c <HAL_InitTick+0x5c>)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	e000      	b.n	8002dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000004 	.word	0x20000004
 8002e08:	2000000c 	.word	0x2000000c
 8002e0c:	20000008 	.word	0x20000008

08002e10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_IncTick+0x20>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <HAL_IncTick+0x24>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4413      	add	r3, r2
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <HAL_IncTick+0x24>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000000c 	.word	0x2000000c
 8002e34:	20000950 	.word	0x20000950

08002e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_GetTick+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000950 	.word	0x20000950

08002e50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e58:	f7ff ffee 	bl	8002e38 <HAL_GetTick>
 8002e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e68:	d005      	beq.n	8002e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e6a:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <HAL_Delay+0x44>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e76:	bf00      	nop
 8002e78:	f7ff ffde 	bl	8002e38 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d8f7      	bhi.n	8002e78 <HAL_Delay+0x28>
  {
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3710      	adds	r7, #16
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f003 0307 	and.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ec0:	4b06      	ldr	r3, [pc, #24]	; (8002edc <__NVIC_SetPriorityGrouping+0x44>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ec6:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <__NVIC_SetPriorityGrouping+0x40>)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	60d3      	str	r3, [r2, #12]
}
 8002ecc:	bf00      	nop
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	e000ed00 	.word	0xe000ed00
 8002edc:	05fa0000 	.word	0x05fa0000

08002ee0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	f003 0307 	and.w	r3, r3, #7
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	e000ed00 	.word	0xe000ed00

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	db0a      	blt.n	8002f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	b2da      	uxtb	r2, r3
 8002f14:	490c      	ldr	r1, [pc, #48]	; (8002f48 <__NVIC_SetPriority+0x4c>)
 8002f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1a:	0112      	lsls	r2, r2, #4
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f24:	e00a      	b.n	8002f3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	4908      	ldr	r1, [pc, #32]	; (8002f4c <__NVIC_SetPriority+0x50>)
 8002f2c:	79fb      	ldrb	r3, [r7, #7]
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	3b04      	subs	r3, #4
 8002f34:	0112      	lsls	r2, r2, #4
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	440b      	add	r3, r1
 8002f3a:	761a      	strb	r2, [r3, #24]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	e000e100 	.word	0xe000e100
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f1c3 0307 	rsb	r3, r3, #7
 8002f6a:	2b04      	cmp	r3, #4
 8002f6c:	bf28      	it	cs
 8002f6e:	2304      	movcs	r3, #4
 8002f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	3304      	adds	r3, #4
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d902      	bls.n	8002f80 <NVIC_EncodePriority+0x30>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3b03      	subs	r3, #3
 8002f7e:	e000      	b.n	8002f82 <NVIC_EncodePriority+0x32>
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	f04f 32ff 	mov.w	r2, #4294967295
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	401a      	ands	r2, r3
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f98:	f04f 31ff 	mov.w	r1, #4294967295
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa2:	43d9      	mvns	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa8:	4313      	orrs	r3, r2
         );
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3724      	adds	r7, #36	; 0x24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
	...

08002fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc8:	d301      	bcc.n	8002fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e00f      	b.n	8002fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fce:	4a0a      	ldr	r2, [pc, #40]	; (8002ff8 <SysTick_Config+0x40>)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3b01      	subs	r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002fdc:	f7ff ff8e 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <SysTick_Config+0x40>)
 8002fe8:	2207      	movs	r2, #7
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3708      	adds	r7, #8
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7ff ff47 	bl	8002e98 <__NVIC_SetPriorityGrouping>
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af00      	add	r7, sp, #0
 8003018:	4603      	mov	r3, r0
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
 800301e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003020:	2300      	movs	r3, #0
 8003022:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003024:	f7ff ff5c 	bl	8002ee0 <__NVIC_GetPriorityGrouping>
 8003028:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	6978      	ldr	r0, [r7, #20]
 8003030:	f7ff ff8e 	bl	8002f50 <NVIC_EncodePriority>
 8003034:	4602      	mov	r2, r0
 8003036:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff ff5d 	bl	8002efc <__NVIC_SetPriority>
}
 8003042:	bf00      	nop
 8003044:	3718      	adds	r7, #24
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff ffb0 	bl	8002fb8 <SysTick_Config>
 8003058:	4603      	mov	r3, r0
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	; 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003072:	2300      	movs	r3, #0
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800307a:	2300      	movs	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e175      	b.n	8003370 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003084:	2201      	movs	r2, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	429a      	cmp	r2, r3
 800309e:	f040 8164 	bne.w	800336a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d005      	beq.n	80030ba <HAL_GPIO_Init+0x56>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d130      	bne.n	800311c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	2203      	movs	r2, #3
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43db      	mvns	r3, r3
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	4013      	ands	r3, r2
 80030d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68da      	ldr	r2, [r3, #12]
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fa02 f303 	lsl.w	r3, r2, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030f0:	2201      	movs	r2, #1
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	4013      	ands	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	091b      	lsrs	r3, r3, #4
 8003106:	f003 0201 	and.w	r2, r3, #1
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b03      	cmp	r3, #3
 8003126:	d017      	beq.n	8003158 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0303 	and.w	r3, r3, #3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d123      	bne.n	80031ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	220f      	movs	r2, #15
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	691a      	ldr	r2, [r3, #16]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	69b9      	ldr	r1, [r7, #24]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 80be 	beq.w	800336a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ee:	4b66      	ldr	r3, [pc, #408]	; (8003388 <HAL_GPIO_Init+0x324>)
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	4a65      	ldr	r2, [pc, #404]	; (8003388 <HAL_GPIO_Init+0x324>)
 80031f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031f8:	6453      	str	r3, [r2, #68]	; 0x44
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_GPIO_Init+0x324>)
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003206:	4a61      	ldr	r2, [pc, #388]	; (800338c <HAL_GPIO_Init+0x328>)
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	089b      	lsrs	r3, r3, #2
 800320c:	3302      	adds	r3, #2
 800320e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003212:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	220f      	movs	r2, #15
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	4013      	ands	r3, r2
 8003228:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a58      	ldr	r2, [pc, #352]	; (8003390 <HAL_GPIO_Init+0x32c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d037      	beq.n	80032a2 <HAL_GPIO_Init+0x23e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a57      	ldr	r2, [pc, #348]	; (8003394 <HAL_GPIO_Init+0x330>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d031      	beq.n	800329e <HAL_GPIO_Init+0x23a>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a56      	ldr	r2, [pc, #344]	; (8003398 <HAL_GPIO_Init+0x334>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d02b      	beq.n	800329a <HAL_GPIO_Init+0x236>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a55      	ldr	r2, [pc, #340]	; (800339c <HAL_GPIO_Init+0x338>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d025      	beq.n	8003296 <HAL_GPIO_Init+0x232>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a54      	ldr	r2, [pc, #336]	; (80033a0 <HAL_GPIO_Init+0x33c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d01f      	beq.n	8003292 <HAL_GPIO_Init+0x22e>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a53      	ldr	r2, [pc, #332]	; (80033a4 <HAL_GPIO_Init+0x340>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d019      	beq.n	800328e <HAL_GPIO_Init+0x22a>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a52      	ldr	r2, [pc, #328]	; (80033a8 <HAL_GPIO_Init+0x344>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d013      	beq.n	800328a <HAL_GPIO_Init+0x226>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a51      	ldr	r2, [pc, #324]	; (80033ac <HAL_GPIO_Init+0x348>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00d      	beq.n	8003286 <HAL_GPIO_Init+0x222>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a50      	ldr	r2, [pc, #320]	; (80033b0 <HAL_GPIO_Init+0x34c>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x21e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4f      	ldr	r2, [pc, #316]	; (80033b4 <HAL_GPIO_Init+0x350>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_GPIO_Init+0x21a>
 800327a:	2309      	movs	r3, #9
 800327c:	e012      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 800327e:	230a      	movs	r3, #10
 8003280:	e010      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 8003282:	2308      	movs	r3, #8
 8003284:	e00e      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 8003286:	2307      	movs	r3, #7
 8003288:	e00c      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 800328a:	2306      	movs	r3, #6
 800328c:	e00a      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 800328e:	2305      	movs	r3, #5
 8003290:	e008      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 8003292:	2304      	movs	r3, #4
 8003294:	e006      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 8003296:	2303      	movs	r3, #3
 8003298:	e004      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 800329a:	2302      	movs	r3, #2
 800329c:	e002      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_GPIO_Init+0x240>
 80032a2:	2300      	movs	r3, #0
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	f002 0203 	and.w	r2, r2, #3
 80032aa:	0092      	lsls	r2, r2, #2
 80032ac:	4093      	lsls	r3, r2
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032b4:	4935      	ldr	r1, [pc, #212]	; (800338c <HAL_GPIO_Init+0x328>)
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	089b      	lsrs	r3, r3, #2
 80032ba:	3302      	adds	r3, #2
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032c2:	4b3d      	ldr	r3, [pc, #244]	; (80033b8 <HAL_GPIO_Init+0x354>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	43db      	mvns	r3, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4013      	ands	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032e6:	4a34      	ldr	r2, [pc, #208]	; (80033b8 <HAL_GPIO_Init+0x354>)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032ec:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_GPIO_Init+0x354>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003310:	4a29      	ldr	r2, [pc, #164]	; (80033b8 <HAL_GPIO_Init+0x354>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003316:	4b28      	ldr	r3, [pc, #160]	; (80033b8 <HAL_GPIO_Init+0x354>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	43db      	mvns	r3, r3
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	4013      	ands	r3, r2
 8003324:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4313      	orrs	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <HAL_GPIO_Init+0x354>)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003340:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_GPIO_Init+0x354>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	43db      	mvns	r3, r3
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	4013      	ands	r3, r2
 800334e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003364:	4a14      	ldr	r2, [pc, #80]	; (80033b8 <HAL_GPIO_Init+0x354>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	3301      	adds	r3, #1
 800336e:	61fb      	str	r3, [r7, #28]
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b0f      	cmp	r3, #15
 8003374:	f67f ae86 	bls.w	8003084 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	3724      	adds	r7, #36	; 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
 800338c:	40013800 	.word	0x40013800
 8003390:	40020000 	.word	0x40020000
 8003394:	40020400 	.word	0x40020400
 8003398:	40020800 	.word	0x40020800
 800339c:	40020c00 	.word	0x40020c00
 80033a0:	40021000 	.word	0x40021000
 80033a4:	40021400 	.word	0x40021400
 80033a8:	40021800 	.word	0x40021800
 80033ac:	40021c00 	.word	0x40021c00
 80033b0:	40022000 	.word	0x40022000
 80033b4:	40022400 	.word	0x40022400
 80033b8:	40013c00 	.word	0x40013c00

080033bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	887b      	ldrh	r3, [r7, #2]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d002      	beq.n	80033da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80033d4:	2301      	movs	r3, #1
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e001      	b.n	80033de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80033de:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
 80033f8:	4613      	mov	r3, r2
 80033fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033fc:	787b      	ldrb	r3, [r7, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003402:	887a      	ldrh	r2, [r7, #2]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003408:	e003      	b.n	8003412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	041a      	lsls	r2, r3, #16
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	619a      	str	r2, [r3, #24]
}
 8003412:	bf00      	nop
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800341e:	b480      	push	{r7}
 8003420:	b085      	sub	sp, #20
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	460b      	mov	r3, r1
 8003428:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003430:	887a      	ldrh	r2, [r7, #2]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4013      	ands	r3, r2
 8003436:	041a      	lsls	r2, r3, #16
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	43d9      	mvns	r1, r3
 800343c:	887b      	ldrh	r3, [r7, #2]
 800343e:	400b      	ands	r3, r1
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	619a      	str	r2, [r3, #24]
}
 8003446:	bf00      	nop
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e07f      	b.n	8003566 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d106      	bne.n	8003480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f7ff f942 	bl	8002704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2224      	movs	r2, #36	; 0x24
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0201 	bic.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d107      	bne.n	80034ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	e006      	b.n	80034dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d104      	bne.n	80034ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_I2C_Init+0x11c>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68da      	ldr	r2, [r3, #12]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800350c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691a      	ldr	r2, [r3, #16]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69d9      	ldr	r1, [r3, #28]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a1a      	ldr	r2, [r3, #32]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2220      	movs	r2, #32
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	02008000 	.word	0x02008000

08003574 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	607a      	str	r2, [r7, #4]
 800357e:	461a      	mov	r2, r3
 8003580:	460b      	mov	r3, r1
 8003582:	817b      	strh	r3, [r7, #10]
 8003584:	4613      	mov	r3, r2
 8003586:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b20      	cmp	r3, #32
 8003592:	f040 80da 	bne.w	800374a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x30>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0d3      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035ac:	f7ff fc44 	bl	8002e38 <HAL_GetTick>
 80035b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	9300      	str	r3, [sp, #0]
 80035b6:	2319      	movs	r3, #25
 80035b8:	2201      	movs	r2, #1
 80035ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fbc6 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e0be      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2221      	movs	r2, #33	; 0x21
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2210      	movs	r2, #16
 80035da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	893a      	ldrh	r2, [r7, #8]
 80035ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2bff      	cmp	r3, #255	; 0xff
 80035fe:	d90e      	bls.n	800361e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	22ff      	movs	r2, #255	; 0xff
 8003604:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360a:	b2da      	uxtb	r2, r3
 800360c:	8979      	ldrh	r1, [r7, #10]
 800360e:	4b51      	ldr	r3, [pc, #324]	; (8003754 <HAL_I2C_Master_Transmit+0x1e0>)
 8003610:	9300      	str	r3, [sp, #0]
 8003612:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fd36 	bl	8004088 <I2C_TransferConfig>
 800361c:	e06c      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	b2da      	uxtb	r2, r3
 800362e:	8979      	ldrh	r1, [r7, #10]
 8003630:	4b48      	ldr	r3, [pc, #288]	; (8003754 <HAL_I2C_Master_Transmit+0x1e0>)
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fd25 	bl	8004088 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800363e:	e05b      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 fbc3 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d001      	beq.n	8003654 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e07b      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	781a      	ldrb	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	1c5a      	adds	r2, r3, #1
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b29a      	uxth	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367c:	3b01      	subs	r3, #1
 800367e:	b29a      	uxth	r2, r3
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003688:	b29b      	uxth	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d034      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x184>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d130      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2200      	movs	r2, #0
 800369e:	2180      	movs	r1, #128	; 0x80
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fb55 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e04d      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	2bff      	cmp	r3, #255	; 0xff
 80036b8:	d90e      	bls.n	80036d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	22ff      	movs	r2, #255	; 0xff
 80036be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	8979      	ldrh	r1, [r7, #10]
 80036c8:	2300      	movs	r3, #0
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f000 fcd9 	bl	8004088 <I2C_TransferConfig>
 80036d6:	e00f      	b.n	80036f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	8979      	ldrh	r1, [r7, #10]
 80036ea:	2300      	movs	r3, #0
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 fcc8 	bl	8004088 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d19e      	bne.n	8003640 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	6a39      	ldr	r1, [r7, #32]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fba2 	bl	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e01a      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2220      	movs	r2, #32
 800371c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b0b      	ldr	r3, [pc, #44]	; (8003758 <HAL_I2C_Master_Transmit+0x1e4>)
 800372a:	400b      	ands	r3, r1
 800372c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800374a:	2302      	movs	r3, #2
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	80002000 	.word	0x80002000
 8003758:	fe00e800 	.word	0xfe00e800

0800375c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af02      	add	r7, sp, #8
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	4608      	mov	r0, r1
 8003766:	4611      	mov	r1, r2
 8003768:	461a      	mov	r2, r3
 800376a:	4603      	mov	r3, r0
 800376c:	817b      	strh	r3, [r7, #10]
 800376e:	460b      	mov	r3, r1
 8003770:	813b      	strh	r3, [r7, #8]
 8003772:	4613      	mov	r3, r2
 8003774:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b20      	cmp	r3, #32
 8003780:	f040 80f9 	bne.w	8003976 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003784:	6a3b      	ldr	r3, [r7, #32]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <HAL_I2C_Mem_Write+0x34>
 800378a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0ed      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Mem_Write+0x4e>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e0e6      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037b2:	f7ff fb41 	bl	8002e38 <HAL_GetTick>
 80037b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	2319      	movs	r3, #25
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fac3 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0d1      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2221      	movs	r2, #33	; 0x21
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2240      	movs	r2, #64	; 0x40
 80037e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6a3a      	ldr	r2, [r7, #32]
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037fc:	88f8      	ldrh	r0, [r7, #6]
 80037fe:	893a      	ldrh	r2, [r7, #8]
 8003800:	8979      	ldrh	r1, [r7, #10]
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	9301      	str	r3, [sp, #4]
 8003806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	4603      	mov	r3, r0
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9d3 	bl	8003bb8 <I2C_RequestMemoryWrite>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d005      	beq.n	8003824 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0a9      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29b      	uxth	r3, r3
 800382a:	2bff      	cmp	r3, #255	; 0xff
 800382c:	d90e      	bls.n	800384c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	22ff      	movs	r2, #255	; 0xff
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	b2da      	uxtb	r2, r3
 800383a:	8979      	ldrh	r1, [r7, #10]
 800383c:	2300      	movs	r3, #0
 800383e:	9300      	str	r3, [sp, #0]
 8003840:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fc1f 	bl	8004088 <I2C_TransferConfig>
 800384a:	e00f      	b.n	800386c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	b2da      	uxtb	r2, r3
 800385c:	8979      	ldrh	r1, [r7, #10]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 fc0e 	bl	8004088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 faad 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e07b      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	781a      	ldrb	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	1c5a      	adds	r2, r3, #1
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	3b01      	subs	r3, #1
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d034      	beq.n	8003924 <HAL_I2C_Mem_Write+0x1c8>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d130      	bne.n	8003924 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	9300      	str	r3, [sp, #0]
 80038c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038c8:	2200      	movs	r2, #0
 80038ca:	2180      	movs	r1, #128	; 0x80
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fa3f 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d001      	beq.n	80038dc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	e04d      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	2bff      	cmp	r3, #255	; 0xff
 80038e4:	d90e      	bls.n	8003904 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22ff      	movs	r2, #255	; 0xff
 80038ea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	8979      	ldrh	r1, [r7, #10]
 80038f4:	2300      	movs	r3, #0
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038fc:	68f8      	ldr	r0, [r7, #12]
 80038fe:	f000 fbc3 	bl	8004088 <I2C_TransferConfig>
 8003902:	e00f      	b.n	8003924 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003912:	b2da      	uxtb	r2, r3
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	2300      	movs	r3, #0
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fbb2 	bl	8004088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003928:	b29b      	uxth	r3, r3
 800392a:	2b00      	cmp	r3, #0
 800392c:	d19e      	bne.n	800386c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fa8c 	bl	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01a      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2220      	movs	r2, #32
 8003948:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_I2C_Mem_Write+0x224>)
 8003956:	400b      	ands	r3, r1
 8003958:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2220      	movs	r2, #32
 800395e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e000      	b.n	8003978 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003976:	2302      	movs	r3, #2
  }
}
 8003978:	4618      	mov	r0, r3
 800397a:	3718      	adds	r7, #24
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	fe00e800 	.word	0xfe00e800

08003984 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b088      	sub	sp, #32
 8003988:	af02      	add	r7, sp, #8
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4603      	mov	r3, r0
 8003994:	817b      	strh	r3, [r7, #10]
 8003996:	460b      	mov	r3, r1
 8003998:	813b      	strh	r3, [r7, #8]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	f040 80fd 	bne.w	8003ba6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x34>
 80039b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d105      	bne.n	80039c4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039be:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0f1      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d101      	bne.n	80039d2 <HAL_I2C_Mem_Read+0x4e>
 80039ce:	2302      	movs	r3, #2
 80039d0:	e0ea      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039da:	f7ff fa2d 	bl	8002e38 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	2319      	movs	r3, #25
 80039e6:	2201      	movs	r2, #1
 80039e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 f9af 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d001      	beq.n	80039fc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e0d5      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2222      	movs	r2, #34	; 0x22
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2240      	movs	r2, #64	; 0x40
 8003a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a24:	88f8      	ldrh	r0, [r7, #6]
 8003a26:	893a      	ldrh	r2, [r7, #8]
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4603      	mov	r3, r0
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 f913 	bl	8003c60 <I2C_RequestMemoryRead>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0ad      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2bff      	cmp	r3, #255	; 0xff
 8003a54:	d90e      	bls.n	8003a74 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	22ff      	movs	r2, #255	; 0xff
 8003a5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	8979      	ldrh	r1, [r7, #10]
 8003a64:	4b52      	ldr	r3, [pc, #328]	; (8003bb0 <HAL_I2C_Mem_Read+0x22c>)
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fb0b 	bl	8004088 <I2C_TransferConfig>
 8003a72:	e00f      	b.n	8003a94 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	8979      	ldrh	r1, [r7, #10]
 8003a86:	4b4a      	ldr	r3, [pc, #296]	; (8003bb0 <HAL_I2C_Mem_Read+0x22c>)
 8003a88:	9300      	str	r3, [sp, #0]
 8003a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a8e:	68f8      	ldr	r0, [r7, #12]
 8003a90:	f000 fafa 	bl	8004088 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	2104      	movs	r1, #4
 8003a9e:	68f8      	ldr	r0, [r7, #12]
 8003aa0:	f000 f956 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e07c      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d034      	beq.n	8003b54 <HAL_I2C_Mem_Read+0x1d0>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d130      	bne.n	8003b54 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	2200      	movs	r2, #0
 8003afa:	2180      	movs	r1, #128	; 0x80
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f927 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e04d      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	2bff      	cmp	r3, #255	; 0xff
 8003b14:	d90e      	bls.n	8003b34 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	22ff      	movs	r2, #255	; 0xff
 8003b1a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	8979      	ldrh	r1, [r7, #10]
 8003b24:	2300      	movs	r3, #0
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 faab 	bl	8004088 <I2C_TransferConfig>
 8003b32:	e00f      	b.n	8003b54 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	8979      	ldrh	r1, [r7, #10]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 fa9a 	bl	8004088 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d19a      	bne.n	8003a94 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f974 	bl	8003e50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e01a      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2220      	movs	r2, #32
 8003b78:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	4b0b      	ldr	r3, [pc, #44]	; (8003bb4 <HAL_I2C_Mem_Read+0x230>)
 8003b86:	400b      	ands	r3, r1
 8003b88:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	80002400 	.word	0x80002400
 8003bb4:	fe00e800 	.word	0xfe00e800

08003bb8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	4608      	mov	r0, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	817b      	strh	r3, [r7, #10]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	813b      	strh	r3, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bd2:	88fb      	ldrh	r3, [r7, #6]
 8003bd4:	b2da      	uxtb	r2, r3
 8003bd6:	8979      	ldrh	r1, [r7, #10]
 8003bd8:	4b20      	ldr	r3, [pc, #128]	; (8003c5c <I2C_RequestMemoryWrite+0xa4>)
 8003bda:	9300      	str	r3, [sp, #0]
 8003bdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fa51 	bl	8004088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	69b9      	ldr	r1, [r7, #24]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 f8f0 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e02c      	b.n	8003c54 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d105      	bne.n	8003c0c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c00:	893b      	ldrh	r3, [r7, #8]
 8003c02:	b2da      	uxtb	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	629a      	str	r2, [r3, #40]	; 0x28
 8003c0a:	e015      	b.n	8003c38 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c0c:	893b      	ldrh	r3, [r7, #8]
 8003c0e:	0a1b      	lsrs	r3, r3, #8
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	69b9      	ldr	r1, [r7, #24]
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f8d6 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e012      	b.n	8003c54 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c2e:	893b      	ldrh	r3, [r7, #8]
 8003c30:	b2da      	uxtb	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	2180      	movs	r1, #128	; 0x80
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f884 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	80002000 	.word	0x80002000

08003c60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c7a:	88fb      	ldrh	r3, [r7, #6]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	8979      	ldrh	r1, [r7, #10]
 8003c80:	4b20      	ldr	r3, [pc, #128]	; (8003d04 <I2C_RequestMemoryRead+0xa4>)
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f9fe 	bl	8004088 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8c:	69fa      	ldr	r2, [r7, #28]
 8003c8e:	69b9      	ldr	r1, [r7, #24]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f89d 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e02c      	b.n	8003cfa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ca0:	88fb      	ldrh	r3, [r7, #6]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d105      	bne.n	8003cb2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca6:	893b      	ldrh	r3, [r7, #8]
 8003ca8:	b2da      	uxtb	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb0:	e015      	b.n	8003cde <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cb2:	893b      	ldrh	r3, [r7, #8]
 8003cb4:	0a1b      	lsrs	r3, r3, #8
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	69b9      	ldr	r1, [r7, #24]
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 f883 	bl	8003dd0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e012      	b.n	8003cfa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cd4:	893b      	ldrh	r3, [r7, #8]
 8003cd6:	b2da      	uxtb	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2140      	movs	r1, #64	; 0x40
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 f831 	bl	8003d50 <I2C_WaitOnFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d001      	beq.n	8003cf8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	80002000 	.word	0x80002000

08003d08 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d103      	bne.n	8003d26 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d007      	beq.n	8003d44 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f042 0201 	orr.w	r2, r2, #1
 8003d42:	619a      	str	r2, [r3, #24]
  }
}
 8003d44:	bf00      	nop
 8003d46:	370c      	adds	r7, #12
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d60:	e022      	b.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d01e      	beq.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6a:	f7ff f865 	bl	8002e38 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	683a      	ldr	r2, [r7, #0]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d302      	bcc.n	8003d80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d113      	bne.n	8003da8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d84:	f043 0220 	orr.w	r2, r3, #32
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2220      	movs	r2, #32
 8003d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e00f      	b.n	8003dc8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d0cd      	beq.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ddc:	e02c      	b.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f870 	bl	8003ec8 <I2C_IsErrorOccurred>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e02a      	b.n	8003e48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df8:	d01e      	beq.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dfa:	f7ff f81d 	bl	8002e38 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	68ba      	ldr	r2, [r7, #8]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d113      	bne.n	8003e38 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e14:	f043 0220 	orr.w	r2, r3, #32
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e007      	b.n	8003e48 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d1cb      	bne.n	8003dde <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5c:	e028      	b.n	8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	68f8      	ldr	r0, [r7, #12]
 8003e64:	f000 f830 	bl	8003ec8 <I2C_IsErrorOccurred>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e026      	b.n	8003ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e72:	f7fe ffe1 	bl	8002e38 <HAL_GetTick>
 8003e76:	4602      	mov	r2, r0
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	1ad3      	subs	r3, r2, r3
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d302      	bcc.n	8003e88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d113      	bne.n	8003eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2220      	movs	r2, #32
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e007      	b.n	8003ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699b      	ldr	r3, [r3, #24]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d1cf      	bne.n	8003e5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b08a      	sub	sp, #40	; 0x28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d068      	beq.n	8003fc6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2210      	movs	r2, #16
 8003efa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003efc:	e049      	b.n	8003f92 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f04:	d045      	beq.n	8003f92 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f06:	f7fe ff97 	bl	8002e38 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d302      	bcc.n	8003f1c <I2C_IsErrorOccurred+0x54>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d13a      	bne.n	8003f92 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f26:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f2e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f3e:	d121      	bne.n	8003f84 <I2C_IsErrorOccurred+0xbc>
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f46:	d01d      	beq.n	8003f84 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f48:	7cfb      	ldrb	r3, [r7, #19]
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d01a      	beq.n	8003f84 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f5c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f5e:	f7fe ff6b 	bl	8002e38 <HAL_GetTick>
 8003f62:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f64:	e00e      	b.n	8003f84 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f66:	f7fe ff67 	bl	8002e38 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b19      	cmp	r3, #25
 8003f72:	d907      	bls.n	8003f84 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	f043 0320 	orr.w	r3, r3, #32
 8003f7a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003f82:	e006      	b.n	8003f92 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0320 	and.w	r3, r3, #32
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d1e9      	bne.n	8003f66 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d003      	beq.n	8003fa8 <I2C_IsErrorOccurred+0xe0>
 8003fa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0aa      	beq.n	8003efe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003fa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f043 0304 	orr.w	r3, r3, #4
 8003fbe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00b      	beq.n	8003ff0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	f043 0301 	orr.w	r3, r3, #1
 8003fde:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fe8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f043 0308 	orr.w	r3, r3, #8
 8004000:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800400a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800401c:	6a3b      	ldr	r3, [r7, #32]
 800401e:	f043 0302 	orr.w	r3, r3, #2
 8004022:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004038:	2b00      	cmp	r3, #0
 800403a:	d01c      	beq.n	8004076 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800403c:	68f8      	ldr	r0, [r7, #12]
 800403e:	f7ff fe63 	bl	8003d08 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	4b0d      	ldr	r3, [pc, #52]	; (8004084 <I2C_IsErrorOccurred+0x1bc>)
 800404e:	400b      	ands	r3, r1
 8004050:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	431a      	orrs	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2220      	movs	r2, #32
 8004062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004076:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800407a:	4618      	mov	r0, r3
 800407c:	3728      	adds	r7, #40	; 0x28
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	fe00e800 	.word	0xfe00e800

08004088 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	460b      	mov	r3, r1
 8004094:	817b      	strh	r3, [r7, #10]
 8004096:	4613      	mov	r3, r2
 8004098:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800409a:	897b      	ldrh	r3, [r7, #10]
 800409c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040a0:	7a7b      	ldrb	r3, [r7, #9]
 80040a2:	041b      	lsls	r3, r3, #16
 80040a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040a8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80040b6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	0d5b      	lsrs	r3, r3, #21
 80040c2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <I2C_TransferConfig+0x60>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	43db      	mvns	r3, r3
 80040cc:	ea02 0103 	and.w	r1, r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040da:	bf00      	nop
 80040dc:	371c      	adds	r7, #28
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	03ff63ff 	.word	0x03ff63ff

080040ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d138      	bne.n	8004174 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800410c:	2302      	movs	r3, #2
 800410e:	e032      	b.n	8004176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	; 0x24
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f022 0201 	bic.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800413e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr

08004182 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004182:	b480      	push	{r7}
 8004184:	b085      	sub	sp, #20
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b20      	cmp	r3, #32
 8004196:	d139      	bne.n	800420c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800419e:	2b01      	cmp	r3, #1
 80041a0:	d101      	bne.n	80041a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041a2:	2302      	movs	r3, #2
 80041a4:	e033      	b.n	800420e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2224      	movs	r2, #36	; 0x24
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 0201 	bic.w	r2, r2, #1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800420c:	2302      	movs	r3, #2
  }
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr

0800421a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800421a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800421c:	b08f      	sub	sp, #60	; 0x3c
 800421e:	af0a      	add	r7, sp, #40	; 0x28
 8004220:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e116      	b.n	800445a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fe fc00 	bl	8002a4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2203      	movs	r2, #3
 8004250:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f003 f8ea 	bl	8007444 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	603b      	str	r3, [r7, #0]
 8004276:	687e      	ldr	r6, [r7, #4]
 8004278:	466d      	mov	r5, sp
 800427a:	f106 0410 	add.w	r4, r6, #16
 800427e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800428a:	e885 0003 	stmia.w	r5, {r0, r1}
 800428e:	1d33      	adds	r3, r6, #4
 8004290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004292:	6838      	ldr	r0, [r7, #0]
 8004294:	f003 f87e 	bl	8007394 <USB_CoreInit>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d005      	beq.n	80042aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e0d7      	b.n	800445a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 f8d8 	bl	8007466 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042b6:	2300      	movs	r3, #0
 80042b8:	73fb      	strb	r3, [r7, #15]
 80042ba:	e04a      	b.n	8004352 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80042bc:	7bfa      	ldrb	r2, [r7, #15]
 80042be:	6879      	ldr	r1, [r7, #4]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4413      	add	r3, r2
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	440b      	add	r3, r1
 80042ca:	333d      	adds	r3, #61	; 0x3d
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80042d0:	7bfa      	ldrb	r2, [r7, #15]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	4413      	add	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	333c      	adds	r3, #60	; 0x3c
 80042e0:	7bfa      	ldrb	r2, [r7, #15]
 80042e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80042e4:	7bfa      	ldrb	r2, [r7, #15]
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
 80042e8:	b298      	uxth	r0, r3
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	4613      	mov	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	440b      	add	r3, r1
 80042f6:	3344      	adds	r3, #68	; 0x44
 80042f8:	4602      	mov	r2, r0
 80042fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80042fc:	7bfa      	ldrb	r2, [r7, #15]
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	3340      	adds	r3, #64	; 0x40
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004310:	7bfa      	ldrb	r2, [r7, #15]
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	4613      	mov	r3, r2
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	3348      	adds	r3, #72	; 0x48
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004324:	7bfa      	ldrb	r2, [r7, #15]
 8004326:	6879      	ldr	r1, [r7, #4]
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	334c      	adds	r3, #76	; 0x4c
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004338:	7bfa      	ldrb	r2, [r7, #15]
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	4613      	mov	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	440b      	add	r3, r1
 8004346:	3354      	adds	r3, #84	; 0x54
 8004348:	2200      	movs	r2, #0
 800434a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	3301      	adds	r3, #1
 8004350:	73fb      	strb	r3, [r7, #15]
 8004352:	7bfa      	ldrb	r2, [r7, #15]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3af      	bcc.n	80042bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800435c:	2300      	movs	r3, #0
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e044      	b.n	80043ec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004362:	7bfa      	ldrb	r2, [r7, #15]
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004374:	2200      	movs	r2, #0
 8004376:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004378:	7bfa      	ldrb	r2, [r7, #15]
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800438a:	7bfa      	ldrb	r2, [r7, #15]
 800438c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800438e:	7bfa      	ldrb	r2, [r7, #15]
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	440b      	add	r3, r1
 800439c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80043ba:	7bfa      	ldrb	r2, [r7, #15]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80043cc:	2200      	movs	r2, #0
 80043ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e6:	7bfb      	ldrb	r3, [r7, #15]
 80043e8:	3301      	adds	r3, #1
 80043ea:	73fb      	strb	r3, [r7, #15]
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d3b5      	bcc.n	8004362 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	687e      	ldr	r6, [r7, #4]
 80043fe:	466d      	mov	r5, sp
 8004400:	f106 0410 	add.w	r4, r6, #16
 8004404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800440a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800440c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004410:	e885 0003 	stmia.w	r5, {r0, r1}
 8004414:	1d33      	adds	r3, r6, #4
 8004416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004418:	6838      	ldr	r0, [r7, #0]
 800441a:	f003 f871 	bl	8007500 <USB_DevInit>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2202      	movs	r2, #2
 8004428:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e014      	b.n	800445a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b01      	cmp	r3, #1
 8004446:	d102      	bne.n	800444e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f80b 	bl	8004464 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fa2f 	bl	80078b6 <USB_DevDisconnect>

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3714      	adds	r7, #20
 800445e:	46bd      	mov	sp, r7
 8004460:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004464 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004494:	4313      	orrs	r3, r2
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	10000003 	.word	0x10000003

080044ac <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a04      	ldr	r2, [pc, #16]	; (80044c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80044b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40007000 	.word	0x40007000

080044cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80044d4:	2300      	movs	r3, #0
 80044d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e291      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 8087 	beq.w	80045fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044f0:	4b96      	ldr	r3, [pc, #600]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 030c 	and.w	r3, r3, #12
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	d00c      	beq.n	8004516 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044fc:	4b93      	ldr	r3, [pc, #588]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d112      	bne.n	800452e <HAL_RCC_OscConfig+0x62>
 8004508:	4b90      	ldr	r3, [pc, #576]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004514:	d10b      	bne.n	800452e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004516:	4b8d      	ldr	r3, [pc, #564]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d06c      	beq.n	80045fc <HAL_RCC_OscConfig+0x130>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d168      	bne.n	80045fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e26b      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004536:	d106      	bne.n	8004546 <HAL_RCC_OscConfig+0x7a>
 8004538:	4b84      	ldr	r3, [pc, #528]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a83      	ldr	r2, [pc, #524]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800453e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004542:	6013      	str	r3, [r2, #0]
 8004544:	e02e      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10c      	bne.n	8004568 <HAL_RCC_OscConfig+0x9c>
 800454e:	4b7f      	ldr	r3, [pc, #508]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a7e      	ldr	r2, [pc, #504]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b7c      	ldr	r3, [pc, #496]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7b      	ldr	r2, [pc, #492]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	e01d      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004570:	d10c      	bne.n	800458c <HAL_RCC_OscConfig+0xc0>
 8004572:	4b76      	ldr	r3, [pc, #472]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a75      	ldr	r2, [pc, #468]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	4b73      	ldr	r3, [pc, #460]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a72      	ldr	r2, [pc, #456]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	e00b      	b.n	80045a4 <HAL_RCC_OscConfig+0xd8>
 800458c:	4b6f      	ldr	r3, [pc, #444]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a6e      	ldr	r2, [pc, #440]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	4b6c      	ldr	r3, [pc, #432]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6b      	ldr	r2, [pc, #428]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800459e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d013      	beq.n	80045d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7fe fc44 	bl	8002e38 <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045b4:	f7fe fc40 	bl	8002e38 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b64      	cmp	r3, #100	; 0x64
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e21f      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c6:	4b61      	ldr	r3, [pc, #388]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d0f0      	beq.n	80045b4 <HAL_RCC_OscConfig+0xe8>
 80045d2:	e014      	b.n	80045fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe fc30 	bl	8002e38 <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045dc:	f7fe fc2c 	bl	8002e38 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b64      	cmp	r3, #100	; 0x64
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e20b      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ee:	4b57      	ldr	r3, [pc, #348]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x110>
 80045fa:	e000      	b.n	80045fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0302 	and.w	r3, r3, #2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d069      	beq.n	80046de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800460a:	4b50      	ldr	r3, [pc, #320]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f003 030c 	and.w	r3, r3, #12
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00b      	beq.n	800462e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004616:	4b4d      	ldr	r3, [pc, #308]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b08      	cmp	r3, #8
 8004620:	d11c      	bne.n	800465c <HAL_RCC_OscConfig+0x190>
 8004622:	4b4a      	ldr	r3, [pc, #296]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d116      	bne.n	800465c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462e:	4b47      	ldr	r3, [pc, #284]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_RCC_OscConfig+0x17a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d001      	beq.n	8004646 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e1df      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004646:	4b41      	ldr	r3, [pc, #260]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	493d      	ldr	r1, [pc, #244]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465a:	e040      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d023      	beq.n	80046ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004664:	4b39      	ldr	r3, [pc, #228]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a38      	ldr	r2, [pc, #224]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004670:	f7fe fbe2 	bl	8002e38 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004678:	f7fe fbde 	bl	8002e38 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e1bd      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800468a:	4b30      	ldr	r3, [pc, #192]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0f0      	beq.n	8004678 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004696:	4b2d      	ldr	r3, [pc, #180]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4929      	ldr	r1, [pc, #164]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	600b      	str	r3, [r1, #0]
 80046aa:	e018      	b.n	80046de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046ac:	4b27      	ldr	r3, [pc, #156]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a26      	ldr	r2, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fe fbbe 	bl	8002e38 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fe fbba 	bl	8002e38 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e199      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1e      	ldr	r3, [pc, #120]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d038      	beq.n	800475c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b16      	ldr	r3, [pc, #88]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <HAL_RCC_OscConfig+0x280>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fe:	f7fe fb9b 	bl	8002e38 <HAL_GetTick>
 8004702:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004706:	f7fe fb97 	bl	8002e38 <HAL_GetTick>
 800470a:	4602      	mov	r2, r0
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b02      	cmp	r3, #2
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e176      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0x23a>
 8004724:	e01a      	b.n	800475c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	4b09      	ldr	r3, [pc, #36]	; (800474c <HAL_RCC_OscConfig+0x280>)
 8004728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472a:	4a08      	ldr	r2, [pc, #32]	; (800474c <HAL_RCC_OscConfig+0x280>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fe fb81 	bl	8002e38 <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fe fb7d 	bl	8002e38 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d903      	bls.n	8004750 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e15c      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
 800474c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	4b91      	ldr	r3, [pc, #580]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1ee      	bne.n	800473a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a4 	beq.w	80048b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800476a:	4b8b      	ldr	r3, [pc, #556]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d10d      	bne.n	8004792 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004776:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	4a87      	ldr	r2, [pc, #540]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800477c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004780:	6413      	str	r3, [r2, #64]	; 0x40
 8004782:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	60bb      	str	r3, [r7, #8]
 800478c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478e:	2301      	movs	r3, #1
 8004790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004792:	4b82      	ldr	r3, [pc, #520]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800479a:	2b00      	cmp	r3, #0
 800479c:	d118      	bne.n	80047d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800479e:	4b7f      	ldr	r3, [pc, #508]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a7e      	ldr	r2, [pc, #504]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047aa:	f7fe fb45 	bl	8002e38 <HAL_GetTick>
 80047ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047b0:	e008      	b.n	80047c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b2:	f7fe fb41 	bl	8002e38 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b64      	cmp	r3, #100	; 0x64
 80047be:	d901      	bls.n	80047c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e120      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80047c4:	4b75      	ldr	r3, [pc, #468]	; (800499c <HAL_RCC_OscConfig+0x4d0>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d106      	bne.n	80047e6 <HAL_RCC_OscConfig+0x31a>
 80047d8:	4b6f      	ldr	r3, [pc, #444]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a6e      	ldr	r2, [pc, #440]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	e02d      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10c      	bne.n	8004808 <HAL_RCC_OscConfig+0x33c>
 80047ee:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f2:	4a69      	ldr	r2, [pc, #420]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6713      	str	r3, [r2, #112]	; 0x70
 80047fa:	4b67      	ldr	r3, [pc, #412]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80047fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fe:	4a66      	ldr	r2, [pc, #408]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004800:	f023 0304 	bic.w	r3, r3, #4
 8004804:	6713      	str	r3, [r2, #112]	; 0x70
 8004806:	e01c      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b05      	cmp	r3, #5
 800480e:	d10c      	bne.n	800482a <HAL_RCC_OscConfig+0x35e>
 8004810:	4b61      	ldr	r3, [pc, #388]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	4a60      	ldr	r2, [pc, #384]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004816:	f043 0304 	orr.w	r3, r3, #4
 800481a:	6713      	str	r3, [r2, #112]	; 0x70
 800481c:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a5d      	ldr	r2, [pc, #372]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	e00b      	b.n	8004842 <HAL_RCC_OscConfig+0x376>
 800482a:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482e:	4a5a      	ldr	r2, [pc, #360]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	6713      	str	r3, [r2, #112]	; 0x70
 8004836:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800483c:	f023 0304 	bic.w	r3, r3, #4
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d015      	beq.n	8004876 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800484a:	f7fe faf5 	bl	8002e38 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004850:	e00a      	b.n	8004868 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004852:	f7fe faf1 	bl	8002e38 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e0ce      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0ee      	beq.n	8004852 <HAL_RCC_OscConfig+0x386>
 8004874:	e014      	b.n	80048a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004876:	f7fe fadf 	bl	8002e38 <HAL_GetTick>
 800487a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800487c:	e00a      	b.n	8004894 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800487e:	f7fe fadb 	bl	8002e38 <HAL_GetTick>
 8004882:	4602      	mov	r2, r0
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f241 3288 	movw	r2, #5000	; 0x1388
 800488c:	4293      	cmp	r3, r2
 800488e:	d901      	bls.n	8004894 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	e0b8      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004894:	4b40      	ldr	r3, [pc, #256]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ee      	bne.n	800487e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048a0:	7dfb      	ldrb	r3, [r7, #23]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048a6:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80a4 	beq.w	8004a04 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048bc:	4b36      	ldr	r3, [pc, #216]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 030c 	and.w	r3, r3, #12
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d06b      	beq.n	80049a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d149      	bne.n	8004964 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d0:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a30      	ldr	r2, [pc, #192]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fe faac 	bl	8002e38 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7fe faa8 	bl	8002e38 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e087      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	69da      	ldr	r2, [r3, #28]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	019b      	lsls	r3, r3, #6
 8004912:	431a      	orrs	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	3b01      	subs	r3, #1
 800491c:	041b      	lsls	r3, r3, #16
 800491e:	431a      	orrs	r2, r3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004924:	061b      	lsls	r3, r3, #24
 8004926:	4313      	orrs	r3, r2
 8004928:	4a1b      	ldr	r2, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800492a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800492e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b19      	ldr	r3, [pc, #100]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fe fa7c 	bl	8002e38 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fe fa78 	bl	8002e38 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e057      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004956:	4b10      	ldr	r3, [pc, #64]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d0f0      	beq.n	8004944 <HAL_RCC_OscConfig+0x478>
 8004962:	e04f      	b.n	8004a04 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004964:	4b0c      	ldr	r3, [pc, #48]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800496a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800496e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fe fa62 	bl	8002e38 <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004978:	f7fe fa5e 	bl	8002e38 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b02      	cmp	r3, #2
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e03d      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498a:	4b03      	ldr	r3, [pc, #12]	; (8004998 <HAL_RCC_OscConfig+0x4cc>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x4ac>
 8004996:	e035      	b.n	8004a04 <HAL_RCC_OscConfig+0x538>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80049a0:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_OscConfig+0x544>)
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d028      	beq.n	8004a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d121      	bne.n	8004a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d11a      	bne.n	8004a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d0:	4013      	ands	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049d8:	4293      	cmp	r3, r2
 80049da:	d111      	bne.n	8004a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	3b01      	subs	r3, #1
 80049ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d107      	bne.n	8004a00 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d001      	beq.n	8004a04 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3718      	adds	r7, #24
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800

08004a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0d0      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b6a      	ldr	r3, [pc, #424]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 030f 	and.w	r3, r3, #15
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d910      	bls.n	8004a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b67      	ldr	r3, [pc, #412]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f023 020f 	bic.w	r2, r3, #15
 8004a42:	4965      	ldr	r1, [pc, #404]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a4a:	4b63      	ldr	r3, [pc, #396]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 030f 	and.w	r3, r3, #15
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d001      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e0b8      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d020      	beq.n	8004aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0304 	and.w	r3, r3, #4
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a74:	4b59      	ldr	r3, [pc, #356]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	4a58      	ldr	r2, [pc, #352]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a8c:	4b53      	ldr	r3, [pc, #332]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	4a52      	ldr	r2, [pc, #328]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a98:	4b50      	ldr	r3, [pc, #320]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	494d      	ldr	r1, [pc, #308]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d040      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004abe:	4b47      	ldr	r3, [pc, #284]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d115      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e07f      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b41      	ldr	r3, [pc, #260]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e073      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3d      	ldr	r3, [pc, #244]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e06b      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b39      	ldr	r3, [pc, #228]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4936      	ldr	r1, [pc, #216]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b08:	f7fe f996 	bl	8002e38 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fe f992 	bl	8002e38 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e053      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2d      	ldr	r3, [pc, #180]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b27      	ldr	r3, [pc, #156]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 030f 	and.w	r3, r3, #15
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d210      	bcs.n	8004b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b24      	ldr	r3, [pc, #144]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f023 020f 	bic.w	r2, r3, #15
 8004b4e:	4922      	ldr	r1, [pc, #136]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b56:	4b20      	ldr	r3, [pc, #128]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 030f 	and.w	r3, r3, #15
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d001      	beq.n	8004b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e032      	b.n	8004bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d008      	beq.n	8004b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b74:	4b19      	ldr	r3, [pc, #100]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4916      	ldr	r1, [pc, #88]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d009      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b92:	4b12      	ldr	r3, [pc, #72]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	00db      	lsls	r3, r3, #3
 8004ba0:	490e      	ldr	r1, [pc, #56]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ba6:	f000 f821 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8004baa:	4602      	mov	r2, r0
 8004bac:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	091b      	lsrs	r3, r3, #4
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	490a      	ldr	r1, [pc, #40]	; (8004be0 <HAL_RCC_ClockConfig+0x1cc>)
 8004bb8:	5ccb      	ldrb	r3, [r1, r3]
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	4a09      	ldr	r2, [pc, #36]	; (8004be4 <HAL_RCC_ClockConfig+0x1d0>)
 8004bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bc2:	4b09      	ldr	r3, [pc, #36]	; (8004be8 <HAL_RCC_ClockConfig+0x1d4>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe f8f2 	bl	8002db0 <HAL_InitTick>

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40023c00 	.word	0x40023c00
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	0800bce0 	.word	0x0800bce0
 8004be4:	20000004 	.word	0x20000004
 8004be8:	20000008 	.word	0x20000008

08004bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bf0:	b094      	sub	sp, #80	; 0x50
 8004bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c04:	4b79      	ldr	r3, [pc, #484]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 030c 	and.w	r3, r3, #12
 8004c0c:	2b08      	cmp	r3, #8
 8004c0e:	d00d      	beq.n	8004c2c <HAL_RCC_GetSysClockFreq+0x40>
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	f200 80e1 	bhi.w	8004dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1a:	2b04      	cmp	r3, #4
 8004c1c:	d003      	beq.n	8004c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c1e:	e0db      	b.n	8004dd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4b73      	ldr	r3, [pc, #460]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004c22:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c24:	e0db      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4b73      	ldr	r3, [pc, #460]	; (8004df4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004c2a:	e0d8      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4b6f      	ldr	r3, [pc, #444]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c36:	4b6d      	ldr	r3, [pc, #436]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d063      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	2200      	movs	r2, #0
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c54:	633b      	str	r3, [r7, #48]	; 0x30
 8004c56:	2300      	movs	r3, #0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
 8004c5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	f04f 0000 	mov.w	r0, #0
 8004c66:	f04f 0100 	mov.w	r1, #0
 8004c6a:	0159      	lsls	r1, r3, #5
 8004c6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c70:	0150      	lsls	r0, r2, #5
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	4621      	mov	r1, r4
 8004c78:	1a51      	subs	r1, r2, r1
 8004c7a:	6139      	str	r1, [r7, #16]
 8004c7c:	4629      	mov	r1, r5
 8004c7e:	eb63 0301 	sbc.w	r3, r3, r1
 8004c82:	617b      	str	r3, [r7, #20]
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c90:	4659      	mov	r1, fp
 8004c92:	018b      	lsls	r3, r1, #6
 8004c94:	4651      	mov	r1, sl
 8004c96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	018a      	lsls	r2, r1, #6
 8004c9e:	4651      	mov	r1, sl
 8004ca0:	ebb2 0801 	subs.w	r8, r2, r1
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	eb63 0901 	sbc.w	r9, r3, r1
 8004caa:	f04f 0200 	mov.w	r2, #0
 8004cae:	f04f 0300 	mov.w	r3, #0
 8004cb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004cb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004cba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cbe:	4690      	mov	r8, r2
 8004cc0:	4699      	mov	r9, r3
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	eb18 0303 	adds.w	r3, r8, r3
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	462b      	mov	r3, r5
 8004ccc:	eb49 0303 	adc.w	r3, r9, r3
 8004cd0:	60fb      	str	r3, [r7, #12]
 8004cd2:	f04f 0200 	mov.w	r2, #0
 8004cd6:	f04f 0300 	mov.w	r3, #0
 8004cda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004cde:	4629      	mov	r1, r5
 8004ce0:	024b      	lsls	r3, r1, #9
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ce8:	4621      	mov	r1, r4
 8004cea:	024a      	lsls	r2, r1, #9
 8004cec:	4610      	mov	r0, r2
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cf6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004cf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cfc:	f7fc f834 	bl	8000d68 <__aeabi_uldivmod>
 8004d00:	4602      	mov	r2, r0
 8004d02:	460b      	mov	r3, r1
 8004d04:	4613      	mov	r3, r2
 8004d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d08:	e058      	b.n	8004dbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d0a:	4b38      	ldr	r3, [pc, #224]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	099b      	lsrs	r3, r3, #6
 8004d10:	2200      	movs	r2, #0
 8004d12:	4618      	mov	r0, r3
 8004d14:	4611      	mov	r1, r2
 8004d16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004d1a:	623b      	str	r3, [r7, #32]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004d20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004d24:	4642      	mov	r2, r8
 8004d26:	464b      	mov	r3, r9
 8004d28:	f04f 0000 	mov.w	r0, #0
 8004d2c:	f04f 0100 	mov.w	r1, #0
 8004d30:	0159      	lsls	r1, r3, #5
 8004d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004d36:	0150      	lsls	r0, r2, #5
 8004d38:	4602      	mov	r2, r0
 8004d3a:	460b      	mov	r3, r1
 8004d3c:	4641      	mov	r1, r8
 8004d3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004d42:	4649      	mov	r1, r9
 8004d44:	eb63 0b01 	sbc.w	fp, r3, r1
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	f04f 0300 	mov.w	r3, #0
 8004d50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004d54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004d58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004d5c:	ebb2 040a 	subs.w	r4, r2, sl
 8004d60:	eb63 050b 	sbc.w	r5, r3, fp
 8004d64:	f04f 0200 	mov.w	r2, #0
 8004d68:	f04f 0300 	mov.w	r3, #0
 8004d6c:	00eb      	lsls	r3, r5, #3
 8004d6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d72:	00e2      	lsls	r2, r4, #3
 8004d74:	4614      	mov	r4, r2
 8004d76:	461d      	mov	r5, r3
 8004d78:	4643      	mov	r3, r8
 8004d7a:	18e3      	adds	r3, r4, r3
 8004d7c:	603b      	str	r3, [r7, #0]
 8004d7e:	464b      	mov	r3, r9
 8004d80:	eb45 0303 	adc.w	r3, r5, r3
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d92:	4629      	mov	r1, r5
 8004d94:	028b      	lsls	r3, r1, #10
 8004d96:	4621      	mov	r1, r4
 8004d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	028a      	lsls	r2, r1, #10
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004da6:	2200      	movs	r2, #0
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	61fa      	str	r2, [r7, #28]
 8004dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004db0:	f7fb ffda 	bl	8000d68 <__aeabi_uldivmod>
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4613      	mov	r3, r2
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004dbc:	4b0b      	ldr	r3, [pc, #44]	; (8004dec <HAL_RCC_GetSysClockFreq+0x200>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	0c1b      	lsrs	r3, r3, #16
 8004dc2:	f003 0303 	and.w	r3, r3, #3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	005b      	lsls	r3, r3, #1
 8004dca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004dcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dd6:	e002      	b.n	8004dde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dd8:	4b05      	ldr	r3, [pc, #20]	; (8004df0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dda:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3750      	adds	r7, #80	; 0x50
 8004de4:	46bd      	mov	sp, r7
 8004de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dea:	bf00      	nop
 8004dec:	40023800 	.word	0x40023800
 8004df0:	00f42400 	.word	0x00f42400
 8004df4:	007a1200 	.word	0x007a1200

08004df8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	20000004 	.word	0x20000004

08004e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e14:	f7ff fff0 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	4b05      	ldr	r3, [pc, #20]	; (8004e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	0a9b      	lsrs	r3, r3, #10
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	4903      	ldr	r1, [pc, #12]	; (8004e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e26:	5ccb      	ldrb	r3, [r1, r3]
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40023800 	.word	0x40023800
 8004e34:	0800bcf0 	.word	0x0800bcf0

08004e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e3c:	f7ff ffdc 	bl	8004df8 <HAL_RCC_GetHCLKFreq>
 8004e40:	4602      	mov	r2, r0
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	0b5b      	lsrs	r3, r3, #13
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	4903      	ldr	r1, [pc, #12]	; (8004e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e4e:	5ccb      	ldrb	r3, [r1, r3]
 8004e50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40023800 	.word	0x40023800
 8004e5c:	0800bcf0 	.word	0x0800bcf0

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004e74:	2300      	movs	r3, #0
 8004e76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0301 	and.w	r3, r3, #1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d012      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e88:	4b69      	ldr	r3, [pc, #420]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a68      	ldr	r2, [pc, #416]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e92:	6093      	str	r3, [r2, #8]
 8004e94:	4b66      	ldr	r3, [pc, #408]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9c:	4964      	ldr	r1, [pc, #400]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d101      	bne.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d017      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004eba:	4b5d      	ldr	r3, [pc, #372]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ec0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec8:	4959      	ldr	r1, [pc, #356]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ed8:	d101      	bne.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004eda:	2301      	movs	r3, #1
 8004edc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d017      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ef6:	4b4e      	ldr	r3, [pc, #312]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004efc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f04:	494a      	ldr	r1, [pc, #296]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f14:	d101      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004f16:	2301      	movs	r3, #1
 8004f18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d001      	beq.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004f32:	2301      	movs	r3, #1
 8004f34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0320 	and.w	r3, r3, #32
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 808b 	beq.w	800505a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f44:	4b3a      	ldr	r3, [pc, #232]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	4a39      	ldr	r2, [pc, #228]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f50:	4b37      	ldr	r3, [pc, #220]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004f5c:	4b35      	ldr	r3, [pc, #212]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a34      	ldr	r2, [pc, #208]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f68:	f7fd ff66 	bl	8002e38 <HAL_GetTick>
 8004f6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f6e:	e008      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f70:	f7fd ff62 	bl	8002e38 <HAL_GetTick>
 8004f74:	4602      	mov	r2, r0
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	2b64      	cmp	r3, #100	; 0x64
 8004f7c:	d901      	bls.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004f7e:	2303      	movs	r3, #3
 8004f80:	e357      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004f82:	4b2c      	ldr	r3, [pc, #176]	; (8005034 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d0f0      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f8e:	4b28      	ldr	r3, [pc, #160]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d035      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d02e      	beq.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fb6:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc6:	4a1a      	ldr	r2, [pc, #104]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004fce:	4a18      	ldr	r2, [pc, #96]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d114      	bne.n	800500a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd ff2a 	bl	8002e38 <HAL_GetTick>
 8004fe4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe6:	e00a      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe8:	f7fd ff26 	bl	8002e38 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e319      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffe:	4b0c      	ldr	r3, [pc, #48]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d0ee      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005016:	d111      	bne.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005018:	4b05      	ldr	r3, [pc, #20]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005024:	4b04      	ldr	r3, [pc, #16]	; (8005038 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005026:	400b      	ands	r3, r1
 8005028:	4901      	ldr	r1, [pc, #4]	; (8005030 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800502a:	4313      	orrs	r3, r2
 800502c:	608b      	str	r3, [r1, #8]
 800502e:	e00b      	b.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005030:	40023800 	.word	0x40023800
 8005034:	40007000 	.word	0x40007000
 8005038:	0ffffcff 	.word	0x0ffffcff
 800503c:	4baa      	ldr	r3, [pc, #680]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4aa9      	ldr	r2, [pc, #676]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005042:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005046:	6093      	str	r3, [r2, #8]
 8005048:	4ba7      	ldr	r3, [pc, #668]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800504a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005054:	49a4      	ldr	r1, [pc, #656]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005056:	4313      	orrs	r3, r2
 8005058:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0310 	and.w	r3, r3, #16
 8005062:	2b00      	cmp	r3, #0
 8005064:	d010      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005066:	4ba0      	ldr	r3, [pc, #640]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800506c:	4a9e      	ldr	r2, [pc, #632]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800506e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005076:	4b9c      	ldr	r3, [pc, #624]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005078:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	4999      	ldr	r1, [pc, #612]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d00a      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005094:	4b94      	ldr	r3, [pc, #592]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80050a2:	4991      	ldr	r1, [pc, #580]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00a      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050b6:	4b8c      	ldr	r3, [pc, #560]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050c4:	4988      	ldr	r1, [pc, #544]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00a      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d8:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050e6:	4980      	ldr	r1, [pc, #512]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050fa:	4b7b      	ldr	r3, [pc, #492]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005100:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005108:	4977      	ldr	r1, [pc, #476]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800510a:	4313      	orrs	r3, r2
 800510c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005118:	2b00      	cmp	r3, #0
 800511a:	d00a      	beq.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800511c:	4b72      	ldr	r3, [pc, #456]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800511e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512a:	496f      	ldr	r1, [pc, #444]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800512c:	4313      	orrs	r3, r2
 800512e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00a      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800513e:	4b6a      	ldr	r3, [pc, #424]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005140:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005144:	f023 020c 	bic.w	r2, r3, #12
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800514c:	4966      	ldr	r1, [pc, #408]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00a      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005160:	4b61      	ldr	r3, [pc, #388]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005166:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800516e:	495e      	ldr	r1, [pc, #376]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005170:	4313      	orrs	r3, r2
 8005172:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00a      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005182:	4b59      	ldr	r3, [pc, #356]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005190:	4955      	ldr	r1, [pc, #340]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005192:	4313      	orrs	r3, r2
 8005194:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00a      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051a4:	4b50      	ldr	r3, [pc, #320]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051b2:	494d      	ldr	r1, [pc, #308]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80051c6:	4b48      	ldr	r3, [pc, #288]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051d4:	4944      	ldr	r1, [pc, #272]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00a      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80051e8:	4b3f      	ldr	r3, [pc, #252]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f6:	493c      	ldr	r1, [pc, #240]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00a      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800520a:	4b37      	ldr	r3, [pc, #220]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005218:	4933      	ldr	r1, [pc, #204]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00a      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800522c:	4b2e      	ldr	r3, [pc, #184]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800522e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005232:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800523a:	492b      	ldr	r1, [pc, #172]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d011      	beq.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800524e:	4b26      	ldr	r3, [pc, #152]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005254:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800525c:	4922      	ldr	r1, [pc, #136]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005268:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d001      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800527e:	2301      	movs	r3, #1
 8005280:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800528e:	4b16      	ldr	r3, [pc, #88]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800529c:	4912      	ldr	r1, [pc, #72]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052b0:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c0:	4909      	ldr	r1, [pc, #36]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c2:	4313      	orrs	r3, r2
 80052c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d006      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80d9 	beq.w	800548e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052dc:	4b02      	ldr	r3, [pc, #8]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a01      	ldr	r2, [pc, #4]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052e6:	e001      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80052e8:	40023800 	.word	0x40023800
 80052ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ee:	f7fd fda3 	bl	8002e38 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f6:	f7fd fd9f 	bl	8002e38 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b64      	cmp	r3, #100	; 0x64
 8005302:	d901      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e194      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005308:	4b6c      	ldr	r3, [pc, #432]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d021      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005324:	2b00      	cmp	r3, #0
 8005326:	d11d      	bne.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005328:	4b64      	ldr	r3, [pc, #400]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800532e:	0c1b      	lsrs	r3, r3, #16
 8005330:	f003 0303 	and.w	r3, r3, #3
 8005334:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005336:	4b61      	ldr	r3, [pc, #388]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005338:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800533c:	0e1b      	lsrs	r3, r3, #24
 800533e:	f003 030f 	and.w	r3, r3, #15
 8005342:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	019a      	lsls	r2, r3, #6
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	041b      	lsls	r3, r3, #16
 800534e:	431a      	orrs	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	061b      	lsls	r3, r3, #24
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	071b      	lsls	r3, r3, #28
 800535c:	4957      	ldr	r1, [pc, #348]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d004      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005374:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005378:	d00a      	beq.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005382:	2b00      	cmp	r3, #0
 8005384:	d02e      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538e:	d129      	bne.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	f003 0303 	and.w	r3, r3, #3
 800539c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800539e:	4b47      	ldr	r3, [pc, #284]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053a4:	0f1b      	lsrs	r3, r3, #28
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	019a      	lsls	r2, r3, #6
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	041b      	lsls	r3, r3, #16
 80053b6:	431a      	orrs	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	061b      	lsls	r3, r3, #24
 80053be:	431a      	orrs	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	071b      	lsls	r3, r3, #28
 80053c4:	493d      	ldr	r1, [pc, #244]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053cc:	4b3b      	ldr	r3, [pc, #236]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d2:	f023 021f 	bic.w	r2, r3, #31
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053da:	3b01      	subs	r3, #1
 80053dc:	4937      	ldr	r1, [pc, #220]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01d      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053f0:	4b32      	ldr	r3, [pc, #200]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053f6:	0e1b      	lsrs	r3, r3, #24
 80053f8:	f003 030f 	and.w	r3, r3, #15
 80053fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053fe:	4b2f      	ldr	r3, [pc, #188]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005404:	0f1b      	lsrs	r3, r3, #28
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	019a      	lsls	r2, r3, #6
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	041b      	lsls	r3, r3, #16
 8005418:	431a      	orrs	r2, r3
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	431a      	orrs	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	071b      	lsls	r3, r3, #28
 8005424:	4925      	ldr	r1, [pc, #148]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	019a      	lsls	r2, r3, #6
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	041b      	lsls	r3, r3, #16
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	061b      	lsls	r3, r3, #24
 800544c:	431a      	orrs	r2, r3
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	4919      	ldr	r1, [pc, #100]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a16      	ldr	r2, [pc, #88]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005468:	f7fd fce6 	bl	8002e38 <HAL_GetTick>
 800546c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005470:	f7fd fce2 	bl	8002e38 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e0d7      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005482:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0f0      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	2b01      	cmp	r3, #1
 8005492:	f040 80cd 	bne.w	8005630 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800549c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a2:	f7fd fcc9 	bl	8002e38 <HAL_GetTick>
 80054a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054a8:	e00a      	b.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054aa:	f7fd fcc5 	bl	8002e38 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b64      	cmp	r3, #100	; 0x64
 80054b6:	d903      	bls.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e0ba      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80054bc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054c0:	4b5e      	ldr	r3, [pc, #376]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054cc:	d0ed      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d009      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d02e      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d12a      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054f6:	4b51      	ldr	r3, [pc, #324]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	0c1b      	lsrs	r3, r3, #16
 80054fe:	f003 0303 	and.w	r3, r3, #3
 8005502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005504:	4b4d      	ldr	r3, [pc, #308]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550a:	0f1b      	lsrs	r3, r3, #28
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	019a      	lsls	r2, r3, #6
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	041b      	lsls	r3, r3, #16
 800551c:	431a      	orrs	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	061b      	lsls	r3, r3, #24
 8005524:	431a      	orrs	r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	071b      	lsls	r3, r3, #28
 800552a:	4944      	ldr	r1, [pc, #272]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800552c:	4313      	orrs	r3, r2
 800552e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005532:	4b42      	ldr	r3, [pc, #264]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005538:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005540:	3b01      	subs	r3, #1
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	493d      	ldr	r1, [pc, #244]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d022      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800555c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005560:	d11d      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005562:	4b36      	ldr	r3, [pc, #216]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005568:	0e1b      	lsrs	r3, r3, #24
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005570:	4b32      	ldr	r3, [pc, #200]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	0f1b      	lsrs	r3, r3, #28
 8005578:	f003 0307 	and.w	r3, r3, #7
 800557c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	019a      	lsls	r2, r3, #6
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	041b      	lsls	r3, r3, #16
 800558a:	431a      	orrs	r2, r3
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	431a      	orrs	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	071b      	lsls	r3, r3, #28
 8005596:	4929      	ldr	r1, [pc, #164]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005598:	4313      	orrs	r3, r2
 800559a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d028      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055aa:	4b24      	ldr	r3, [pc, #144]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b0:	0e1b      	lsrs	r3, r3, #24
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055b8:	4b20      	ldr	r3, [pc, #128]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	0c1b      	lsrs	r3, r3, #16
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	019a      	lsls	r2, r3, #6
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	431a      	orrs	r2, r3
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	061b      	lsls	r3, r3, #24
 80055d6:	431a      	orrs	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	071b      	lsls	r3, r3, #28
 80055de:	4917      	ldr	r1, [pc, #92]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055e6:	4b15      	ldr	r3, [pc, #84]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	4911      	ldr	r1, [pc, #68]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a0e      	ldr	r2, [pc, #56]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005606:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005608:	f7fd fc16 	bl	8002e38 <HAL_GetTick>
 800560c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800560e:	e008      	b.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005610:	f7fd fc12 	bl	8002e38 <HAL_GetTick>
 8005614:	4602      	mov	r2, r0
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	1ad3      	subs	r3, r2, r3
 800561a:	2b64      	cmp	r3, #100	; 0x64
 800561c:	d901      	bls.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	e007      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800562e:	d1ef      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3720      	adds	r7, #32
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40023800 	.word	0x40023800

08005640 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e049      	b.n	80056e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fd f938 	bl	80028dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fca2 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b082      	sub	sp, #8
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	e049      	b.n	8005794 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005706:	b2db      	uxtb	r3, r3
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f841 	bl	800579c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2202      	movs	r2, #2
 800571e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	3304      	adds	r3, #4
 800572a:	4619      	mov	r1, r3
 800572c:	4610      	mov	r0, r2
 800572e:	f000 fc4b 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2201      	movs	r2, #1
 8005746:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057a4:	bf00      	nop
 80057a6:	370c      	adds	r7, #12
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d109      	bne.n	80057d4 <HAL_TIM_PWM_Start+0x24>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	bf14      	ite	ne
 80057cc:	2301      	movne	r3, #1
 80057ce:	2300      	moveq	r3, #0
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	e03c      	b.n	800584e <HAL_TIM_PWM_Start+0x9e>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b04      	cmp	r3, #4
 80057d8:	d109      	bne.n	80057ee <HAL_TIM_PWM_Start+0x3e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	bf14      	ite	ne
 80057e6:	2301      	movne	r3, #1
 80057e8:	2300      	moveq	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e02f      	b.n	800584e <HAL_TIM_PWM_Start+0x9e>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b08      	cmp	r3, #8
 80057f2:	d109      	bne.n	8005808 <HAL_TIM_PWM_Start+0x58>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	bf14      	ite	ne
 8005800:	2301      	movne	r3, #1
 8005802:	2300      	moveq	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e022      	b.n	800584e <HAL_TIM_PWM_Start+0x9e>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d109      	bne.n	8005822 <HAL_TIM_PWM_Start+0x72>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005814:	b2db      	uxtb	r3, r3
 8005816:	2b01      	cmp	r3, #1
 8005818:	bf14      	ite	ne
 800581a:	2301      	movne	r3, #1
 800581c:	2300      	moveq	r3, #0
 800581e:	b2db      	uxtb	r3, r3
 8005820:	e015      	b.n	800584e <HAL_TIM_PWM_Start+0x9e>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b10      	cmp	r3, #16
 8005826:	d109      	bne.n	800583c <HAL_TIM_PWM_Start+0x8c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800582e:	b2db      	uxtb	r3, r3
 8005830:	2b01      	cmp	r3, #1
 8005832:	bf14      	ite	ne
 8005834:	2301      	movne	r3, #1
 8005836:	2300      	moveq	r3, #0
 8005838:	b2db      	uxtb	r3, r3
 800583a:	e008      	b.n	800584e <HAL_TIM_PWM_Start+0x9e>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005842:	b2db      	uxtb	r3, r3
 8005844:	2b01      	cmp	r3, #1
 8005846:	bf14      	ite	ne
 8005848:	2301      	movne	r3, #1
 800584a:	2300      	moveq	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e092      	b.n	800597c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d104      	bne.n	8005866 <HAL_TIM_PWM_Start+0xb6>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005864:	e023      	b.n	80058ae <HAL_TIM_PWM_Start+0xfe>
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b04      	cmp	r3, #4
 800586a:	d104      	bne.n	8005876 <HAL_TIM_PWM_Start+0xc6>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005874:	e01b      	b.n	80058ae <HAL_TIM_PWM_Start+0xfe>
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	2b08      	cmp	r3, #8
 800587a:	d104      	bne.n	8005886 <HAL_TIM_PWM_Start+0xd6>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005884:	e013      	b.n	80058ae <HAL_TIM_PWM_Start+0xfe>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d104      	bne.n	8005896 <HAL_TIM_PWM_Start+0xe6>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2202      	movs	r2, #2
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005894:	e00b      	b.n	80058ae <HAL_TIM_PWM_Start+0xfe>
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b10      	cmp	r3, #16
 800589a:	d104      	bne.n	80058a6 <HAL_TIM_PWM_Start+0xf6>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2202      	movs	r2, #2
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058a4:	e003      	b.n	80058ae <HAL_TIM_PWM_Start+0xfe>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2201      	movs	r2, #1
 80058b4:	6839      	ldr	r1, [r7, #0]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 ff1e 	bl	80066f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	; (8005984 <HAL_TIM_PWM_Start+0x1d4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d004      	beq.n	80058d0 <HAL_TIM_PWM_Start+0x120>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2f      	ldr	r2, [pc, #188]	; (8005988 <HAL_TIM_PWM_Start+0x1d8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_PWM_Start+0x124>
 80058d0:	2301      	movs	r3, #1
 80058d2:	e000      	b.n	80058d6 <HAL_TIM_PWM_Start+0x126>
 80058d4:	2300      	movs	r3, #0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a25      	ldr	r2, [pc, #148]	; (8005984 <HAL_TIM_PWM_Start+0x1d4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fc:	d01d      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a22      	ldr	r2, [pc, #136]	; (800598c <HAL_TIM_PWM_Start+0x1dc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d018      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <HAL_TIM_PWM_Start+0x1e0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d013      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a1f      	ldr	r2, [pc, #124]	; (8005994 <HAL_TIM_PWM_Start+0x1e4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d00e      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a19      	ldr	r2, [pc, #100]	; (8005988 <HAL_TIM_PWM_Start+0x1d8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d009      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a1b      	ldr	r2, [pc, #108]	; (8005998 <HAL_TIM_PWM_Start+0x1e8>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <HAL_TIM_PWM_Start+0x18a>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a19      	ldr	r2, [pc, #100]	; (800599c <HAL_TIM_PWM_Start+0x1ec>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d115      	bne.n	8005966 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <HAL_TIM_PWM_Start+0x1f0>)
 8005942:	4013      	ands	r3, r2
 8005944:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2b06      	cmp	r3, #6
 800594a:	d015      	beq.n	8005978 <HAL_TIM_PWM_Start+0x1c8>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005952:	d011      	beq.n	8005978 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f042 0201 	orr.w	r2, r2, #1
 8005962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005964:	e008      	b.n	8005978 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0201 	orr.w	r2, r2, #1
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e000      	b.n	800597a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40010000 	.word	0x40010000
 8005988:	40010400 	.word	0x40010400
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40000c00 	.word	0x40000c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40001800 	.word	0x40001800
 80059a0:	00010007 	.word	0x00010007

080059a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d101      	bne.n	80059b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e08f      	b.n	8005ad8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059be:	b2db      	uxtb	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f7fc ff41 	bl	8002854 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2202      	movs	r2, #2
 80059d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6899      	ldr	r1, [r3, #8]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b3e      	ldr	r3, [pc, #248]	; (8005ae0 <HAL_TIM_Encoder_Init+0x13c>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	3304      	adds	r3, #4
 80059f2:	4619      	mov	r1, r3
 80059f4:	4610      	mov	r0, r2
 80059f6:	f000 fae7 	bl	8005fc8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a1c:	693a      	ldr	r2, [r7, #16]
 8005a1e:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_TIM_Encoder_Init+0x140>)
 8005a20:	4013      	ands	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	699b      	ldr	r3, [r3, #24]
 8005a2c:	021b      	lsls	r3, r3, #8
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4b2b      	ldr	r3, [pc, #172]	; (8005ae8 <HAL_TIM_Encoder_Init+0x144>)
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <HAL_TIM_Encoder_Init+0x148>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	68da      	ldr	r2, [r3, #12]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	021b      	lsls	r3, r3, #8
 8005a50:	4313      	orrs	r3, r2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	011a      	lsls	r2, r3, #4
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	031b      	lsls	r3, r3, #12
 8005a64:	4313      	orrs	r3, r2
 8005a66:	693a      	ldr	r2, [r7, #16]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005a72:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005a7a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	695b      	ldr	r3, [r3, #20]
 8005a84:	011b      	lsls	r3, r3, #4
 8005a86:	4313      	orrs	r3, r2
 8005a88:	68fa      	ldr	r2, [r7, #12]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	fffebff8 	.word	0xfffebff8
 8005ae4:	fffffcfc 	.word	0xfffffcfc
 8005ae8:	fffff3f3 	.word	0xfffff3f3
 8005aec:	ffff0f0f 	.word	0xffff0f0f

08005af0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b00:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b08:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b10:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b18:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d110      	bne.n	8005b42 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d102      	bne.n	8005b2c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b26:	7b7b      	ldrb	r3, [r7, #13]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d001      	beq.n	8005b30 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e069      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b40:	e031      	b.n	8005ba6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d110      	bne.n	8005b6a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d102      	bne.n	8005b54 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b4e:	7b3b      	ldrb	r3, [r7, #12]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d001      	beq.n	8005b58 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e055      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b68:	e01d      	b.n	8005ba6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b6a:	7bfb      	ldrb	r3, [r7, #15]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d108      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b70:	7bbb      	ldrb	r3, [r7, #14]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d105      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005b76:	7b7b      	ldrb	r3, [r7, #13]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d102      	bne.n	8005b82 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b7c:	7b3b      	ldrb	r3, [r7, #12]
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e03e      	b.n	8005c04 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2202      	movs	r2, #2
 8005b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2202      	movs	r2, #2
 8005b92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2202      	movs	r2, #2
 8005ba2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_TIM_Encoder_Start+0xc4>
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d008      	beq.n	8005bc4 <HAL_TIM_Encoder_Start+0xd4>
 8005bb2:	e00f      	b.n	8005bd4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	2100      	movs	r1, #0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f000 fd9b 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005bc2:	e016      	b.n	8005bf2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	2104      	movs	r1, #4
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f000 fd93 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005bd2:	e00e      	b.n	8005bf2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fd8b 	bl	80066f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2201      	movs	r2, #1
 8005be8:	2104      	movs	r1, #4
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fd84 	bl	80066f8 <TIM_CCxChannelCmd>
      break;
 8005bf0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0201 	orr.w	r2, r2, #1
 8005c00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d101      	bne.n	8005c2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c26:	2302      	movs	r3, #2
 8005c28:	e0ff      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b14      	cmp	r3, #20
 8005c36:	f200 80f0 	bhi.w	8005e1a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c3a:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005e1b 	.word	0x08005e1b
 8005c48:	08005e1b 	.word	0x08005e1b
 8005c4c:	08005e1b 	.word	0x08005e1b
 8005c50:	08005cd5 	.word	0x08005cd5
 8005c54:	08005e1b 	.word	0x08005e1b
 8005c58:	08005e1b 	.word	0x08005e1b
 8005c5c:	08005e1b 	.word	0x08005e1b
 8005c60:	08005d17 	.word	0x08005d17
 8005c64:	08005e1b 	.word	0x08005e1b
 8005c68:	08005e1b 	.word	0x08005e1b
 8005c6c:	08005e1b 	.word	0x08005e1b
 8005c70:	08005d57 	.word	0x08005d57
 8005c74:	08005e1b 	.word	0x08005e1b
 8005c78:	08005e1b 	.word	0x08005e1b
 8005c7c:	08005e1b 	.word	0x08005e1b
 8005c80:	08005d99 	.word	0x08005d99
 8005c84:	08005e1b 	.word	0x08005e1b
 8005c88:	08005e1b 	.word	0x08005e1b
 8005c8c:	08005e1b 	.word	0x08005e1b
 8005c90:	08005dd9 	.word	0x08005dd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f000 fa34 	bl	8006108 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	699a      	ldr	r2, [r3, #24]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f042 0208 	orr.w	r2, r2, #8
 8005cae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0204 	bic.w	r2, r2, #4
 8005cbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6999      	ldr	r1, [r3, #24]
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	619a      	str	r2, [r3, #24]
      break;
 8005cd2:	e0a5      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 fa86 	bl	80061ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	699a      	ldr	r2, [r3, #24]
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699a      	ldr	r2, [r3, #24]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6999      	ldr	r1, [r3, #24]
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	021a      	lsls	r2, r3, #8
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	619a      	str	r2, [r3, #24]
      break;
 8005d14:	e084      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f000 fadd 	bl	80062dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f042 0208 	orr.w	r2, r2, #8
 8005d30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f022 0204 	bic.w	r2, r2, #4
 8005d40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69d9      	ldr	r1, [r3, #28]
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	691a      	ldr	r2, [r3, #16]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	61da      	str	r2, [r3, #28]
      break;
 8005d54:	e064      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fb33 	bl	80063c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	69d9      	ldr	r1, [r3, #28]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	021a      	lsls	r2, r3, #8
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	430a      	orrs	r2, r1
 8005d94:	61da      	str	r2, [r3, #28]
      break;
 8005d96:	e043      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb6a 	bl	8006478 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0208 	orr.w	r2, r2, #8
 8005db2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0204 	bic.w	r2, r2, #4
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	691a      	ldr	r2, [r3, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005dd6:	e023      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	4618      	mov	r0, r3
 8005de0:	f000 fb9c 	bl	800651c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	021a      	lsls	r2, r3, #8
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	430a      	orrs	r2, r1
 8005e16:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005e18:	e002      	b.n	8005e20 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	75fb      	strb	r3, [r7, #23]
      break;
 8005e1e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop

08005e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d101      	bne.n	8005e50 <HAL_TIM_ConfigClockSource+0x1c>
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	e0b4      	b.n	8005fba <HAL_TIM_ConfigClockSource+0x186>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	4b56      	ldr	r3, [pc, #344]	; (8005fc4 <HAL_TIM_ConfigClockSource+0x190>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68ba      	ldr	r2, [r7, #8]
 8005e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e88:	d03e      	beq.n	8005f08 <HAL_TIM_ConfigClockSource+0xd4>
 8005e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8e:	f200 8087 	bhi.w	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e96:	f000 8086 	beq.w	8005fa6 <HAL_TIM_ConfigClockSource+0x172>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	d87f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea0:	2b70      	cmp	r3, #112	; 0x70
 8005ea2:	d01a      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0xa6>
 8005ea4:	2b70      	cmp	r3, #112	; 0x70
 8005ea6:	d87b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b60      	cmp	r3, #96	; 0x60
 8005eaa:	d050      	beq.n	8005f4e <HAL_TIM_ConfigClockSource+0x11a>
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d877      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b50      	cmp	r3, #80	; 0x50
 8005eb2:	d03c      	beq.n	8005f2e <HAL_TIM_ConfigClockSource+0xfa>
 8005eb4:	2b50      	cmp	r3, #80	; 0x50
 8005eb6:	d873      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b40      	cmp	r3, #64	; 0x40
 8005eba:	d058      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x13a>
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d86f      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b30      	cmp	r3, #48	; 0x30
 8005ec2:	d064      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d86b      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d060      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d867      	bhi.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d05c      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ed4:	2b10      	cmp	r3, #16
 8005ed6:	d05a      	beq.n	8005f8e <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	e062      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005eea:	f000 fbe5 	bl	80066b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	609a      	str	r2, [r3, #8]
      break;
 8005f06:	e04f      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f18:	f000 fbce 	bl	80066b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	689a      	ldr	r2, [r3, #8]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2a:	609a      	str	r2, [r3, #8]
      break;
 8005f2c:	e03c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	f000 fb42 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	2150      	movs	r1, #80	; 0x50
 8005f46:	4618      	mov	r0, r3
 8005f48:	f000 fb9b 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8005f4c:	e02c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f000 fb61 	bl	8006622 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2160      	movs	r1, #96	; 0x60
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 fb8b 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8005f6c:	e01c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f000 fb22 	bl	80065c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2140      	movs	r1, #64	; 0x40
 8005f86:	4618      	mov	r0, r3
 8005f88:	f000 fb7b 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8005f8c:	e00c      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4619      	mov	r1, r3
 8005f98:	4610      	mov	r0, r2
 8005f9a:	f000 fb72 	bl	8006682 <TIM_ITRx_SetConfig>
      break;
 8005f9e:	e003      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa4:	e000      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	fffeff88 	.word	0xfffeff88

08005fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
 8005fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4a40      	ldr	r2, [pc, #256]	; (80060dc <TIM_Base_SetConfig+0x114>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d013      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fe6:	d00f      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a3d      	ldr	r2, [pc, #244]	; (80060e0 <TIM_Base_SetConfig+0x118>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d00b      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a3c      	ldr	r2, [pc, #240]	; (80060e4 <TIM_Base_SetConfig+0x11c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a3b      	ldr	r2, [pc, #236]	; (80060e8 <TIM_Base_SetConfig+0x120>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0x40>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a3a      	ldr	r2, [pc, #232]	; (80060ec <TIM_Base_SetConfig+0x124>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d108      	bne.n	800601a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	68fa      	ldr	r2, [r7, #12]
 8006016:	4313      	orrs	r3, r2
 8006018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	4a2f      	ldr	r2, [pc, #188]	; (80060dc <TIM_Base_SetConfig+0x114>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d02b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006028:	d027      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4a2c      	ldr	r2, [pc, #176]	; (80060e0 <TIM_Base_SetConfig+0x118>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d023      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4a2b      	ldr	r2, [pc, #172]	; (80060e4 <TIM_Base_SetConfig+0x11c>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d01f      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	4a2a      	ldr	r2, [pc, #168]	; (80060e8 <TIM_Base_SetConfig+0x120>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d01b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a29      	ldr	r2, [pc, #164]	; (80060ec <TIM_Base_SetConfig+0x124>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d017      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	4a28      	ldr	r2, [pc, #160]	; (80060f0 <TIM_Base_SetConfig+0x128>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d013      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	4a27      	ldr	r2, [pc, #156]	; (80060f4 <TIM_Base_SetConfig+0x12c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d00f      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a26      	ldr	r2, [pc, #152]	; (80060f8 <TIM_Base_SetConfig+0x130>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d00b      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <TIM_Base_SetConfig+0x134>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d007      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a24      	ldr	r2, [pc, #144]	; (8006100 <TIM_Base_SetConfig+0x138>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d003      	beq.n	800607a <TIM_Base_SetConfig+0xb2>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a23      	ldr	r2, [pc, #140]	; (8006104 <TIM_Base_SetConfig+0x13c>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d108      	bne.n	800608c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	68fa      	ldr	r2, [r7, #12]
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	695b      	ldr	r3, [r3, #20]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689a      	ldr	r2, [r3, #8]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <TIM_Base_SetConfig+0x114>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0xf8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <TIM_Base_SetConfig+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d103      	bne.n	80060c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	691a      	ldr	r2, [r3, #16]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	615a      	str	r2, [r3, #20]
}
 80060ce:	bf00      	nop
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	40010000 	.word	0x40010000
 80060e0:	40000400 	.word	0x40000400
 80060e4:	40000800 	.word	0x40000800
 80060e8:	40000c00 	.word	0x40000c00
 80060ec:	40010400 	.word	0x40010400
 80060f0:	40014000 	.word	0x40014000
 80060f4:	40014400 	.word	0x40014400
 80060f8:	40014800 	.word	0x40014800
 80060fc:	40001800 	.word	0x40001800
 8006100:	40001c00 	.word	0x40001c00
 8006104:	40002000 	.word	0x40002000

08006108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006108:	b480      	push	{r7}
 800610a:	b087      	sub	sp, #28
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	4b2b      	ldr	r3, [pc, #172]	; (80061e0 <TIM_OC1_SetConfig+0xd8>)
 8006134:	4013      	ands	r3, r2
 8006136:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f023 0303 	bic.w	r3, r3, #3
 800613e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4313      	orrs	r3, r2
 8006148:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f023 0302 	bic.w	r3, r3, #2
 8006150:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	4313      	orrs	r3, r2
 800615a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	4a21      	ldr	r2, [pc, #132]	; (80061e4 <TIM_OC1_SetConfig+0xdc>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d003      	beq.n	800616c <TIM_OC1_SetConfig+0x64>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4a20      	ldr	r2, [pc, #128]	; (80061e8 <TIM_OC1_SetConfig+0xe0>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d10c      	bne.n	8006186 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0308 	bic.w	r3, r3, #8
 8006172:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 0304 	bic.w	r3, r3, #4
 8006184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a16      	ldr	r2, [pc, #88]	; (80061e4 <TIM_OC1_SetConfig+0xdc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d003      	beq.n	8006196 <TIM_OC1_SetConfig+0x8e>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a15      	ldr	r2, [pc, #84]	; (80061e8 <TIM_OC1_SetConfig+0xe0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d111      	bne.n	80061ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	fffeff8f 	.word	0xfffeff8f
 80061e4:	40010000 	.word	0x40010000
 80061e8:	40010400 	.word	0x40010400

080061ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b087      	sub	sp, #28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	f023 0210 	bic.w	r2, r3, #16
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	699b      	ldr	r3, [r3, #24]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4b2e      	ldr	r3, [pc, #184]	; (80062d0 <TIM_OC2_SetConfig+0xe4>)
 8006218:	4013      	ands	r3, r2
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f023 0320 	bic.w	r3, r3, #32
 8006236:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	011b      	lsls	r3, r3, #4
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	4313      	orrs	r3, r2
 8006242:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <TIM_OC2_SetConfig+0xe8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d003      	beq.n	8006254 <TIM_OC2_SetConfig+0x68>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <TIM_OC2_SetConfig+0xec>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d10d      	bne.n	8006270 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800625a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	011b      	lsls	r3, r3, #4
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	4313      	orrs	r3, r2
 8006266:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800626e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a18      	ldr	r2, [pc, #96]	; (80062d4 <TIM_OC2_SetConfig+0xe8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d003      	beq.n	8006280 <TIM_OC2_SetConfig+0x94>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a17      	ldr	r2, [pc, #92]	; (80062d8 <TIM_OC2_SetConfig+0xec>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	feff8fff 	.word	0xfeff8fff
 80062d4:	40010000 	.word	0x40010000
 80062d8:	40010400 	.word	0x40010400

080062dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006304:	68fa      	ldr	r2, [r7, #12]
 8006306:	4b2d      	ldr	r3, [pc, #180]	; (80063bc <TIM_OC3_SetConfig+0xe0>)
 8006308:	4013      	ands	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	4313      	orrs	r3, r2
 8006330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a22      	ldr	r2, [pc, #136]	; (80063c0 <TIM_OC3_SetConfig+0xe4>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d003      	beq.n	8006342 <TIM_OC3_SetConfig+0x66>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a21      	ldr	r2, [pc, #132]	; (80063c4 <TIM_OC3_SetConfig+0xe8>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d10d      	bne.n	800635e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	021b      	lsls	r3, r3, #8
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800635c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <TIM_OC3_SetConfig+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d003      	beq.n	800636e <TIM_OC3_SetConfig+0x92>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <TIM_OC3_SetConfig+0xe8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d113      	bne.n	8006396 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800637c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	011b      	lsls	r3, r3, #4
 8006384:	693a      	ldr	r2, [r7, #16]
 8006386:	4313      	orrs	r3, r2
 8006388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	4313      	orrs	r3, r2
 8006394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	697a      	ldr	r2, [r7, #20]
 80063ae:	621a      	str	r2, [r3, #32]
}
 80063b0:	bf00      	nop
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	fffeff8f 	.word	0xfffeff8f
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a1b      	ldr	r3, [r3, #32]
 80063d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	69db      	ldr	r3, [r3, #28]
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	4b1e      	ldr	r3, [pc, #120]	; (800646c <TIM_OC4_SetConfig+0xa4>)
 80063f4:	4013      	ands	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	021b      	lsls	r3, r3, #8
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006412:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	031b      	lsls	r3, r3, #12
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4a13      	ldr	r2, [pc, #76]	; (8006470 <TIM_OC4_SetConfig+0xa8>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d003      	beq.n	8006430 <TIM_OC4_SetConfig+0x68>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	4a12      	ldr	r2, [pc, #72]	; (8006474 <TIM_OC4_SetConfig+0xac>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d109      	bne.n	8006444 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006436:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	019b      	lsls	r3, r3, #6
 800643e:	697a      	ldr	r2, [r7, #20]
 8006440:	4313      	orrs	r3, r2
 8006442:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	697a      	ldr	r2, [r7, #20]
 8006448:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	68fa      	ldr	r2, [r7, #12]
 800644e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	621a      	str	r2, [r3, #32]
}
 800645e:	bf00      	nop
 8006460:	371c      	adds	r7, #28
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop
 800646c:	feff8fff 	.word	0xfeff8fff
 8006470:	40010000 	.word	0x40010000
 8006474:	40010400 	.word	0x40010400

08006478 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006478:	b480      	push	{r7}
 800647a:	b087      	sub	sp, #28
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6a1b      	ldr	r3, [r3, #32]
 8006492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800649e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4b1b      	ldr	r3, [pc, #108]	; (8006510 <TIM_OC5_SetConfig+0x98>)
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80064b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	041b      	lsls	r3, r3, #16
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a12      	ldr	r2, [pc, #72]	; (8006514 <TIM_OC5_SetConfig+0x9c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d003      	beq.n	80064d6 <TIM_OC5_SetConfig+0x5e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a11      	ldr	r2, [pc, #68]	; (8006518 <TIM_OC5_SetConfig+0xa0>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d109      	bne.n	80064ea <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	021b      	lsls	r3, r3, #8
 80064e4:	697a      	ldr	r2, [r7, #20]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	621a      	str	r2, [r3, #32]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	fffeff8f 	.word	0xfffeff8f
 8006514:	40010000 	.word	0x40010000
 8006518:	40010400 	.word	0x40010400

0800651c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4b1c      	ldr	r3, [pc, #112]	; (80065b8 <TIM_OC6_SetConfig+0x9c>)
 8006548:	4013      	ands	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	021b      	lsls	r3, r3, #8
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800655e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	051b      	lsls	r3, r3, #20
 8006566:	693a      	ldr	r2, [r7, #16]
 8006568:	4313      	orrs	r3, r2
 800656a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a13      	ldr	r2, [pc, #76]	; (80065bc <TIM_OC6_SetConfig+0xa0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_OC6_SetConfig+0x60>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	; (80065c0 <TIM_OC6_SetConfig+0xa4>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d109      	bne.n	8006590 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006582:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	029b      	lsls	r3, r3, #10
 800658a:	697a      	ldr	r2, [r7, #20]
 800658c:	4313      	orrs	r3, r2
 800658e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	697a      	ldr	r2, [r7, #20]
 8006594:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685a      	ldr	r2, [r3, #4]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	621a      	str	r2, [r3, #32]
}
 80065aa:	bf00      	nop
 80065ac:	371c      	adds	r7, #28
 80065ae:	46bd      	mov	sp, r7
 80065b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b4:	4770      	bx	lr
 80065b6:	bf00      	nop
 80065b8:	feff8fff 	.word	0xfeff8fff
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40010400 	.word	0x40010400

080065c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f023 0201 	bic.w	r2, r3, #1
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	011b      	lsls	r3, r3, #4
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f023 030a 	bic.w	r3, r3, #10
 8006600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	4313      	orrs	r3, r2
 8006608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	621a      	str	r2, [r3, #32]
}
 8006616:	bf00      	nop
 8006618:	371c      	adds	r7, #28
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006622:	b480      	push	{r7}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	f023 0210 	bic.w	r2, r3, #16
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6a1b      	ldr	r3, [r3, #32]
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800664c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	031b      	lsls	r3, r3, #12
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800665e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	011b      	lsls	r3, r3, #4
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	693a      	ldr	r2, [r7, #16]
 8006674:	621a      	str	r2, [r3, #32]
}
 8006676:	bf00      	nop
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr

08006682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006682:	b480      	push	{r7}
 8006684:	b085      	sub	sp, #20
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	4313      	orrs	r3, r2
 80066a0:	f043 0307 	orr.w	r3, r3, #7
 80066a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
}
 80066ac:	bf00      	nop
 80066ae:	3714      	adds	r7, #20
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b087      	sub	sp, #28
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	021a      	lsls	r2, r3, #8
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	431a      	orrs	r2, r3
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	4313      	orrs	r3, r2
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr

080066f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b087      	sub	sp, #28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	f003 031f 	and.w	r3, r3, #31
 800670a:	2201      	movs	r2, #1
 800670c:	fa02 f303 	lsl.w	r3, r2, r3
 8006710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6a1a      	ldr	r2, [r3, #32]
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	43db      	mvns	r3, r3
 800671a:	401a      	ands	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6a1a      	ldr	r2, [r3, #32]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 031f 	and.w	r3, r3, #31
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	fa01 f303 	lsl.w	r3, r1, r3
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	621a      	str	r2, [r3, #32]
}
 8006736:	bf00      	nop
 8006738:	371c      	adds	r7, #28
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006758:	2302      	movs	r3, #2
 800675a:	e06d      	b.n	8006838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a30      	ldr	r2, [pc, #192]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d004      	beq.n	8006790 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a2f      	ldr	r2, [pc, #188]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d108      	bne.n	80067a2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006796:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a20      	ldr	r2, [pc, #128]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d022      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ce:	d01d      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1d      	ldr	r2, [pc, #116]	; (800684c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d018      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a1c      	ldr	r2, [pc, #112]	; (8006850 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d013      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a1a      	ldr	r2, [pc, #104]	; (8006854 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d00e      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a15      	ldr	r2, [pc, #84]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a16      	ldr	r2, [pc, #88]	; (8006858 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d004      	beq.n	800680c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a15      	ldr	r2, [pc, #84]	; (800685c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d10c      	bne.n	8006826 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006812:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	689b      	ldr	r3, [r3, #8]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	4313      	orrs	r3, r2
 800681c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3714      	adds	r7, #20
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40001800 	.word	0x40001800

08006860 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	e040      	b.n	80068f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fc f882 	bl	800298c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2224      	movs	r2, #36	; 0x24
 800688c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f022 0201 	bic.w	r2, r2, #1
 800689c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f974 	bl	8006b8c <UART_SetConfig>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e022      	b.n	80068f4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d002      	beq.n	80068bc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fbcc 	bl	8007054 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	689a      	ldr	r2, [r3, #8]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 fc53 	bl	8007198 <UART_CheckIdleState>
 80068f2:	4603      	mov	r3, r0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b08a      	sub	sp, #40	; 0x28
 8006900:	af02      	add	r7, sp, #8
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	603b      	str	r3, [r7, #0]
 8006908:	4613      	mov	r3, r2
 800690a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006910:	2b20      	cmp	r3, #32
 8006912:	d171      	bne.n	80069f8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d002      	beq.n	8006920 <HAL_UART_Transmit+0x24>
 800691a:	88fb      	ldrh	r3, [r7, #6]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	e06a      	b.n	80069fa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2221      	movs	r2, #33	; 0x21
 8006930:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006932:	f7fc fa81 	bl	8002e38 <HAL_GetTick>
 8006936:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006950:	d108      	bne.n	8006964 <HAL_UART_Transmit+0x68>
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d104      	bne.n	8006964 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	e003      	b.n	800696c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006968:	2300      	movs	r3, #0
 800696a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800696c:	e02c      	b.n	80069c8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	2180      	movs	r1, #128	; 0x80
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fc44 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e038      	b.n	80069fa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3302      	adds	r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e007      	b.n	80069b6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1cc      	bne.n	800696e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	2140      	movs	r1, #64	; 0x40
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 fc11 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e005      	b.n	80069fa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b08a      	sub	sp, #40	; 0x28
 8006a06:	af02      	add	r7, sp, #8
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	603b      	str	r3, [r7, #0]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a18:	2b20      	cmp	r3, #32
 8006a1a:	f040 80b1 	bne.w	8006b80 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <HAL_UART_Receive+0x28>
 8006a24:	88fb      	ldrh	r3, [r7, #6]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d101      	bne.n	8006a2e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	e0a9      	b.n	8006b82 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2222      	movs	r2, #34	; 0x22
 8006a3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a44:	f7fc f9f8 	bl	8002e38 <HAL_GetTick>
 8006a48:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	88fa      	ldrh	r2, [r7, #6]
 8006a4e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	88fa      	ldrh	r2, [r7, #6]
 8006a56:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d10e      	bne.n	8006a82 <HAL_UART_Receive+0x80>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d105      	bne.n	8006a78 <HAL_UART_Receive+0x76>
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a76:	e02d      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	22ff      	movs	r2, #255	; 0xff
 8006a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a80:	e028      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10d      	bne.n	8006aa6 <HAL_UART_Receive+0xa4>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <HAL_UART_Receive+0x9a>
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	; 0xff
 8006a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a9a:	e01b      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	227f      	movs	r2, #127	; 0x7f
 8006aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aa4:	e016      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aae:	d10d      	bne.n	8006acc <HAL_UART_Receive+0xca>
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_UART_Receive+0xc0>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	227f      	movs	r2, #127	; 0x7f
 8006abc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ac0:	e008      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	223f      	movs	r2, #63	; 0x3f
 8006ac6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006aca:	e003      	b.n	8006ad4 <HAL_UART_Receive+0xd2>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ada:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae4:	d108      	bne.n	8006af8 <HAL_UART_Receive+0xf6>
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	691b      	ldr	r3, [r3, #16]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d104      	bne.n	8006af8 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e003      	b.n	8006b00 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b00:	e032      	b.n	8006b68 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	2120      	movs	r1, #32
 8006b0c:	68f8      	ldr	r0, [r7, #12]
 8006b0e:	f000 fb7a 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 8006b12:	4603      	mov	r3, r0
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d001      	beq.n	8006b1c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e032      	b.n	8006b82 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10c      	bne.n	8006b3c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	8a7b      	ldrh	r3, [r7, #18]
 8006b2c:	4013      	ands	r3, r2
 8006b2e:	b29a      	uxth	r2, r3
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	3302      	adds	r3, #2
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e00c      	b.n	8006b56 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	8a7b      	ldrh	r3, [r7, #18]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	4013      	ands	r3, r2
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1c6      	bne.n	8006b02 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	e000      	b.n	8006b82 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8006b80:	2302      	movs	r3, #2
  }
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3720      	adds	r7, #32
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
	...

08006b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b088      	sub	sp, #32
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b94:	2300      	movs	r3, #0
 8006b96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689a      	ldr	r2, [r3, #8]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	691b      	ldr	r3, [r3, #16]
 8006ba0:	431a      	orrs	r2, r3
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69db      	ldr	r3, [r3, #28]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	4ba6      	ldr	r3, [pc, #664]	; (8006e50 <UART_SetConfig+0x2c4>)
 8006bb8:	4013      	ands	r3, r2
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	6812      	ldr	r2, [r2, #0]
 8006bbe:	6979      	ldr	r1, [r7, #20]
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68da      	ldr	r2, [r3, #12]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	4313      	orrs	r3, r2
 8006be8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a94      	ldr	r2, [pc, #592]	; (8006e54 <UART_SetConfig+0x2c8>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d120      	bne.n	8006c4a <UART_SetConfig+0xbe>
 8006c08:	4b93      	ldr	r3, [pc, #588]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0e:	f003 0303 	and.w	r3, r3, #3
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d816      	bhi.n	8006c44 <UART_SetConfig+0xb8>
 8006c16:	a201      	add	r2, pc, #4	; (adr r2, 8006c1c <UART_SetConfig+0x90>)
 8006c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1c:	08006c2d 	.word	0x08006c2d
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c33 	.word	0x08006c33
 8006c28:	08006c3f 	.word	0x08006c3f
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	77fb      	strb	r3, [r7, #31]
 8006c30:	e150      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006c32:	2302      	movs	r3, #2
 8006c34:	77fb      	strb	r3, [r7, #31]
 8006c36:	e14d      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	77fb      	strb	r3, [r7, #31]
 8006c3c:	e14a      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006c3e:	2308      	movs	r3, #8
 8006c40:	77fb      	strb	r3, [r7, #31]
 8006c42:	e147      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006c44:	2310      	movs	r3, #16
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e144      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a83      	ldr	r2, [pc, #524]	; (8006e5c <UART_SetConfig+0x2d0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d132      	bne.n	8006cba <UART_SetConfig+0x12e>
 8006c54:	4b80      	ldr	r3, [pc, #512]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c5a:	f003 030c 	and.w	r3, r3, #12
 8006c5e:	2b0c      	cmp	r3, #12
 8006c60:	d828      	bhi.n	8006cb4 <UART_SetConfig+0x128>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0xdc>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c9d 	.word	0x08006c9d
 8006c6c:	08006cb5 	.word	0x08006cb5
 8006c70:	08006cb5 	.word	0x08006cb5
 8006c74:	08006cb5 	.word	0x08006cb5
 8006c78:	08006ca9 	.word	0x08006ca9
 8006c7c:	08006cb5 	.word	0x08006cb5
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006cb5 	.word	0x08006cb5
 8006c88:	08006ca3 	.word	0x08006ca3
 8006c8c:	08006cb5 	.word	0x08006cb5
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cb5 	.word	0x08006cb5
 8006c98:	08006caf 	.word	0x08006caf
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e118      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006ca2:	2302      	movs	r3, #2
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e115      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006ca8:	2304      	movs	r3, #4
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e112      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cae:	2308      	movs	r3, #8
 8006cb0:	77fb      	strb	r3, [r7, #31]
 8006cb2:	e10f      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	77fb      	strb	r3, [r7, #31]
 8006cb8:	e10c      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a68      	ldr	r2, [pc, #416]	; (8006e60 <UART_SetConfig+0x2d4>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d120      	bne.n	8006d06 <UART_SetConfig+0x17a>
 8006cc4:	4b64      	ldr	r3, [pc, #400]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006cce:	2b30      	cmp	r3, #48	; 0x30
 8006cd0:	d013      	beq.n	8006cfa <UART_SetConfig+0x16e>
 8006cd2:	2b30      	cmp	r3, #48	; 0x30
 8006cd4:	d814      	bhi.n	8006d00 <UART_SetConfig+0x174>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	d009      	beq.n	8006cee <UART_SetConfig+0x162>
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d810      	bhi.n	8006d00 <UART_SetConfig+0x174>
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <UART_SetConfig+0x15c>
 8006ce2:	2b10      	cmp	r3, #16
 8006ce4:	d006      	beq.n	8006cf4 <UART_SetConfig+0x168>
 8006ce6:	e00b      	b.n	8006d00 <UART_SetConfig+0x174>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e0f2      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e0ef      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e0ec      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006cfa:	2308      	movs	r3, #8
 8006cfc:	77fb      	strb	r3, [r7, #31]
 8006cfe:	e0e9      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d00:	2310      	movs	r3, #16
 8006d02:	77fb      	strb	r3, [r7, #31]
 8006d04:	e0e6      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a56      	ldr	r2, [pc, #344]	; (8006e64 <UART_SetConfig+0x2d8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d120      	bne.n	8006d52 <UART_SetConfig+0x1c6>
 8006d10:	4b51      	ldr	r3, [pc, #324]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d1c:	d013      	beq.n	8006d46 <UART_SetConfig+0x1ba>
 8006d1e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d20:	d814      	bhi.n	8006d4c <UART_SetConfig+0x1c0>
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d009      	beq.n	8006d3a <UART_SetConfig+0x1ae>
 8006d26:	2b80      	cmp	r3, #128	; 0x80
 8006d28:	d810      	bhi.n	8006d4c <UART_SetConfig+0x1c0>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <UART_SetConfig+0x1a8>
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d006      	beq.n	8006d40 <UART_SetConfig+0x1b4>
 8006d32:	e00b      	b.n	8006d4c <UART_SetConfig+0x1c0>
 8006d34:	2300      	movs	r3, #0
 8006d36:	77fb      	strb	r3, [r7, #31]
 8006d38:	e0cc      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e0c9      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d40:	2304      	movs	r3, #4
 8006d42:	77fb      	strb	r3, [r7, #31]
 8006d44:	e0c6      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d46:	2308      	movs	r3, #8
 8006d48:	77fb      	strb	r3, [r7, #31]
 8006d4a:	e0c3      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d4c:	2310      	movs	r3, #16
 8006d4e:	77fb      	strb	r3, [r7, #31]
 8006d50:	e0c0      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a44      	ldr	r2, [pc, #272]	; (8006e68 <UART_SetConfig+0x2dc>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d125      	bne.n	8006da8 <UART_SetConfig+0x21c>
 8006d5c:	4b3e      	ldr	r3, [pc, #248]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d6a:	d017      	beq.n	8006d9c <UART_SetConfig+0x210>
 8006d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d70:	d817      	bhi.n	8006da2 <UART_SetConfig+0x216>
 8006d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d76:	d00b      	beq.n	8006d90 <UART_SetConfig+0x204>
 8006d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d7c:	d811      	bhi.n	8006da2 <UART_SetConfig+0x216>
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <UART_SetConfig+0x1fe>
 8006d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d86:	d006      	beq.n	8006d96 <UART_SetConfig+0x20a>
 8006d88:	e00b      	b.n	8006da2 <UART_SetConfig+0x216>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0a1      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d90:	2302      	movs	r3, #2
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e09e      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d96:	2304      	movs	r3, #4
 8006d98:	77fb      	strb	r3, [r7, #31]
 8006d9a:	e09b      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006d9c:	2308      	movs	r3, #8
 8006d9e:	77fb      	strb	r3, [r7, #31]
 8006da0:	e098      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006da2:	2310      	movs	r3, #16
 8006da4:	77fb      	strb	r3, [r7, #31]
 8006da6:	e095      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a2f      	ldr	r2, [pc, #188]	; (8006e6c <UART_SetConfig+0x2e0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d125      	bne.n	8006dfe <UART_SetConfig+0x272>
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc0:	d017      	beq.n	8006df2 <UART_SetConfig+0x266>
 8006dc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006dc6:	d817      	bhi.n	8006df8 <UART_SetConfig+0x26c>
 8006dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dcc:	d00b      	beq.n	8006de6 <UART_SetConfig+0x25a>
 8006dce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dd2:	d811      	bhi.n	8006df8 <UART_SetConfig+0x26c>
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <UART_SetConfig+0x254>
 8006dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ddc:	d006      	beq.n	8006dec <UART_SetConfig+0x260>
 8006dde:	e00b      	b.n	8006df8 <UART_SetConfig+0x26c>
 8006de0:	2301      	movs	r3, #1
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e076      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006de6:	2302      	movs	r3, #2
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e073      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006dec:	2304      	movs	r3, #4
 8006dee:	77fb      	strb	r3, [r7, #31]
 8006df0:	e070      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006df2:	2308      	movs	r3, #8
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e06d      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	77fb      	strb	r3, [r7, #31]
 8006dfc:	e06a      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1b      	ldr	r2, [pc, #108]	; (8006e70 <UART_SetConfig+0x2e4>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d138      	bne.n	8006e7a <UART_SetConfig+0x2ee>
 8006e08:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <UART_SetConfig+0x2cc>)
 8006e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e0e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e12:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e16:	d017      	beq.n	8006e48 <UART_SetConfig+0x2bc>
 8006e18:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e1c:	d82a      	bhi.n	8006e74 <UART_SetConfig+0x2e8>
 8006e1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e22:	d00b      	beq.n	8006e3c <UART_SetConfig+0x2b0>
 8006e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e28:	d824      	bhi.n	8006e74 <UART_SetConfig+0x2e8>
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d003      	beq.n	8006e36 <UART_SetConfig+0x2aa>
 8006e2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e32:	d006      	beq.n	8006e42 <UART_SetConfig+0x2b6>
 8006e34:	e01e      	b.n	8006e74 <UART_SetConfig+0x2e8>
 8006e36:	2300      	movs	r3, #0
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e04b      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e048      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006e42:	2304      	movs	r3, #4
 8006e44:	77fb      	strb	r3, [r7, #31]
 8006e46:	e045      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006e48:	2308      	movs	r3, #8
 8006e4a:	77fb      	strb	r3, [r7, #31]
 8006e4c:	e042      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006e4e:	bf00      	nop
 8006e50:	efff69f3 	.word	0xefff69f3
 8006e54:	40011000 	.word	0x40011000
 8006e58:	40023800 	.word	0x40023800
 8006e5c:	40004400 	.word	0x40004400
 8006e60:	40004800 	.word	0x40004800
 8006e64:	40004c00 	.word	0x40004c00
 8006e68:	40005000 	.word	0x40005000
 8006e6c:	40011400 	.word	0x40011400
 8006e70:	40007800 	.word	0x40007800
 8006e74:	2310      	movs	r3, #16
 8006e76:	77fb      	strb	r3, [r7, #31]
 8006e78:	e02c      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a72      	ldr	r2, [pc, #456]	; (8007048 <UART_SetConfig+0x4bc>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d125      	bne.n	8006ed0 <UART_SetConfig+0x344>
 8006e84:	4b71      	ldr	r3, [pc, #452]	; (800704c <UART_SetConfig+0x4c0>)
 8006e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e92:	d017      	beq.n	8006ec4 <UART_SetConfig+0x338>
 8006e94:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e98:	d817      	bhi.n	8006eca <UART_SetConfig+0x33e>
 8006e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9e:	d00b      	beq.n	8006eb8 <UART_SetConfig+0x32c>
 8006ea0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ea4:	d811      	bhi.n	8006eca <UART_SetConfig+0x33e>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <UART_SetConfig+0x326>
 8006eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006eae:	d006      	beq.n	8006ebe <UART_SetConfig+0x332>
 8006eb0:	e00b      	b.n	8006eca <UART_SetConfig+0x33e>
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	77fb      	strb	r3, [r7, #31]
 8006eb6:	e00d      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	77fb      	strb	r3, [r7, #31]
 8006ebc:	e00a      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006ebe:	2304      	movs	r3, #4
 8006ec0:	77fb      	strb	r3, [r7, #31]
 8006ec2:	e007      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	77fb      	strb	r3, [r7, #31]
 8006ec8:	e004      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006eca:	2310      	movs	r3, #16
 8006ecc:	77fb      	strb	r3, [r7, #31]
 8006ece:	e001      	b.n	8006ed4 <UART_SetConfig+0x348>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006edc:	d15b      	bne.n	8006f96 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006ede:	7ffb      	ldrb	r3, [r7, #31]
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d828      	bhi.n	8006f36 <UART_SetConfig+0x3aa>
 8006ee4:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <UART_SetConfig+0x360>)
 8006ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eea:	bf00      	nop
 8006eec:	08006f11 	.word	0x08006f11
 8006ef0:	08006f19 	.word	0x08006f19
 8006ef4:	08006f21 	.word	0x08006f21
 8006ef8:	08006f37 	.word	0x08006f37
 8006efc:	08006f27 	.word	0x08006f27
 8006f00:	08006f37 	.word	0x08006f37
 8006f04:	08006f37 	.word	0x08006f37
 8006f08:	08006f37 	.word	0x08006f37
 8006f0c:	08006f2f 	.word	0x08006f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f10:	f7fd ff7e 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8006f14:	61b8      	str	r0, [r7, #24]
        break;
 8006f16:	e013      	b.n	8006f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f18:	f7fd ff8e 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8006f1c:	61b8      	str	r0, [r7, #24]
        break;
 8006f1e:	e00f      	b.n	8006f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f20:	4b4b      	ldr	r3, [pc, #300]	; (8007050 <UART_SetConfig+0x4c4>)
 8006f22:	61bb      	str	r3, [r7, #24]
        break;
 8006f24:	e00c      	b.n	8006f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f26:	f7fd fe61 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006f2a:	61b8      	str	r0, [r7, #24]
        break;
 8006f2c:	e008      	b.n	8006f40 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f32:	61bb      	str	r3, [r7, #24]
        break;
 8006f34:	e004      	b.n	8006f40 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006f36:	2300      	movs	r3, #0
 8006f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d074      	beq.n	8007030 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	005a      	lsls	r2, r3, #1
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	085b      	lsrs	r3, r3, #1
 8006f50:	441a      	add	r2, r3
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f5a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	2b0f      	cmp	r3, #15
 8006f60:	d916      	bls.n	8006f90 <UART_SetConfig+0x404>
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f68:	d212      	bcs.n	8006f90 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	f023 030f 	bic.w	r3, r3, #15
 8006f72:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	085b      	lsrs	r3, r3, #1
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	89fb      	ldrh	r3, [r7, #14]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	89fa      	ldrh	r2, [r7, #14]
 8006f8c:	60da      	str	r2, [r3, #12]
 8006f8e:	e04f      	b.n	8007030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	77bb      	strb	r3, [r7, #30]
 8006f94:	e04c      	b.n	8007030 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f96:	7ffb      	ldrb	r3, [r7, #31]
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d828      	bhi.n	8006fee <UART_SetConfig+0x462>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x418>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fef 	.word	0x08006fef
 8006fbc:	08006fef 	.word	0x08006fef
 8006fc0:	08006fef 	.word	0x08006fef
 8006fc4:	08006fe7 	.word	0x08006fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fd ff22 	bl	8004e10 <HAL_RCC_GetPCLK1Freq>
 8006fcc:	61b8      	str	r0, [r7, #24]
        break;
 8006fce:	e013      	b.n	8006ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd0:	f7fd ff32 	bl	8004e38 <HAL_RCC_GetPCLK2Freq>
 8006fd4:	61b8      	str	r0, [r7, #24]
        break;
 8006fd6:	e00f      	b.n	8006ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd8:	4b1d      	ldr	r3, [pc, #116]	; (8007050 <UART_SetConfig+0x4c4>)
 8006fda:	61bb      	str	r3, [r7, #24]
        break;
 8006fdc:	e00c      	b.n	8006ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fde:	f7fd fe05 	bl	8004bec <HAL_RCC_GetSysClockFreq>
 8006fe2:	61b8      	str	r0, [r7, #24]
        break;
 8006fe4:	e008      	b.n	8006ff8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fea:	61bb      	str	r3, [r7, #24]
        break;
 8006fec:	e004      	b.n	8006ff8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	77bb      	strb	r3, [r7, #30]
        break;
 8006ff6:	bf00      	nop
    }

    if (pclk != 0U)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d018      	beq.n	8007030 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	085a      	lsrs	r2, r3, #1
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	441a      	add	r2, r3
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007010:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d909      	bls.n	800702c <UART_SetConfig+0x4a0>
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701e:	d205      	bcs.n	800702c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	b29a      	uxth	r2, r3
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	60da      	str	r2, [r3, #12]
 800702a:	e001      	b.n	8007030 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800702c:	2301      	movs	r3, #1
 800702e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800703c:	7fbb      	ldrb	r3, [r7, #30]
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	40007c00 	.word	0x40007c00
 800704c:	40023800 	.word	0x40023800
 8007050:	00f42400 	.word	0x00f42400

08007054 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	f003 0301 	and.w	r3, r3, #1
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00a      	beq.n	800707e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	430a      	orrs	r2, r1
 800707c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007082:	f003 0302 	and.w	r3, r3, #2
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00a      	beq.n	80070a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	430a      	orrs	r2, r1
 800709e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a4:	f003 0304 	and.w	r3, r3, #4
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00a      	beq.n	80070c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	430a      	orrs	r2, r1
 80070c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e8:	f003 0310 	and.w	r3, r3, #16
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	430a      	orrs	r2, r1
 8007104:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710a:	f003 0320 	and.w	r3, r3, #32
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007130:	2b00      	cmp	r3, #0
 8007132:	d01a      	beq.n	800716a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	430a      	orrs	r2, r1
 8007148:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800714e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007152:	d10a      	bne.n	800716a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	430a      	orrs	r2, r1
 8007168:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00a      	beq.n	800718c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	430a      	orrs	r2, r1
 800718a:	605a      	str	r2, [r3, #4]
  }
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af02      	add	r7, sp, #8
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071a8:	f7fb fe46 	bl	8002e38 <HAL_GetTick>
 80071ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b08      	cmp	r3, #8
 80071ba:	d10e      	bne.n	80071da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 f81b 	bl	8007206 <UART_WaitOnFlagUntilTimeout>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e011      	b.n	80071fe <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2220      	movs	r2, #32
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3710      	adds	r7, #16
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b09c      	sub	sp, #112	; 0x70
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	60b9      	str	r1, [r7, #8]
 8007210:	603b      	str	r3, [r7, #0]
 8007212:	4613      	mov	r3, r2
 8007214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007216:	e0a7      	b.n	8007368 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	f000 80a3 	beq.w	8007368 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fb fe09 	bl	8002e38 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <UART_WaitOnFlagUntilTimeout+0x32>
 8007232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007234:	2b00      	cmp	r3, #0
 8007236:	d13f      	bne.n	80072b8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800724c:	667b      	str	r3, [r7, #100]	; 0x64
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007256:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007258:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800725c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e6      	bne.n	8007238 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800727a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	663b      	str	r3, [r7, #96]	; 0x60
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800728a:	64ba      	str	r2, [r7, #72]	; 0x48
 800728c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2220      	movs	r2, #32
 80072a2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2220      	movs	r2, #32
 80072a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e068      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d050      	beq.n	8007368 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d4:	d148      	bne.n	8007368 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	461a      	mov	r2, r3
 80072fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007300:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007302:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007306:	e841 2300 	strex	r3, r2, [r1]
 800730a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1e6      	bne.n	80072e0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	3308      	adds	r3, #8
 8007318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	e853 3f00 	ldrex	r3, [r3]
 8007320:	613b      	str	r3, [r7, #16]
   return(result);
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	f023 0301 	bic.w	r3, r3, #1
 8007328:	66bb      	str	r3, [r7, #104]	; 0x68
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3308      	adds	r3, #8
 8007330:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007332:	623a      	str	r2, [r7, #32]
 8007334:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007336:	69f9      	ldr	r1, [r7, #28]
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	e841 2300 	strex	r3, r2, [r1]
 800733e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1e5      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2220      	movs	r2, #32
 800734a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2220      	movs	r2, #32
 8007350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2220      	movs	r2, #32
 8007358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e010      	b.n	800738a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69da      	ldr	r2, [r3, #28]
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4013      	ands	r3, r2
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	429a      	cmp	r2, r3
 8007376:	bf0c      	ite	eq
 8007378:	2301      	moveq	r3, #1
 800737a:	2300      	movne	r3, #0
 800737c:	b2db      	uxtb	r3, r3
 800737e:	461a      	mov	r2, r3
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	429a      	cmp	r2, r3
 8007384:	f43f af48 	beq.w	8007218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3770      	adds	r7, #112	; 0x70
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007394:	b084      	sub	sp, #16
 8007396:	b580      	push	{r7, lr}
 8007398:	b084      	sub	sp, #16
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	f107 001c 	add.w	r0, r7, #28
 80073a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d120      	bne.n	80073ee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	68da      	ldr	r2, [r3, #12]
 80073bc:	4b20      	ldr	r3, [pc, #128]	; (8007440 <USB_CoreInit+0xac>)
 80073be:	4013      	ands	r3, r2
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d105      	bne.n	80073e2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fa96 	bl	8007914 <USB_CoreReset>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73fb      	strb	r3, [r7, #15]
 80073ec:	e010      	b.n	8007410 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 fa8a 	bl	8007914 <USB_CoreReset>
 8007400:	4603      	mov	r3, r0
 8007402:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007408:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007412:	2b01      	cmp	r3, #1
 8007414:	d10b      	bne.n	800742e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	f043 0206 	orr.w	r2, r3, #6
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f043 0220 	orr.w	r2, r3, #32
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800743a:	b004      	add	sp, #16
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	ffbdffbf 	.word	0xffbdffbf

08007444 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	f023 0201 	bic.w	r2, r3, #1
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007458:	2300      	movs	r3, #0
}
 800745a:	4618      	mov	r0, r3
 800745c:	370c      	adds	r7, #12
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007466:	b580      	push	{r7, lr}
 8007468:	b084      	sub	sp, #16
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	460b      	mov	r3, r1
 8007470:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d115      	bne.n	80074b4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007494:	2001      	movs	r0, #1
 8007496:	f7fb fcdb 	bl	8002e50 <HAL_Delay>
      ms++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 fa29 	bl	80078f8 <USB_GetMode>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d01e      	beq.n	80074ea <USB_SetCurrentMode+0x84>
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b31      	cmp	r3, #49	; 0x31
 80074b0:	d9f0      	bls.n	8007494 <USB_SetCurrentMode+0x2e>
 80074b2:	e01a      	b.n	80074ea <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d115      	bne.n	80074e6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074c6:	2001      	movs	r0, #1
 80074c8:	f7fb fcc2 	bl	8002e50 <HAL_Delay>
      ms++;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	3301      	adds	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fa10 	bl	80078f8 <USB_GetMode>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d005      	beq.n	80074ea <USB_SetCurrentMode+0x84>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2b31      	cmp	r3, #49	; 0x31
 80074e2:	d9f0      	bls.n	80074c6 <USB_SetCurrentMode+0x60>
 80074e4:	e001      	b.n	80074ea <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	e005      	b.n	80074f6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b32      	cmp	r3, #50	; 0x32
 80074ee:	d101      	bne.n	80074f4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	e000      	b.n	80074f6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
	...

08007500 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007500:	b084      	sub	sp, #16
 8007502:	b580      	push	{r7, lr}
 8007504:	b086      	sub	sp, #24
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800750e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007512:	2300      	movs	r3, #0
 8007514:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	e009      	b.n	8007534 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	3340      	adds	r3, #64	; 0x40
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	2200      	movs	r2, #0
 800752c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	3301      	adds	r3, #1
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2b0e      	cmp	r3, #14
 8007538:	d9f2      	bls.n	8007520 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800753a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753c:	2b00      	cmp	r3, #0
 800753e:	d11c      	bne.n	800757a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800754e:	f043 0302 	orr.w	r3, r3, #2
 8007552:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	601a      	str	r2, [r3, #0]
 8007578:	e005      	b.n	8007586 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800758c:	461a      	mov	r2, r3
 800758e:	2300      	movs	r3, #0
 8007590:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	4619      	mov	r1, r3
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a0:	461a      	mov	r2, r3
 80075a2:	680b      	ldr	r3, [r1, #0]
 80075a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d10c      	bne.n	80075c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d104      	bne.n	80075bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075b2:	2100      	movs	r1, #0
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f965 	bl	8007884 <USB_SetDevSpeed>
 80075ba:	e008      	b.n	80075ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075bc:	2101      	movs	r1, #1
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f960 	bl	8007884 <USB_SetDevSpeed>
 80075c4:	e003      	b.n	80075ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075c6:	2103      	movs	r1, #3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f95b 	bl	8007884 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075ce:	2110      	movs	r1, #16
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 f8f3 	bl	80077bc <USB_FlushTxFifo>
 80075d6:	4603      	mov	r3, r0
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80075dc:	2301      	movs	r3, #1
 80075de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f91f 	bl	8007824 <USB_FlushRxFifo>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f6:	461a      	mov	r2, r3
 80075f8:	2300      	movs	r3, #0
 80075fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007602:	461a      	mov	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800760e:	461a      	mov	r2, r3
 8007610:	2300      	movs	r3, #0
 8007612:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
 8007618:	e043      	b.n	80076a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800762c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007630:	d118      	bne.n	8007664 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	015a      	lsls	r2, r3, #5
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	4413      	add	r3, r2
 8007640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007644:	461a      	mov	r2, r3
 8007646:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	e013      	b.n	8007676 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	461a      	mov	r2, r3
 800765c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007660:	6013      	str	r3, [r2, #0]
 8007662:	e008      	b.n	8007676 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	461a      	mov	r2, r3
 8007672:	2300      	movs	r3, #0
 8007674:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	461a      	mov	r2, r3
 8007684:	2300      	movs	r3, #0
 8007686:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007694:	461a      	mov	r2, r3
 8007696:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800769a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	3301      	adds	r3, #1
 80076a0:	613b      	str	r3, [r7, #16]
 80076a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d3b7      	bcc.n	800761a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076aa:	2300      	movs	r3, #0
 80076ac:	613b      	str	r3, [r7, #16]
 80076ae:	e043      	b.n	8007738 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	015a      	lsls	r2, r3, #5
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076c6:	d118      	bne.n	80076fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076da:	461a      	mov	r2, r3
 80076dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076e0:	6013      	str	r3, [r2, #0]
 80076e2:	e013      	b.n	800770c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	015a      	lsls	r2, r3, #5
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4413      	add	r3, r2
 80076ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f0:	461a      	mov	r2, r3
 80076f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80076f6:	6013      	str	r3, [r2, #0]
 80076f8:	e008      	b.n	800770c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007706:	461a      	mov	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	4413      	add	r3, r2
 8007714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007718:	461a      	mov	r2, r3
 800771a:	2300      	movs	r3, #0
 800771c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	015a      	lsls	r2, r3, #5
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	4413      	add	r3, r2
 8007726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800772a:	461a      	mov	r2, r3
 800772c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007730:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	3301      	adds	r3, #1
 8007736:	613b      	str	r3, [r7, #16]
 8007738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	429a      	cmp	r2, r3
 800773e:	d3b7      	bcc.n	80076b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800774e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007752:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007760:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	699b      	ldr	r3, [r3, #24]
 800776c:	f043 0210 	orr.w	r2, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	699a      	ldr	r2, [r3, #24]
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <USB_DevInit+0x2b4>)
 800777a:	4313      	orrs	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	f043 0208 	orr.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007794:	2b01      	cmp	r3, #1
 8007796:	d105      	bne.n	80077a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <USB_DevInit+0x2b8>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077b0:	b004      	add	sp, #16
 80077b2:	4770      	bx	lr
 80077b4:	803c3800 	.word	0x803c3800
 80077b8:	40000004 	.word	0x40000004

080077bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3301      	adds	r3, #1
 80077ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4a13      	ldr	r2, [pc, #76]	; (8007820 <USB_FlushTxFifo+0x64>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d901      	bls.n	80077dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077d8:	2303      	movs	r3, #3
 80077da:	e01b      	b.n	8007814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	daf2      	bge.n	80077ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077e4:	2300      	movs	r3, #0
 80077e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	019b      	lsls	r3, r3, #6
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	3301      	adds	r3, #1
 80077f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4a08      	ldr	r2, [pc, #32]	; (8007820 <USB_FlushTxFifo+0x64>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d901      	bls.n	8007806 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e006      	b.n	8007814 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	691b      	ldr	r3, [r3, #16]
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b20      	cmp	r3, #32
 8007810:	d0f0      	beq.n	80077f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	00030d40 	.word	0x00030d40

08007824 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3301      	adds	r3, #1
 8007834:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	4a11      	ldr	r2, [pc, #68]	; (8007880 <USB_FlushRxFifo+0x5c>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d901      	bls.n	8007842 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e018      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	691b      	ldr	r3, [r3, #16]
 8007846:	2b00      	cmp	r3, #0
 8007848:	daf2      	bge.n	8007830 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800784a:	2300      	movs	r3, #0
 800784c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2210      	movs	r2, #16
 8007852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	3301      	adds	r3, #1
 8007858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a08      	ldr	r2, [pc, #32]	; (8007880 <USB_FlushRxFifo+0x5c>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d901      	bls.n	8007866 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e006      	b.n	8007874 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	f003 0310 	and.w	r3, r3, #16
 800786e:	2b10      	cmp	r3, #16
 8007870:	d0f0      	beq.n	8007854 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	00030d40 	.word	0x00030d40

08007884 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007884:	b480      	push	{r7}
 8007886:	b085      	sub	sp, #20
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	78fb      	ldrb	r3, [r7, #3]
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078a4:	4313      	orrs	r3, r2
 80078a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3714      	adds	r7, #20
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b085      	sub	sp, #20
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e4:	f043 0302 	orr.w	r3, r3, #2
 80078e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	695b      	ldr	r3, [r3, #20]
 8007904:	f003 0301 	and.w	r3, r3, #1
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800791c:	2300      	movs	r3, #0
 800791e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3301      	adds	r3, #1
 8007924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	4a13      	ldr	r2, [pc, #76]	; (8007978 <USB_CoreReset+0x64>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d901      	bls.n	8007932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e01b      	b.n	800796a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	daf2      	bge.n	8007920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f043 0201 	orr.w	r2, r3, #1
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4a09      	ldr	r2, [pc, #36]	; (8007978 <USB_CoreReset+0x64>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d901      	bls.n	800795c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e006      	b.n	800796a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	691b      	ldr	r3, [r3, #16]
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b01      	cmp	r3, #1
 8007966:	d0f0      	beq.n	800794a <USB_CoreReset+0x36>

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	00030d40 	.word	0x00030d40

0800797c <atof>:
 800797c:	2100      	movs	r1, #0
 800797e:	f000 be0f 	b.w	80085a0 <strtod>

08007982 <sulp>:
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	460d      	mov	r5, r1
 8007988:	ec45 4b10 	vmov	d0, r4, r5
 800798c:	4616      	mov	r6, r2
 800798e:	f003 fa97 	bl	800aec0 <__ulp>
 8007992:	ec51 0b10 	vmov	r0, r1, d0
 8007996:	b17e      	cbz	r6, 80079b8 <sulp+0x36>
 8007998:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800799c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dd09      	ble.n	80079b8 <sulp+0x36>
 80079a4:	051b      	lsls	r3, r3, #20
 80079a6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079aa:	2400      	movs	r4, #0
 80079ac:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079b0:	4622      	mov	r2, r4
 80079b2:	462b      	mov	r3, r5
 80079b4:	f7f8 fe40 	bl	8000638 <__aeabi_dmul>
 80079b8:	bd70      	pop	{r4, r5, r6, pc}
 80079ba:	0000      	movs	r0, r0
 80079bc:	0000      	movs	r0, r0
	...

080079c0 <_strtod_l>:
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c4:	ed2d 8b02 	vpush	{d8}
 80079c8:	b09b      	sub	sp, #108	; 0x6c
 80079ca:	4604      	mov	r4, r0
 80079cc:	9213      	str	r2, [sp, #76]	; 0x4c
 80079ce:	2200      	movs	r2, #0
 80079d0:	9216      	str	r2, [sp, #88]	; 0x58
 80079d2:	460d      	mov	r5, r1
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	f04f 0900 	mov.w	r9, #0
 80079dc:	460a      	mov	r2, r1
 80079de:	9215      	str	r2, [sp, #84]	; 0x54
 80079e0:	7811      	ldrb	r1, [r2, #0]
 80079e2:	292b      	cmp	r1, #43	; 0x2b
 80079e4:	d04c      	beq.n	8007a80 <_strtod_l+0xc0>
 80079e6:	d83a      	bhi.n	8007a5e <_strtod_l+0x9e>
 80079e8:	290d      	cmp	r1, #13
 80079ea:	d834      	bhi.n	8007a56 <_strtod_l+0x96>
 80079ec:	2908      	cmp	r1, #8
 80079ee:	d834      	bhi.n	8007a5a <_strtod_l+0x9a>
 80079f0:	2900      	cmp	r1, #0
 80079f2:	d03d      	beq.n	8007a70 <_strtod_l+0xb0>
 80079f4:	2200      	movs	r2, #0
 80079f6:	920a      	str	r2, [sp, #40]	; 0x28
 80079f8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80079fa:	7832      	ldrb	r2, [r6, #0]
 80079fc:	2a30      	cmp	r2, #48	; 0x30
 80079fe:	f040 80b4 	bne.w	8007b6a <_strtod_l+0x1aa>
 8007a02:	7872      	ldrb	r2, [r6, #1]
 8007a04:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a08:	2a58      	cmp	r2, #88	; 0x58
 8007a0a:	d170      	bne.n	8007aee <_strtod_l+0x12e>
 8007a0c:	9302      	str	r3, [sp, #8]
 8007a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a10:	9301      	str	r3, [sp, #4]
 8007a12:	ab16      	add	r3, sp, #88	; 0x58
 8007a14:	9300      	str	r3, [sp, #0]
 8007a16:	4a8e      	ldr	r2, [pc, #568]	; (8007c50 <_strtod_l+0x290>)
 8007a18:	ab17      	add	r3, sp, #92	; 0x5c
 8007a1a:	a915      	add	r1, sp, #84	; 0x54
 8007a1c:	4620      	mov	r0, r4
 8007a1e:	f002 fb2d 	bl	800a07c <__gethex>
 8007a22:	f010 070f 	ands.w	r7, r0, #15
 8007a26:	4605      	mov	r5, r0
 8007a28:	d005      	beq.n	8007a36 <_strtod_l+0x76>
 8007a2a:	2f06      	cmp	r7, #6
 8007a2c:	d12a      	bne.n	8007a84 <_strtod_l+0xc4>
 8007a2e:	3601      	adds	r6, #1
 8007a30:	2300      	movs	r3, #0
 8007a32:	9615      	str	r6, [sp, #84]	; 0x54
 8007a34:	930a      	str	r3, [sp, #40]	; 0x28
 8007a36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f040 857f 	bne.w	800853c <_strtod_l+0xb7c>
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a40:	b1db      	cbz	r3, 8007a7a <_strtod_l+0xba>
 8007a42:	4642      	mov	r2, r8
 8007a44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a48:	ec43 2b10 	vmov	d0, r2, r3
 8007a4c:	b01b      	add	sp, #108	; 0x6c
 8007a4e:	ecbd 8b02 	vpop	{d8}
 8007a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a56:	2920      	cmp	r1, #32
 8007a58:	d1cc      	bne.n	80079f4 <_strtod_l+0x34>
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	e7bf      	b.n	80079de <_strtod_l+0x1e>
 8007a5e:	292d      	cmp	r1, #45	; 0x2d
 8007a60:	d1c8      	bne.n	80079f4 <_strtod_l+0x34>
 8007a62:	2101      	movs	r1, #1
 8007a64:	910a      	str	r1, [sp, #40]	; 0x28
 8007a66:	1c51      	adds	r1, r2, #1
 8007a68:	9115      	str	r1, [sp, #84]	; 0x54
 8007a6a:	7852      	ldrb	r2, [r2, #1]
 8007a6c:	2a00      	cmp	r2, #0
 8007a6e:	d1c3      	bne.n	80079f8 <_strtod_l+0x38>
 8007a70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007a72:	9515      	str	r5, [sp, #84]	; 0x54
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	f040 855f 	bne.w	8008538 <_strtod_l+0xb78>
 8007a7a:	4642      	mov	r2, r8
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	e7e3      	b.n	8007a48 <_strtod_l+0x88>
 8007a80:	2100      	movs	r1, #0
 8007a82:	e7ef      	b.n	8007a64 <_strtod_l+0xa4>
 8007a84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007a86:	b13a      	cbz	r2, 8007a98 <_strtod_l+0xd8>
 8007a88:	2135      	movs	r1, #53	; 0x35
 8007a8a:	a818      	add	r0, sp, #96	; 0x60
 8007a8c:	f003 fb15 	bl	800b0ba <__copybits>
 8007a90:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007a92:	4620      	mov	r0, r4
 8007a94:	f002 fee8 	bl	800a868 <_Bfree>
 8007a98:	3f01      	subs	r7, #1
 8007a9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007a9c:	2f04      	cmp	r7, #4
 8007a9e:	d806      	bhi.n	8007aae <_strtod_l+0xee>
 8007aa0:	e8df f007 	tbb	[pc, r7]
 8007aa4:	201d0314 	.word	0x201d0314
 8007aa8:	14          	.byte	0x14
 8007aa9:	00          	.byte	0x00
 8007aaa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007aae:	05e9      	lsls	r1, r5, #23
 8007ab0:	bf48      	it	mi
 8007ab2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007ab6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007aba:	0d1b      	lsrs	r3, r3, #20
 8007abc:	051b      	lsls	r3, r3, #20
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1b9      	bne.n	8007a36 <_strtod_l+0x76>
 8007ac2:	f001 fb69 	bl	8009198 <__errno>
 8007ac6:	2322      	movs	r3, #34	; 0x22
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	e7b4      	b.n	8007a36 <_strtod_l+0x76>
 8007acc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007ad0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007ad4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007ad8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007adc:	e7e7      	b.n	8007aae <_strtod_l+0xee>
 8007ade:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007c58 <_strtod_l+0x298>
 8007ae2:	e7e4      	b.n	8007aae <_strtod_l+0xee>
 8007ae4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007ae8:	f04f 38ff 	mov.w	r8, #4294967295
 8007aec:	e7df      	b.n	8007aae <_strtod_l+0xee>
 8007aee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007af0:	1c5a      	adds	r2, r3, #1
 8007af2:	9215      	str	r2, [sp, #84]	; 0x54
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	2b30      	cmp	r3, #48	; 0x30
 8007af8:	d0f9      	beq.n	8007aee <_strtod_l+0x12e>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d09b      	beq.n	8007a36 <_strtod_l+0x76>
 8007afe:	2301      	movs	r3, #1
 8007b00:	f04f 0a00 	mov.w	sl, #0
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b08:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007b0e:	46d3      	mov	fp, sl
 8007b10:	220a      	movs	r2, #10
 8007b12:	9815      	ldr	r0, [sp, #84]	; 0x54
 8007b14:	7806      	ldrb	r6, [r0, #0]
 8007b16:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b1a:	b2d9      	uxtb	r1, r3
 8007b1c:	2909      	cmp	r1, #9
 8007b1e:	d926      	bls.n	8007b6e <_strtod_l+0x1ae>
 8007b20:	494c      	ldr	r1, [pc, #304]	; (8007c54 <_strtod_l+0x294>)
 8007b22:	2201      	movs	r2, #1
 8007b24:	f001 fadb 	bl	80090de <strncmp>
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	d030      	beq.n	8007b8e <_strtod_l+0x1ce>
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	4632      	mov	r2, r6
 8007b30:	9005      	str	r0, [sp, #20]
 8007b32:	465e      	mov	r6, fp
 8007b34:	4603      	mov	r3, r0
 8007b36:	2a65      	cmp	r2, #101	; 0x65
 8007b38:	d001      	beq.n	8007b3e <_strtod_l+0x17e>
 8007b3a:	2a45      	cmp	r2, #69	; 0x45
 8007b3c:	d113      	bne.n	8007b66 <_strtod_l+0x1a6>
 8007b3e:	b91e      	cbnz	r6, 8007b48 <_strtod_l+0x188>
 8007b40:	9a04      	ldr	r2, [sp, #16]
 8007b42:	4302      	orrs	r2, r0
 8007b44:	d094      	beq.n	8007a70 <_strtod_l+0xb0>
 8007b46:	2600      	movs	r6, #0
 8007b48:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007b4a:	1c6a      	adds	r2, r5, #1
 8007b4c:	9215      	str	r2, [sp, #84]	; 0x54
 8007b4e:	786a      	ldrb	r2, [r5, #1]
 8007b50:	2a2b      	cmp	r2, #43	; 0x2b
 8007b52:	d074      	beq.n	8007c3e <_strtod_l+0x27e>
 8007b54:	2a2d      	cmp	r2, #45	; 0x2d
 8007b56:	d078      	beq.n	8007c4a <_strtod_l+0x28a>
 8007b58:	f04f 0c00 	mov.w	ip, #0
 8007b5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007b60:	2909      	cmp	r1, #9
 8007b62:	d97f      	bls.n	8007c64 <_strtod_l+0x2a4>
 8007b64:	9515      	str	r5, [sp, #84]	; 0x54
 8007b66:	2700      	movs	r7, #0
 8007b68:	e09e      	b.n	8007ca8 <_strtod_l+0x2e8>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e7c8      	b.n	8007b00 <_strtod_l+0x140>
 8007b6e:	f1bb 0f08 	cmp.w	fp, #8
 8007b72:	bfd8      	it	le
 8007b74:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007b76:	f100 0001 	add.w	r0, r0, #1
 8007b7a:	bfda      	itte	le
 8007b7c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007b80:	9309      	strle	r3, [sp, #36]	; 0x24
 8007b82:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007b86:	f10b 0b01 	add.w	fp, fp, #1
 8007b8a:	9015      	str	r0, [sp, #84]	; 0x54
 8007b8c:	e7c1      	b.n	8007b12 <_strtod_l+0x152>
 8007b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b90:	1c5a      	adds	r2, r3, #1
 8007b92:	9215      	str	r2, [sp, #84]	; 0x54
 8007b94:	785a      	ldrb	r2, [r3, #1]
 8007b96:	f1bb 0f00 	cmp.w	fp, #0
 8007b9a:	d037      	beq.n	8007c0c <_strtod_l+0x24c>
 8007b9c:	9005      	str	r0, [sp, #20]
 8007b9e:	465e      	mov	r6, fp
 8007ba0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d912      	bls.n	8007bce <_strtod_l+0x20e>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e7c4      	b.n	8007b36 <_strtod_l+0x176>
 8007bac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	9215      	str	r2, [sp, #84]	; 0x54
 8007bb2:	785a      	ldrb	r2, [r3, #1]
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	2a30      	cmp	r2, #48	; 0x30
 8007bb8:	d0f8      	beq.n	8007bac <_strtod_l+0x1ec>
 8007bba:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007bbe:	2b08      	cmp	r3, #8
 8007bc0:	f200 84c1 	bhi.w	8008546 <_strtod_l+0xb86>
 8007bc4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bc6:	9005      	str	r0, [sp, #20]
 8007bc8:	2000      	movs	r0, #0
 8007bca:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bcc:	4606      	mov	r6, r0
 8007bce:	3a30      	subs	r2, #48	; 0x30
 8007bd0:	f100 0301 	add.w	r3, r0, #1
 8007bd4:	d014      	beq.n	8007c00 <_strtod_l+0x240>
 8007bd6:	9905      	ldr	r1, [sp, #20]
 8007bd8:	4419      	add	r1, r3
 8007bda:	9105      	str	r1, [sp, #20]
 8007bdc:	4633      	mov	r3, r6
 8007bde:	eb00 0c06 	add.w	ip, r0, r6
 8007be2:	210a      	movs	r1, #10
 8007be4:	4563      	cmp	r3, ip
 8007be6:	d113      	bne.n	8007c10 <_strtod_l+0x250>
 8007be8:	1833      	adds	r3, r6, r0
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	f106 0601 	add.w	r6, r6, #1
 8007bf0:	4406      	add	r6, r0
 8007bf2:	dc1a      	bgt.n	8007c2a <_strtod_l+0x26a>
 8007bf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bf6:	230a      	movs	r3, #10
 8007bf8:	fb03 2301 	mla	r3, r3, r1, r2
 8007bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8007bfe:	2300      	movs	r3, #0
 8007c00:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c02:	1c51      	adds	r1, r2, #1
 8007c04:	9115      	str	r1, [sp, #84]	; 0x54
 8007c06:	7852      	ldrb	r2, [r2, #1]
 8007c08:	4618      	mov	r0, r3
 8007c0a:	e7c9      	b.n	8007ba0 <_strtod_l+0x1e0>
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	e7d2      	b.n	8007bb6 <_strtod_l+0x1f6>
 8007c10:	2b08      	cmp	r3, #8
 8007c12:	f103 0301 	add.w	r3, r3, #1
 8007c16:	dc03      	bgt.n	8007c20 <_strtod_l+0x260>
 8007c18:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007c1a:	434f      	muls	r7, r1
 8007c1c:	9709      	str	r7, [sp, #36]	; 0x24
 8007c1e:	e7e1      	b.n	8007be4 <_strtod_l+0x224>
 8007c20:	2b10      	cmp	r3, #16
 8007c22:	bfd8      	it	le
 8007c24:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c28:	e7dc      	b.n	8007be4 <_strtod_l+0x224>
 8007c2a:	2e10      	cmp	r6, #16
 8007c2c:	bfdc      	itt	le
 8007c2e:	230a      	movle	r3, #10
 8007c30:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007c34:	e7e3      	b.n	8007bfe <_strtod_l+0x23e>
 8007c36:	2300      	movs	r3, #0
 8007c38:	9305      	str	r3, [sp, #20]
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e780      	b.n	8007b40 <_strtod_l+0x180>
 8007c3e:	f04f 0c00 	mov.w	ip, #0
 8007c42:	1caa      	adds	r2, r5, #2
 8007c44:	9215      	str	r2, [sp, #84]	; 0x54
 8007c46:	78aa      	ldrb	r2, [r5, #2]
 8007c48:	e788      	b.n	8007b5c <_strtod_l+0x19c>
 8007c4a:	f04f 0c01 	mov.w	ip, #1
 8007c4e:	e7f8      	b.n	8007c42 <_strtod_l+0x282>
 8007c50:	0800bcfc 	.word	0x0800bcfc
 8007c54:	0800bcf8 	.word	0x0800bcf8
 8007c58:	7ff00000 	.word	0x7ff00000
 8007c5c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c5e:	1c51      	adds	r1, r2, #1
 8007c60:	9115      	str	r1, [sp, #84]	; 0x54
 8007c62:	7852      	ldrb	r2, [r2, #1]
 8007c64:	2a30      	cmp	r2, #48	; 0x30
 8007c66:	d0f9      	beq.n	8007c5c <_strtod_l+0x29c>
 8007c68:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007c6c:	2908      	cmp	r1, #8
 8007c6e:	f63f af7a 	bhi.w	8007b66 <_strtod_l+0x1a6>
 8007c72:	3a30      	subs	r2, #48	; 0x30
 8007c74:	9208      	str	r2, [sp, #32]
 8007c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c78:	920c      	str	r2, [sp, #48]	; 0x30
 8007c7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007c7c:	1c57      	adds	r7, r2, #1
 8007c7e:	9715      	str	r7, [sp, #84]	; 0x54
 8007c80:	7852      	ldrb	r2, [r2, #1]
 8007c82:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007c86:	f1be 0f09 	cmp.w	lr, #9
 8007c8a:	d938      	bls.n	8007cfe <_strtod_l+0x33e>
 8007c8c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007c8e:	1a7f      	subs	r7, r7, r1
 8007c90:	2f08      	cmp	r7, #8
 8007c92:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007c96:	dc03      	bgt.n	8007ca0 <_strtod_l+0x2e0>
 8007c98:	9908      	ldr	r1, [sp, #32]
 8007c9a:	428f      	cmp	r7, r1
 8007c9c:	bfa8      	it	ge
 8007c9e:	460f      	movge	r7, r1
 8007ca0:	f1bc 0f00 	cmp.w	ip, #0
 8007ca4:	d000      	beq.n	8007ca8 <_strtod_l+0x2e8>
 8007ca6:	427f      	negs	r7, r7
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	d14f      	bne.n	8007d4c <_strtod_l+0x38c>
 8007cac:	9904      	ldr	r1, [sp, #16]
 8007cae:	4301      	orrs	r1, r0
 8007cb0:	f47f aec1 	bne.w	8007a36 <_strtod_l+0x76>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	f47f aedb 	bne.w	8007a70 <_strtod_l+0xb0>
 8007cba:	2a69      	cmp	r2, #105	; 0x69
 8007cbc:	d029      	beq.n	8007d12 <_strtod_l+0x352>
 8007cbe:	dc26      	bgt.n	8007d0e <_strtod_l+0x34e>
 8007cc0:	2a49      	cmp	r2, #73	; 0x49
 8007cc2:	d026      	beq.n	8007d12 <_strtod_l+0x352>
 8007cc4:	2a4e      	cmp	r2, #78	; 0x4e
 8007cc6:	f47f aed3 	bne.w	8007a70 <_strtod_l+0xb0>
 8007cca:	499b      	ldr	r1, [pc, #620]	; (8007f38 <_strtod_l+0x578>)
 8007ccc:	a815      	add	r0, sp, #84	; 0x54
 8007cce:	f002 fc15 	bl	800a4fc <__match>
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f43f aecc 	beq.w	8007a70 <_strtod_l+0xb0>
 8007cd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	2b28      	cmp	r3, #40	; 0x28
 8007cde:	d12f      	bne.n	8007d40 <_strtod_l+0x380>
 8007ce0:	4996      	ldr	r1, [pc, #600]	; (8007f3c <_strtod_l+0x57c>)
 8007ce2:	aa18      	add	r2, sp, #96	; 0x60
 8007ce4:	a815      	add	r0, sp, #84	; 0x54
 8007ce6:	f002 fc1d 	bl	800a524 <__hexnan>
 8007cea:	2805      	cmp	r0, #5
 8007cec:	d128      	bne.n	8007d40 <_strtod_l+0x380>
 8007cee:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007cf0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007cf4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007cf8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007cfc:	e69b      	b.n	8007a36 <_strtod_l+0x76>
 8007cfe:	9f08      	ldr	r7, [sp, #32]
 8007d00:	210a      	movs	r1, #10
 8007d02:	fb01 2107 	mla	r1, r1, r7, r2
 8007d06:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d0a:	9208      	str	r2, [sp, #32]
 8007d0c:	e7b5      	b.n	8007c7a <_strtod_l+0x2ba>
 8007d0e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d10:	e7d9      	b.n	8007cc6 <_strtod_l+0x306>
 8007d12:	498b      	ldr	r1, [pc, #556]	; (8007f40 <_strtod_l+0x580>)
 8007d14:	a815      	add	r0, sp, #84	; 0x54
 8007d16:	f002 fbf1 	bl	800a4fc <__match>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	f43f aea8 	beq.w	8007a70 <_strtod_l+0xb0>
 8007d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d22:	4988      	ldr	r1, [pc, #544]	; (8007f44 <_strtod_l+0x584>)
 8007d24:	3b01      	subs	r3, #1
 8007d26:	a815      	add	r0, sp, #84	; 0x54
 8007d28:	9315      	str	r3, [sp, #84]	; 0x54
 8007d2a:	f002 fbe7 	bl	800a4fc <__match>
 8007d2e:	b910      	cbnz	r0, 8007d36 <_strtod_l+0x376>
 8007d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d32:	3301      	adds	r3, #1
 8007d34:	9315      	str	r3, [sp, #84]	; 0x54
 8007d36:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007f54 <_strtod_l+0x594>
 8007d3a:	f04f 0800 	mov.w	r8, #0
 8007d3e:	e67a      	b.n	8007a36 <_strtod_l+0x76>
 8007d40:	4881      	ldr	r0, [pc, #516]	; (8007f48 <_strtod_l+0x588>)
 8007d42:	f001 fa65 	bl	8009210 <nan>
 8007d46:	ec59 8b10 	vmov	r8, r9, d0
 8007d4a:	e674      	b.n	8007a36 <_strtod_l+0x76>
 8007d4c:	9b05      	ldr	r3, [sp, #20]
 8007d4e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d50:	1afb      	subs	r3, r7, r3
 8007d52:	f1bb 0f00 	cmp.w	fp, #0
 8007d56:	bf08      	it	eq
 8007d58:	46b3      	moveq	fp, r6
 8007d5a:	2e10      	cmp	r6, #16
 8007d5c:	9308      	str	r3, [sp, #32]
 8007d5e:	4635      	mov	r5, r6
 8007d60:	bfa8      	it	ge
 8007d62:	2510      	movge	r5, #16
 8007d64:	f7f8 fbee 	bl	8000544 <__aeabi_ui2d>
 8007d68:	2e09      	cmp	r6, #9
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	4689      	mov	r9, r1
 8007d6e:	dd13      	ble.n	8007d98 <_strtod_l+0x3d8>
 8007d70:	4b76      	ldr	r3, [pc, #472]	; (8007f4c <_strtod_l+0x58c>)
 8007d72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007d76:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007d7a:	f7f8 fc5d 	bl	8000638 <__aeabi_dmul>
 8007d7e:	4680      	mov	r8, r0
 8007d80:	4650      	mov	r0, sl
 8007d82:	4689      	mov	r9, r1
 8007d84:	f7f8 fbde 	bl	8000544 <__aeabi_ui2d>
 8007d88:	4602      	mov	r2, r0
 8007d8a:	460b      	mov	r3, r1
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4649      	mov	r1, r9
 8007d90:	f7f8 fa9c 	bl	80002cc <__adddf3>
 8007d94:	4680      	mov	r8, r0
 8007d96:	4689      	mov	r9, r1
 8007d98:	2e0f      	cmp	r6, #15
 8007d9a:	dc38      	bgt.n	8007e0e <_strtod_l+0x44e>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f43f ae49 	beq.w	8007a36 <_strtod_l+0x76>
 8007da4:	dd24      	ble.n	8007df0 <_strtod_l+0x430>
 8007da6:	2b16      	cmp	r3, #22
 8007da8:	dc0b      	bgt.n	8007dc2 <_strtod_l+0x402>
 8007daa:	4968      	ldr	r1, [pc, #416]	; (8007f4c <_strtod_l+0x58c>)
 8007dac:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007db0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	f7f8 fc3e 	bl	8000638 <__aeabi_dmul>
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	4689      	mov	r9, r1
 8007dc0:	e639      	b.n	8007a36 <_strtod_l+0x76>
 8007dc2:	9a08      	ldr	r2, [sp, #32]
 8007dc4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	db20      	blt.n	8007e0e <_strtod_l+0x44e>
 8007dcc:	4c5f      	ldr	r4, [pc, #380]	; (8007f4c <_strtod_l+0x58c>)
 8007dce:	f1c6 060f 	rsb	r6, r6, #15
 8007dd2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007dd6:	4642      	mov	r2, r8
 8007dd8:	464b      	mov	r3, r9
 8007dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dde:	f7f8 fc2b 	bl	8000638 <__aeabi_dmul>
 8007de2:	9b08      	ldr	r3, [sp, #32]
 8007de4:	1b9e      	subs	r6, r3, r6
 8007de6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007dea:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007dee:	e7e3      	b.n	8007db8 <_strtod_l+0x3f8>
 8007df0:	9b08      	ldr	r3, [sp, #32]
 8007df2:	3316      	adds	r3, #22
 8007df4:	db0b      	blt.n	8007e0e <_strtod_l+0x44e>
 8007df6:	9b05      	ldr	r3, [sp, #20]
 8007df8:	1bdf      	subs	r7, r3, r7
 8007dfa:	4b54      	ldr	r3, [pc, #336]	; (8007f4c <_strtod_l+0x58c>)
 8007dfc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e04:	4640      	mov	r0, r8
 8007e06:	4649      	mov	r1, r9
 8007e08:	f7f8 fd40 	bl	800088c <__aeabi_ddiv>
 8007e0c:	e7d6      	b.n	8007dbc <_strtod_l+0x3fc>
 8007e0e:	9b08      	ldr	r3, [sp, #32]
 8007e10:	1b75      	subs	r5, r6, r5
 8007e12:	441d      	add	r5, r3
 8007e14:	2d00      	cmp	r5, #0
 8007e16:	dd70      	ble.n	8007efa <_strtod_l+0x53a>
 8007e18:	f015 030f 	ands.w	r3, r5, #15
 8007e1c:	d00a      	beq.n	8007e34 <_strtod_l+0x474>
 8007e1e:	494b      	ldr	r1, [pc, #300]	; (8007f4c <_strtod_l+0x58c>)
 8007e20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e24:	4642      	mov	r2, r8
 8007e26:	464b      	mov	r3, r9
 8007e28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e2c:	f7f8 fc04 	bl	8000638 <__aeabi_dmul>
 8007e30:	4680      	mov	r8, r0
 8007e32:	4689      	mov	r9, r1
 8007e34:	f035 050f 	bics.w	r5, r5, #15
 8007e38:	d04d      	beq.n	8007ed6 <_strtod_l+0x516>
 8007e3a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007e3e:	dd22      	ble.n	8007e86 <_strtod_l+0x4c6>
 8007e40:	2500      	movs	r5, #0
 8007e42:	46ab      	mov	fp, r5
 8007e44:	9509      	str	r5, [sp, #36]	; 0x24
 8007e46:	9505      	str	r5, [sp, #20]
 8007e48:	2322      	movs	r3, #34	; 0x22
 8007e4a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007f54 <_strtod_l+0x594>
 8007e4e:	6023      	str	r3, [r4, #0]
 8007e50:	f04f 0800 	mov.w	r8, #0
 8007e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f43f aded 	beq.w	8007a36 <_strtod_l+0x76>
 8007e5c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f002 fd02 	bl	800a868 <_Bfree>
 8007e64:	9905      	ldr	r1, [sp, #20]
 8007e66:	4620      	mov	r0, r4
 8007e68:	f002 fcfe 	bl	800a868 <_Bfree>
 8007e6c:	4659      	mov	r1, fp
 8007e6e:	4620      	mov	r0, r4
 8007e70:	f002 fcfa 	bl	800a868 <_Bfree>
 8007e74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e76:	4620      	mov	r0, r4
 8007e78:	f002 fcf6 	bl	800a868 <_Bfree>
 8007e7c:	4629      	mov	r1, r5
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f002 fcf2 	bl	800a868 <_Bfree>
 8007e84:	e5d7      	b.n	8007a36 <_strtod_l+0x76>
 8007e86:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <_strtod_l+0x590>)
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	112d      	asrs	r5, r5, #4
 8007e8e:	4640      	mov	r0, r8
 8007e90:	4649      	mov	r1, r9
 8007e92:	469a      	mov	sl, r3
 8007e94:	2d01      	cmp	r5, #1
 8007e96:	dc21      	bgt.n	8007edc <_strtod_l+0x51c>
 8007e98:	b10b      	cbz	r3, 8007e9e <_strtod_l+0x4de>
 8007e9a:	4680      	mov	r8, r0
 8007e9c:	4689      	mov	r9, r1
 8007e9e:	492c      	ldr	r1, [pc, #176]	; (8007f50 <_strtod_l+0x590>)
 8007ea0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ea4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ea8:	4642      	mov	r2, r8
 8007eaa:	464b      	mov	r3, r9
 8007eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eb0:	f7f8 fbc2 	bl	8000638 <__aeabi_dmul>
 8007eb4:	4b27      	ldr	r3, [pc, #156]	; (8007f54 <_strtod_l+0x594>)
 8007eb6:	460a      	mov	r2, r1
 8007eb8:	400b      	ands	r3, r1
 8007eba:	4927      	ldr	r1, [pc, #156]	; (8007f58 <_strtod_l+0x598>)
 8007ebc:	428b      	cmp	r3, r1
 8007ebe:	4680      	mov	r8, r0
 8007ec0:	d8be      	bhi.n	8007e40 <_strtod_l+0x480>
 8007ec2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007ec6:	428b      	cmp	r3, r1
 8007ec8:	bf86      	itte	hi
 8007eca:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007f5c <_strtod_l+0x59c>
 8007ece:	f04f 38ff 	movhi.w	r8, #4294967295
 8007ed2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	9304      	str	r3, [sp, #16]
 8007eda:	e07b      	b.n	8007fd4 <_strtod_l+0x614>
 8007edc:	07ea      	lsls	r2, r5, #31
 8007ede:	d505      	bpl.n	8007eec <_strtod_l+0x52c>
 8007ee0:	9b04      	ldr	r3, [sp, #16]
 8007ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee6:	f7f8 fba7 	bl	8000638 <__aeabi_dmul>
 8007eea:	2301      	movs	r3, #1
 8007eec:	9a04      	ldr	r2, [sp, #16]
 8007eee:	3208      	adds	r2, #8
 8007ef0:	f10a 0a01 	add.w	sl, sl, #1
 8007ef4:	106d      	asrs	r5, r5, #1
 8007ef6:	9204      	str	r2, [sp, #16]
 8007ef8:	e7cc      	b.n	8007e94 <_strtod_l+0x4d4>
 8007efa:	d0ec      	beq.n	8007ed6 <_strtod_l+0x516>
 8007efc:	426d      	negs	r5, r5
 8007efe:	f015 020f 	ands.w	r2, r5, #15
 8007f02:	d00a      	beq.n	8007f1a <_strtod_l+0x55a>
 8007f04:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <_strtod_l+0x58c>)
 8007f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	4649      	mov	r1, r9
 8007f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f12:	f7f8 fcbb 	bl	800088c <__aeabi_ddiv>
 8007f16:	4680      	mov	r8, r0
 8007f18:	4689      	mov	r9, r1
 8007f1a:	112d      	asrs	r5, r5, #4
 8007f1c:	d0db      	beq.n	8007ed6 <_strtod_l+0x516>
 8007f1e:	2d1f      	cmp	r5, #31
 8007f20:	dd1e      	ble.n	8007f60 <_strtod_l+0x5a0>
 8007f22:	2500      	movs	r5, #0
 8007f24:	46ab      	mov	fp, r5
 8007f26:	9509      	str	r5, [sp, #36]	; 0x24
 8007f28:	9505      	str	r5, [sp, #20]
 8007f2a:	2322      	movs	r3, #34	; 0x22
 8007f2c:	f04f 0800 	mov.w	r8, #0
 8007f30:	f04f 0900 	mov.w	r9, #0
 8007f34:	6023      	str	r3, [r4, #0]
 8007f36:	e78d      	b.n	8007e54 <_strtod_l+0x494>
 8007f38:	0800bd5d 	.word	0x0800bd5d
 8007f3c:	0800bd10 	.word	0x0800bd10
 8007f40:	0800bd55 	.word	0x0800bd55
 8007f44:	0800bd8f 	.word	0x0800bd8f
 8007f48:	0800c121 	.word	0x0800c121
 8007f4c:	0800bf00 	.word	0x0800bf00
 8007f50:	0800bed8 	.word	0x0800bed8
 8007f54:	7ff00000 	.word	0x7ff00000
 8007f58:	7ca00000 	.word	0x7ca00000
 8007f5c:	7fefffff 	.word	0x7fefffff
 8007f60:	f015 0310 	ands.w	r3, r5, #16
 8007f64:	bf18      	it	ne
 8007f66:	236a      	movne	r3, #106	; 0x6a
 8007f68:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800830c <_strtod_l+0x94c>
 8007f6c:	9304      	str	r3, [sp, #16]
 8007f6e:	4640      	mov	r0, r8
 8007f70:	4649      	mov	r1, r9
 8007f72:	2300      	movs	r3, #0
 8007f74:	07ea      	lsls	r2, r5, #31
 8007f76:	d504      	bpl.n	8007f82 <_strtod_l+0x5c2>
 8007f78:	e9da 2300 	ldrd	r2, r3, [sl]
 8007f7c:	f7f8 fb5c 	bl	8000638 <__aeabi_dmul>
 8007f80:	2301      	movs	r3, #1
 8007f82:	106d      	asrs	r5, r5, #1
 8007f84:	f10a 0a08 	add.w	sl, sl, #8
 8007f88:	d1f4      	bne.n	8007f74 <_strtod_l+0x5b4>
 8007f8a:	b10b      	cbz	r3, 8007f90 <_strtod_l+0x5d0>
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	4689      	mov	r9, r1
 8007f90:	9b04      	ldr	r3, [sp, #16]
 8007f92:	b1bb      	cbz	r3, 8007fc4 <_strtod_l+0x604>
 8007f94:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007f98:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	4649      	mov	r1, r9
 8007fa0:	dd10      	ble.n	8007fc4 <_strtod_l+0x604>
 8007fa2:	2b1f      	cmp	r3, #31
 8007fa4:	f340 811e 	ble.w	80081e4 <_strtod_l+0x824>
 8007fa8:	2b34      	cmp	r3, #52	; 0x34
 8007faa:	bfde      	ittt	le
 8007fac:	f04f 33ff 	movle.w	r3, #4294967295
 8007fb0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007fb4:	4093      	lslle	r3, r2
 8007fb6:	f04f 0800 	mov.w	r8, #0
 8007fba:	bfcc      	ite	gt
 8007fbc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007fc0:	ea03 0901 	andle.w	r9, r3, r1
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	4640      	mov	r0, r8
 8007fca:	4649      	mov	r1, r9
 8007fcc:	f7f8 fd9c 	bl	8000b08 <__aeabi_dcmpeq>
 8007fd0:	2800      	cmp	r0, #0
 8007fd2:	d1a6      	bne.n	8007f22 <_strtod_l+0x562>
 8007fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007fda:	4633      	mov	r3, r6
 8007fdc:	465a      	mov	r2, fp
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f002 fcaa 	bl	800a938 <__s2b>
 8007fe4:	9009      	str	r0, [sp, #36]	; 0x24
 8007fe6:	2800      	cmp	r0, #0
 8007fe8:	f43f af2a 	beq.w	8007e40 <_strtod_l+0x480>
 8007fec:	9a08      	ldr	r2, [sp, #32]
 8007fee:	9b05      	ldr	r3, [sp, #20]
 8007ff0:	2a00      	cmp	r2, #0
 8007ff2:	eba3 0307 	sub.w	r3, r3, r7
 8007ff6:	bfa8      	it	ge
 8007ff8:	2300      	movge	r3, #0
 8007ffa:	930c      	str	r3, [sp, #48]	; 0x30
 8007ffc:	2500      	movs	r5, #0
 8007ffe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008002:	9312      	str	r3, [sp, #72]	; 0x48
 8008004:	46ab      	mov	fp, r5
 8008006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008008:	4620      	mov	r0, r4
 800800a:	6859      	ldr	r1, [r3, #4]
 800800c:	f002 fbec 	bl	800a7e8 <_Balloc>
 8008010:	9005      	str	r0, [sp, #20]
 8008012:	2800      	cmp	r0, #0
 8008014:	f43f af18 	beq.w	8007e48 <_strtod_l+0x488>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	3202      	adds	r2, #2
 800801e:	f103 010c 	add.w	r1, r3, #12
 8008022:	0092      	lsls	r2, r2, #2
 8008024:	300c      	adds	r0, #12
 8008026:	f001 f8e4 	bl	80091f2 <memcpy>
 800802a:	ec49 8b10 	vmov	d0, r8, r9
 800802e:	aa18      	add	r2, sp, #96	; 0x60
 8008030:	a917      	add	r1, sp, #92	; 0x5c
 8008032:	4620      	mov	r0, r4
 8008034:	f002 ffb4 	bl	800afa0 <__d2b>
 8008038:	ec49 8b18 	vmov	d8, r8, r9
 800803c:	9016      	str	r0, [sp, #88]	; 0x58
 800803e:	2800      	cmp	r0, #0
 8008040:	f43f af02 	beq.w	8007e48 <_strtod_l+0x488>
 8008044:	2101      	movs	r1, #1
 8008046:	4620      	mov	r0, r4
 8008048:	f002 fd0e 	bl	800aa68 <__i2b>
 800804c:	4683      	mov	fp, r0
 800804e:	2800      	cmp	r0, #0
 8008050:	f43f aefa 	beq.w	8007e48 <_strtod_l+0x488>
 8008054:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008056:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008058:	2e00      	cmp	r6, #0
 800805a:	bfab      	itete	ge
 800805c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800805e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8008060:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008062:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8008066:	bfac      	ite	ge
 8008068:	eb06 0a03 	addge.w	sl, r6, r3
 800806c:	1b9f      	sublt	r7, r3, r6
 800806e:	9b04      	ldr	r3, [sp, #16]
 8008070:	1af6      	subs	r6, r6, r3
 8008072:	4416      	add	r6, r2
 8008074:	4ba0      	ldr	r3, [pc, #640]	; (80082f8 <_strtod_l+0x938>)
 8008076:	3e01      	subs	r6, #1
 8008078:	429e      	cmp	r6, r3
 800807a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800807e:	f280 80c4 	bge.w	800820a <_strtod_l+0x84a>
 8008082:	1b9b      	subs	r3, r3, r6
 8008084:	2b1f      	cmp	r3, #31
 8008086:	eba2 0203 	sub.w	r2, r2, r3
 800808a:	f04f 0101 	mov.w	r1, #1
 800808e:	f300 80b0 	bgt.w	80081f2 <_strtod_l+0x832>
 8008092:	fa01 f303 	lsl.w	r3, r1, r3
 8008096:	930e      	str	r3, [sp, #56]	; 0x38
 8008098:	2300      	movs	r3, #0
 800809a:	930d      	str	r3, [sp, #52]	; 0x34
 800809c:	eb0a 0602 	add.w	r6, sl, r2
 80080a0:	9b04      	ldr	r3, [sp, #16]
 80080a2:	45b2      	cmp	sl, r6
 80080a4:	4417      	add	r7, r2
 80080a6:	441f      	add	r7, r3
 80080a8:	4653      	mov	r3, sl
 80080aa:	bfa8      	it	ge
 80080ac:	4633      	movge	r3, r6
 80080ae:	42bb      	cmp	r3, r7
 80080b0:	bfa8      	it	ge
 80080b2:	463b      	movge	r3, r7
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	bfc2      	ittt	gt
 80080b8:	1af6      	subgt	r6, r6, r3
 80080ba:	1aff      	subgt	r7, r7, r3
 80080bc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80080c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	dd17      	ble.n	80080f6 <_strtod_l+0x736>
 80080c6:	4659      	mov	r1, fp
 80080c8:	461a      	mov	r2, r3
 80080ca:	4620      	mov	r0, r4
 80080cc:	f002 fd8c 	bl	800abe8 <__pow5mult>
 80080d0:	4683      	mov	fp, r0
 80080d2:	2800      	cmp	r0, #0
 80080d4:	f43f aeb8 	beq.w	8007e48 <_strtod_l+0x488>
 80080d8:	4601      	mov	r1, r0
 80080da:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80080dc:	4620      	mov	r0, r4
 80080de:	f002 fcd9 	bl	800aa94 <__multiply>
 80080e2:	900b      	str	r0, [sp, #44]	; 0x2c
 80080e4:	2800      	cmp	r0, #0
 80080e6:	f43f aeaf 	beq.w	8007e48 <_strtod_l+0x488>
 80080ea:	9916      	ldr	r1, [sp, #88]	; 0x58
 80080ec:	4620      	mov	r0, r4
 80080ee:	f002 fbbb 	bl	800a868 <_Bfree>
 80080f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080f4:	9316      	str	r3, [sp, #88]	; 0x58
 80080f6:	2e00      	cmp	r6, #0
 80080f8:	f300 808c 	bgt.w	8008214 <_strtod_l+0x854>
 80080fc:	9b08      	ldr	r3, [sp, #32]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dd08      	ble.n	8008114 <_strtod_l+0x754>
 8008102:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008104:	9905      	ldr	r1, [sp, #20]
 8008106:	4620      	mov	r0, r4
 8008108:	f002 fd6e 	bl	800abe8 <__pow5mult>
 800810c:	9005      	str	r0, [sp, #20]
 800810e:	2800      	cmp	r0, #0
 8008110:	f43f ae9a 	beq.w	8007e48 <_strtod_l+0x488>
 8008114:	2f00      	cmp	r7, #0
 8008116:	dd08      	ble.n	800812a <_strtod_l+0x76a>
 8008118:	9905      	ldr	r1, [sp, #20]
 800811a:	463a      	mov	r2, r7
 800811c:	4620      	mov	r0, r4
 800811e:	f002 fdbd 	bl	800ac9c <__lshift>
 8008122:	9005      	str	r0, [sp, #20]
 8008124:	2800      	cmp	r0, #0
 8008126:	f43f ae8f 	beq.w	8007e48 <_strtod_l+0x488>
 800812a:	f1ba 0f00 	cmp.w	sl, #0
 800812e:	dd08      	ble.n	8008142 <_strtod_l+0x782>
 8008130:	4659      	mov	r1, fp
 8008132:	4652      	mov	r2, sl
 8008134:	4620      	mov	r0, r4
 8008136:	f002 fdb1 	bl	800ac9c <__lshift>
 800813a:	4683      	mov	fp, r0
 800813c:	2800      	cmp	r0, #0
 800813e:	f43f ae83 	beq.w	8007e48 <_strtod_l+0x488>
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008146:	4620      	mov	r0, r4
 8008148:	f002 fe30 	bl	800adac <__mdiff>
 800814c:	4605      	mov	r5, r0
 800814e:	2800      	cmp	r0, #0
 8008150:	f43f ae7a 	beq.w	8007e48 <_strtod_l+0x488>
 8008154:	68c3      	ldr	r3, [r0, #12]
 8008156:	930b      	str	r3, [sp, #44]	; 0x2c
 8008158:	2300      	movs	r3, #0
 800815a:	60c3      	str	r3, [r0, #12]
 800815c:	4659      	mov	r1, fp
 800815e:	f002 fe09 	bl	800ad74 <__mcmp>
 8008162:	2800      	cmp	r0, #0
 8008164:	da60      	bge.n	8008228 <_strtod_l+0x868>
 8008166:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008168:	ea53 0308 	orrs.w	r3, r3, r8
 800816c:	f040 8084 	bne.w	8008278 <_strtod_l+0x8b8>
 8008170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008174:	2b00      	cmp	r3, #0
 8008176:	d17f      	bne.n	8008278 <_strtod_l+0x8b8>
 8008178:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800817c:	0d1b      	lsrs	r3, r3, #20
 800817e:	051b      	lsls	r3, r3, #20
 8008180:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008184:	d978      	bls.n	8008278 <_strtod_l+0x8b8>
 8008186:	696b      	ldr	r3, [r5, #20]
 8008188:	b913      	cbnz	r3, 8008190 <_strtod_l+0x7d0>
 800818a:	692b      	ldr	r3, [r5, #16]
 800818c:	2b01      	cmp	r3, #1
 800818e:	dd73      	ble.n	8008278 <_strtod_l+0x8b8>
 8008190:	4629      	mov	r1, r5
 8008192:	2201      	movs	r2, #1
 8008194:	4620      	mov	r0, r4
 8008196:	f002 fd81 	bl	800ac9c <__lshift>
 800819a:	4659      	mov	r1, fp
 800819c:	4605      	mov	r5, r0
 800819e:	f002 fde9 	bl	800ad74 <__mcmp>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	dd68      	ble.n	8008278 <_strtod_l+0x8b8>
 80081a6:	9904      	ldr	r1, [sp, #16]
 80081a8:	4a54      	ldr	r2, [pc, #336]	; (80082fc <_strtod_l+0x93c>)
 80081aa:	464b      	mov	r3, r9
 80081ac:	2900      	cmp	r1, #0
 80081ae:	f000 8084 	beq.w	80082ba <_strtod_l+0x8fa>
 80081b2:	ea02 0109 	and.w	r1, r2, r9
 80081b6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80081ba:	dc7e      	bgt.n	80082ba <_strtod_l+0x8fa>
 80081bc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80081c0:	f77f aeb3 	ble.w	8007f2a <_strtod_l+0x56a>
 80081c4:	4b4e      	ldr	r3, [pc, #312]	; (8008300 <_strtod_l+0x940>)
 80081c6:	4640      	mov	r0, r8
 80081c8:	4649      	mov	r1, r9
 80081ca:	2200      	movs	r2, #0
 80081cc:	f7f8 fa34 	bl	8000638 <__aeabi_dmul>
 80081d0:	4b4a      	ldr	r3, [pc, #296]	; (80082fc <_strtod_l+0x93c>)
 80081d2:	400b      	ands	r3, r1
 80081d4:	4680      	mov	r8, r0
 80081d6:	4689      	mov	r9, r1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f47f ae3f 	bne.w	8007e5c <_strtod_l+0x49c>
 80081de:	2322      	movs	r3, #34	; 0x22
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	e63b      	b.n	8007e5c <_strtod_l+0x49c>
 80081e4:	f04f 32ff 	mov.w	r2, #4294967295
 80081e8:	fa02 f303 	lsl.w	r3, r2, r3
 80081ec:	ea03 0808 	and.w	r8, r3, r8
 80081f0:	e6e8      	b.n	8007fc4 <_strtod_l+0x604>
 80081f2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80081f6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80081fa:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80081fe:	36e2      	adds	r6, #226	; 0xe2
 8008200:	fa01 f306 	lsl.w	r3, r1, r6
 8008204:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8008208:	e748      	b.n	800809c <_strtod_l+0x6dc>
 800820a:	2100      	movs	r1, #0
 800820c:	2301      	movs	r3, #1
 800820e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8008212:	e743      	b.n	800809c <_strtod_l+0x6dc>
 8008214:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008216:	4632      	mov	r2, r6
 8008218:	4620      	mov	r0, r4
 800821a:	f002 fd3f 	bl	800ac9c <__lshift>
 800821e:	9016      	str	r0, [sp, #88]	; 0x58
 8008220:	2800      	cmp	r0, #0
 8008222:	f47f af6b 	bne.w	80080fc <_strtod_l+0x73c>
 8008226:	e60f      	b.n	8007e48 <_strtod_l+0x488>
 8008228:	46ca      	mov	sl, r9
 800822a:	d171      	bne.n	8008310 <_strtod_l+0x950>
 800822c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800822e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008232:	b352      	cbz	r2, 800828a <_strtod_l+0x8ca>
 8008234:	4a33      	ldr	r2, [pc, #204]	; (8008304 <_strtod_l+0x944>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d12a      	bne.n	8008290 <_strtod_l+0x8d0>
 800823a:	9b04      	ldr	r3, [sp, #16]
 800823c:	4641      	mov	r1, r8
 800823e:	b1fb      	cbz	r3, 8008280 <_strtod_l+0x8c0>
 8008240:	4b2e      	ldr	r3, [pc, #184]	; (80082fc <_strtod_l+0x93c>)
 8008242:	ea09 0303 	and.w	r3, r9, r3
 8008246:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800824a:	f04f 32ff 	mov.w	r2, #4294967295
 800824e:	d81a      	bhi.n	8008286 <_strtod_l+0x8c6>
 8008250:	0d1b      	lsrs	r3, r3, #20
 8008252:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008256:	fa02 f303 	lsl.w	r3, r2, r3
 800825a:	4299      	cmp	r1, r3
 800825c:	d118      	bne.n	8008290 <_strtod_l+0x8d0>
 800825e:	4b2a      	ldr	r3, [pc, #168]	; (8008308 <_strtod_l+0x948>)
 8008260:	459a      	cmp	sl, r3
 8008262:	d102      	bne.n	800826a <_strtod_l+0x8aa>
 8008264:	3101      	adds	r1, #1
 8008266:	f43f adef 	beq.w	8007e48 <_strtod_l+0x488>
 800826a:	4b24      	ldr	r3, [pc, #144]	; (80082fc <_strtod_l+0x93c>)
 800826c:	ea0a 0303 	and.w	r3, sl, r3
 8008270:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	9b04      	ldr	r3, [sp, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d1a2      	bne.n	80081c4 <_strtod_l+0x804>
 800827e:	e5ed      	b.n	8007e5c <_strtod_l+0x49c>
 8008280:	f04f 33ff 	mov.w	r3, #4294967295
 8008284:	e7e9      	b.n	800825a <_strtod_l+0x89a>
 8008286:	4613      	mov	r3, r2
 8008288:	e7e7      	b.n	800825a <_strtod_l+0x89a>
 800828a:	ea53 0308 	orrs.w	r3, r3, r8
 800828e:	d08a      	beq.n	80081a6 <_strtod_l+0x7e6>
 8008290:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008292:	b1e3      	cbz	r3, 80082ce <_strtod_l+0x90e>
 8008294:	ea13 0f0a 	tst.w	r3, sl
 8008298:	d0ee      	beq.n	8008278 <_strtod_l+0x8b8>
 800829a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800829c:	9a04      	ldr	r2, [sp, #16]
 800829e:	4640      	mov	r0, r8
 80082a0:	4649      	mov	r1, r9
 80082a2:	b1c3      	cbz	r3, 80082d6 <_strtod_l+0x916>
 80082a4:	f7ff fb6d 	bl	8007982 <sulp>
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	ec51 0b18 	vmov	r0, r1, d8
 80082b0:	f7f8 f80c 	bl	80002cc <__adddf3>
 80082b4:	4680      	mov	r8, r0
 80082b6:	4689      	mov	r9, r1
 80082b8:	e7de      	b.n	8008278 <_strtod_l+0x8b8>
 80082ba:	4013      	ands	r3, r2
 80082bc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80082c0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80082c4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80082c8:	f04f 38ff 	mov.w	r8, #4294967295
 80082cc:	e7d4      	b.n	8008278 <_strtod_l+0x8b8>
 80082ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082d0:	ea13 0f08 	tst.w	r3, r8
 80082d4:	e7e0      	b.n	8008298 <_strtod_l+0x8d8>
 80082d6:	f7ff fb54 	bl	8007982 <sulp>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	ec51 0b18 	vmov	r0, r1, d8
 80082e2:	f7f7 fff1 	bl	80002c8 <__aeabi_dsub>
 80082e6:	2200      	movs	r2, #0
 80082e8:	2300      	movs	r3, #0
 80082ea:	4680      	mov	r8, r0
 80082ec:	4689      	mov	r9, r1
 80082ee:	f7f8 fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0c0      	beq.n	8008278 <_strtod_l+0x8b8>
 80082f6:	e618      	b.n	8007f2a <_strtod_l+0x56a>
 80082f8:	fffffc02 	.word	0xfffffc02
 80082fc:	7ff00000 	.word	0x7ff00000
 8008300:	39500000 	.word	0x39500000
 8008304:	000fffff 	.word	0x000fffff
 8008308:	7fefffff 	.word	0x7fefffff
 800830c:	0800bd28 	.word	0x0800bd28
 8008310:	4659      	mov	r1, fp
 8008312:	4628      	mov	r0, r5
 8008314:	f002 fe9e 	bl	800b054 <__ratio>
 8008318:	ec57 6b10 	vmov	r6, r7, d0
 800831c:	ee10 0a10 	vmov	r0, s0
 8008320:	2200      	movs	r2, #0
 8008322:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008326:	4639      	mov	r1, r7
 8008328:	f7f8 fc02 	bl	8000b30 <__aeabi_dcmple>
 800832c:	2800      	cmp	r0, #0
 800832e:	d071      	beq.n	8008414 <_strtod_l+0xa54>
 8008330:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d17c      	bne.n	8008430 <_strtod_l+0xa70>
 8008336:	f1b8 0f00 	cmp.w	r8, #0
 800833a:	d15a      	bne.n	80083f2 <_strtod_l+0xa32>
 800833c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008340:	2b00      	cmp	r3, #0
 8008342:	d15d      	bne.n	8008400 <_strtod_l+0xa40>
 8008344:	4b90      	ldr	r3, [pc, #576]	; (8008588 <_strtod_l+0xbc8>)
 8008346:	2200      	movs	r2, #0
 8008348:	4630      	mov	r0, r6
 800834a:	4639      	mov	r1, r7
 800834c:	f7f8 fbe6 	bl	8000b1c <__aeabi_dcmplt>
 8008350:	2800      	cmp	r0, #0
 8008352:	d15c      	bne.n	800840e <_strtod_l+0xa4e>
 8008354:	4630      	mov	r0, r6
 8008356:	4639      	mov	r1, r7
 8008358:	4b8c      	ldr	r3, [pc, #560]	; (800858c <_strtod_l+0xbcc>)
 800835a:	2200      	movs	r2, #0
 800835c:	f7f8 f96c 	bl	8000638 <__aeabi_dmul>
 8008360:	4606      	mov	r6, r0
 8008362:	460f      	mov	r7, r1
 8008364:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008368:	9606      	str	r6, [sp, #24]
 800836a:	9307      	str	r3, [sp, #28]
 800836c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008370:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008374:	4b86      	ldr	r3, [pc, #536]	; (8008590 <_strtod_l+0xbd0>)
 8008376:	ea0a 0303 	and.w	r3, sl, r3
 800837a:	930d      	str	r3, [sp, #52]	; 0x34
 800837c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800837e:	4b85      	ldr	r3, [pc, #532]	; (8008594 <_strtod_l+0xbd4>)
 8008380:	429a      	cmp	r2, r3
 8008382:	f040 8090 	bne.w	80084a6 <_strtod_l+0xae6>
 8008386:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800838a:	ec49 8b10 	vmov	d0, r8, r9
 800838e:	f002 fd97 	bl	800aec0 <__ulp>
 8008392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008396:	ec51 0b10 	vmov	r0, r1, d0
 800839a:	f7f8 f94d 	bl	8000638 <__aeabi_dmul>
 800839e:	4642      	mov	r2, r8
 80083a0:	464b      	mov	r3, r9
 80083a2:	f7f7 ff93 	bl	80002cc <__adddf3>
 80083a6:	460b      	mov	r3, r1
 80083a8:	4979      	ldr	r1, [pc, #484]	; (8008590 <_strtod_l+0xbd0>)
 80083aa:	4a7b      	ldr	r2, [pc, #492]	; (8008598 <_strtod_l+0xbd8>)
 80083ac:	4019      	ands	r1, r3
 80083ae:	4291      	cmp	r1, r2
 80083b0:	4680      	mov	r8, r0
 80083b2:	d944      	bls.n	800843e <_strtod_l+0xa7e>
 80083b4:	ee18 2a90 	vmov	r2, s17
 80083b8:	4b78      	ldr	r3, [pc, #480]	; (800859c <_strtod_l+0xbdc>)
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d104      	bne.n	80083c8 <_strtod_l+0xa08>
 80083be:	ee18 3a10 	vmov	r3, s16
 80083c2:	3301      	adds	r3, #1
 80083c4:	f43f ad40 	beq.w	8007e48 <_strtod_l+0x488>
 80083c8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800859c <_strtod_l+0xbdc>
 80083cc:	f04f 38ff 	mov.w	r8, #4294967295
 80083d0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80083d2:	4620      	mov	r0, r4
 80083d4:	f002 fa48 	bl	800a868 <_Bfree>
 80083d8:	9905      	ldr	r1, [sp, #20]
 80083da:	4620      	mov	r0, r4
 80083dc:	f002 fa44 	bl	800a868 <_Bfree>
 80083e0:	4659      	mov	r1, fp
 80083e2:	4620      	mov	r0, r4
 80083e4:	f002 fa40 	bl	800a868 <_Bfree>
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f002 fa3c 	bl	800a868 <_Bfree>
 80083f0:	e609      	b.n	8008006 <_strtod_l+0x646>
 80083f2:	f1b8 0f01 	cmp.w	r8, #1
 80083f6:	d103      	bne.n	8008400 <_strtod_l+0xa40>
 80083f8:	f1b9 0f00 	cmp.w	r9, #0
 80083fc:	f43f ad95 	beq.w	8007f2a <_strtod_l+0x56a>
 8008400:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008558 <_strtod_l+0xb98>
 8008404:	4f60      	ldr	r7, [pc, #384]	; (8008588 <_strtod_l+0xbc8>)
 8008406:	ed8d 7b06 	vstr	d7, [sp, #24]
 800840a:	2600      	movs	r6, #0
 800840c:	e7ae      	b.n	800836c <_strtod_l+0x9ac>
 800840e:	4f5f      	ldr	r7, [pc, #380]	; (800858c <_strtod_l+0xbcc>)
 8008410:	2600      	movs	r6, #0
 8008412:	e7a7      	b.n	8008364 <_strtod_l+0x9a4>
 8008414:	4b5d      	ldr	r3, [pc, #372]	; (800858c <_strtod_l+0xbcc>)
 8008416:	4630      	mov	r0, r6
 8008418:	4639      	mov	r1, r7
 800841a:	2200      	movs	r2, #0
 800841c:	f7f8 f90c 	bl	8000638 <__aeabi_dmul>
 8008420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008422:	4606      	mov	r6, r0
 8008424:	460f      	mov	r7, r1
 8008426:	2b00      	cmp	r3, #0
 8008428:	d09c      	beq.n	8008364 <_strtod_l+0x9a4>
 800842a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800842e:	e79d      	b.n	800836c <_strtod_l+0x9ac>
 8008430:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008560 <_strtod_l+0xba0>
 8008434:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008438:	ec57 6b17 	vmov	r6, r7, d7
 800843c:	e796      	b.n	800836c <_strtod_l+0x9ac>
 800843e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008442:	9b04      	ldr	r3, [sp, #16]
 8008444:	46ca      	mov	sl, r9
 8008446:	2b00      	cmp	r3, #0
 8008448:	d1c2      	bne.n	80083d0 <_strtod_l+0xa10>
 800844a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800844e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008450:	0d1b      	lsrs	r3, r3, #20
 8008452:	051b      	lsls	r3, r3, #20
 8008454:	429a      	cmp	r2, r3
 8008456:	d1bb      	bne.n	80083d0 <_strtod_l+0xa10>
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f7f8 fc9c 	bl	8000d98 <__aeabi_d2lz>
 8008460:	f7f8 f8bc 	bl	80005dc <__aeabi_l2d>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	f7f7 ff2c 	bl	80002c8 <__aeabi_dsub>
 8008470:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008472:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008476:	ea43 0308 	orr.w	r3, r3, r8
 800847a:	4313      	orrs	r3, r2
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	d054      	beq.n	800852c <_strtod_l+0xb6c>
 8008482:	a339      	add	r3, pc, #228	; (adr r3, 8008568 <_strtod_l+0xba8>)
 8008484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008488:	f7f8 fb48 	bl	8000b1c <__aeabi_dcmplt>
 800848c:	2800      	cmp	r0, #0
 800848e:	f47f ace5 	bne.w	8007e5c <_strtod_l+0x49c>
 8008492:	a337      	add	r3, pc, #220	; (adr r3, 8008570 <_strtod_l+0xbb0>)
 8008494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb5c 	bl	8000b58 <__aeabi_dcmpgt>
 80084a0:	2800      	cmp	r0, #0
 80084a2:	d095      	beq.n	80083d0 <_strtod_l+0xa10>
 80084a4:	e4da      	b.n	8007e5c <_strtod_l+0x49c>
 80084a6:	9b04      	ldr	r3, [sp, #16]
 80084a8:	b333      	cbz	r3, 80084f8 <_strtod_l+0xb38>
 80084aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80084b0:	d822      	bhi.n	80084f8 <_strtod_l+0xb38>
 80084b2:	a331      	add	r3, pc, #196	; (adr r3, 8008578 <_strtod_l+0xbb8>)
 80084b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b8:	4630      	mov	r0, r6
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f8 fb38 	bl	8000b30 <__aeabi_dcmple>
 80084c0:	b1a0      	cbz	r0, 80084ec <_strtod_l+0xb2c>
 80084c2:	4639      	mov	r1, r7
 80084c4:	4630      	mov	r0, r6
 80084c6:	f7f8 fb8f 	bl	8000be8 <__aeabi_d2uiz>
 80084ca:	2801      	cmp	r0, #1
 80084cc:	bf38      	it	cc
 80084ce:	2001      	movcc	r0, #1
 80084d0:	f7f8 f838 	bl	8000544 <__aeabi_ui2d>
 80084d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084d6:	4606      	mov	r6, r0
 80084d8:	460f      	mov	r7, r1
 80084da:	bb23      	cbnz	r3, 8008526 <_strtod_l+0xb66>
 80084dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80084e0:	9010      	str	r0, [sp, #64]	; 0x40
 80084e2:	9311      	str	r3, [sp, #68]	; 0x44
 80084e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084e8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80084ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80084ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80084f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80084f4:	1a9b      	subs	r3, r3, r2
 80084f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80084f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80084fc:	eeb0 0a48 	vmov.f32	s0, s16
 8008500:	eef0 0a68 	vmov.f32	s1, s17
 8008504:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8008508:	f002 fcda 	bl	800aec0 <__ulp>
 800850c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008510:	ec53 2b10 	vmov	r2, r3, d0
 8008514:	f7f8 f890 	bl	8000638 <__aeabi_dmul>
 8008518:	ec53 2b18 	vmov	r2, r3, d8
 800851c:	f7f7 fed6 	bl	80002cc <__adddf3>
 8008520:	4680      	mov	r8, r0
 8008522:	4689      	mov	r9, r1
 8008524:	e78d      	b.n	8008442 <_strtod_l+0xa82>
 8008526:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800852a:	e7db      	b.n	80084e4 <_strtod_l+0xb24>
 800852c:	a314      	add	r3, pc, #80	; (adr r3, 8008580 <_strtod_l+0xbc0>)
 800852e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008532:	f7f8 faf3 	bl	8000b1c <__aeabi_dcmplt>
 8008536:	e7b3      	b.n	80084a0 <_strtod_l+0xae0>
 8008538:	2300      	movs	r3, #0
 800853a:	930a      	str	r3, [sp, #40]	; 0x28
 800853c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800853e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	f7ff ba7c 	b.w	8007a3e <_strtod_l+0x7e>
 8008546:	2a65      	cmp	r2, #101	; 0x65
 8008548:	f43f ab75 	beq.w	8007c36 <_strtod_l+0x276>
 800854c:	2a45      	cmp	r2, #69	; 0x45
 800854e:	f43f ab72 	beq.w	8007c36 <_strtod_l+0x276>
 8008552:	2301      	movs	r3, #1
 8008554:	f7ff bbaa 	b.w	8007cac <_strtod_l+0x2ec>
 8008558:	00000000 	.word	0x00000000
 800855c:	bff00000 	.word	0xbff00000
 8008560:	00000000 	.word	0x00000000
 8008564:	3ff00000 	.word	0x3ff00000
 8008568:	94a03595 	.word	0x94a03595
 800856c:	3fdfffff 	.word	0x3fdfffff
 8008570:	35afe535 	.word	0x35afe535
 8008574:	3fe00000 	.word	0x3fe00000
 8008578:	ffc00000 	.word	0xffc00000
 800857c:	41dfffff 	.word	0x41dfffff
 8008580:	94a03595 	.word	0x94a03595
 8008584:	3fcfffff 	.word	0x3fcfffff
 8008588:	3ff00000 	.word	0x3ff00000
 800858c:	3fe00000 	.word	0x3fe00000
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	7fe00000 	.word	0x7fe00000
 8008598:	7c9fffff 	.word	0x7c9fffff
 800859c:	7fefffff 	.word	0x7fefffff

080085a0 <strtod>:
 80085a0:	460a      	mov	r2, r1
 80085a2:	4601      	mov	r1, r0
 80085a4:	4802      	ldr	r0, [pc, #8]	; (80085b0 <strtod+0x10>)
 80085a6:	4b03      	ldr	r3, [pc, #12]	; (80085b4 <strtod+0x14>)
 80085a8:	6800      	ldr	r0, [r0, #0]
 80085aa:	f7ff ba09 	b.w	80079c0 <_strtod_l>
 80085ae:	bf00      	nop
 80085b0:	200001d4 	.word	0x200001d4
 80085b4:	2000001c 	.word	0x2000001c

080085b8 <__cvt>:
 80085b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	ec55 4b10 	vmov	r4, r5, d0
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	460e      	mov	r6, r1
 80085c4:	4619      	mov	r1, r3
 80085c6:	462b      	mov	r3, r5
 80085c8:	bfbb      	ittet	lt
 80085ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80085ce:	461d      	movlt	r5, r3
 80085d0:	2300      	movge	r3, #0
 80085d2:	232d      	movlt	r3, #45	; 0x2d
 80085d4:	700b      	strb	r3, [r1, #0]
 80085d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80085dc:	4691      	mov	r9, r2
 80085de:	f023 0820 	bic.w	r8, r3, #32
 80085e2:	bfbc      	itt	lt
 80085e4:	4622      	movlt	r2, r4
 80085e6:	4614      	movlt	r4, r2
 80085e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80085ec:	d005      	beq.n	80085fa <__cvt+0x42>
 80085ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80085f2:	d100      	bne.n	80085f6 <__cvt+0x3e>
 80085f4:	3601      	adds	r6, #1
 80085f6:	2102      	movs	r1, #2
 80085f8:	e000      	b.n	80085fc <__cvt+0x44>
 80085fa:	2103      	movs	r1, #3
 80085fc:	ab03      	add	r3, sp, #12
 80085fe:	9301      	str	r3, [sp, #4]
 8008600:	ab02      	add	r3, sp, #8
 8008602:	9300      	str	r3, [sp, #0]
 8008604:	ec45 4b10 	vmov	d0, r4, r5
 8008608:	4653      	mov	r3, sl
 800860a:	4632      	mov	r2, r6
 800860c:	f000 fe90 	bl	8009330 <_dtoa_r>
 8008610:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008614:	4607      	mov	r7, r0
 8008616:	d102      	bne.n	800861e <__cvt+0x66>
 8008618:	f019 0f01 	tst.w	r9, #1
 800861c:	d022      	beq.n	8008664 <__cvt+0xac>
 800861e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008622:	eb07 0906 	add.w	r9, r7, r6
 8008626:	d110      	bne.n	800864a <__cvt+0x92>
 8008628:	783b      	ldrb	r3, [r7, #0]
 800862a:	2b30      	cmp	r3, #48	; 0x30
 800862c:	d10a      	bne.n	8008644 <__cvt+0x8c>
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	4620      	mov	r0, r4
 8008634:	4629      	mov	r1, r5
 8008636:	f7f8 fa67 	bl	8000b08 <__aeabi_dcmpeq>
 800863a:	b918      	cbnz	r0, 8008644 <__cvt+0x8c>
 800863c:	f1c6 0601 	rsb	r6, r6, #1
 8008640:	f8ca 6000 	str.w	r6, [sl]
 8008644:	f8da 3000 	ldr.w	r3, [sl]
 8008648:	4499      	add	r9, r3
 800864a:	2200      	movs	r2, #0
 800864c:	2300      	movs	r3, #0
 800864e:	4620      	mov	r0, r4
 8008650:	4629      	mov	r1, r5
 8008652:	f7f8 fa59 	bl	8000b08 <__aeabi_dcmpeq>
 8008656:	b108      	cbz	r0, 800865c <__cvt+0xa4>
 8008658:	f8cd 900c 	str.w	r9, [sp, #12]
 800865c:	2230      	movs	r2, #48	; 0x30
 800865e:	9b03      	ldr	r3, [sp, #12]
 8008660:	454b      	cmp	r3, r9
 8008662:	d307      	bcc.n	8008674 <__cvt+0xbc>
 8008664:	9b03      	ldr	r3, [sp, #12]
 8008666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008668:	1bdb      	subs	r3, r3, r7
 800866a:	4638      	mov	r0, r7
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	b004      	add	sp, #16
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	1c59      	adds	r1, r3, #1
 8008676:	9103      	str	r1, [sp, #12]
 8008678:	701a      	strb	r2, [r3, #0]
 800867a:	e7f0      	b.n	800865e <__cvt+0xa6>

0800867c <__exponent>:
 800867c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800867e:	4603      	mov	r3, r0
 8008680:	2900      	cmp	r1, #0
 8008682:	bfb8      	it	lt
 8008684:	4249      	neglt	r1, r1
 8008686:	f803 2b02 	strb.w	r2, [r3], #2
 800868a:	bfb4      	ite	lt
 800868c:	222d      	movlt	r2, #45	; 0x2d
 800868e:	222b      	movge	r2, #43	; 0x2b
 8008690:	2909      	cmp	r1, #9
 8008692:	7042      	strb	r2, [r0, #1]
 8008694:	dd2a      	ble.n	80086ec <__exponent+0x70>
 8008696:	f10d 0207 	add.w	r2, sp, #7
 800869a:	4617      	mov	r7, r2
 800869c:	260a      	movs	r6, #10
 800869e:	4694      	mov	ip, r2
 80086a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80086a4:	fb06 1415 	mls	r4, r6, r5, r1
 80086a8:	3430      	adds	r4, #48	; 0x30
 80086aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80086ae:	460c      	mov	r4, r1
 80086b0:	2c63      	cmp	r4, #99	; 0x63
 80086b2:	f102 32ff 	add.w	r2, r2, #4294967295
 80086b6:	4629      	mov	r1, r5
 80086b8:	dcf1      	bgt.n	800869e <__exponent+0x22>
 80086ba:	3130      	adds	r1, #48	; 0x30
 80086bc:	f1ac 0402 	sub.w	r4, ip, #2
 80086c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80086c4:	1c41      	adds	r1, r0, #1
 80086c6:	4622      	mov	r2, r4
 80086c8:	42ba      	cmp	r2, r7
 80086ca:	d30a      	bcc.n	80086e2 <__exponent+0x66>
 80086cc:	f10d 0209 	add.w	r2, sp, #9
 80086d0:	eba2 020c 	sub.w	r2, r2, ip
 80086d4:	42bc      	cmp	r4, r7
 80086d6:	bf88      	it	hi
 80086d8:	2200      	movhi	r2, #0
 80086da:	4413      	add	r3, r2
 80086dc:	1a18      	subs	r0, r3, r0
 80086de:	b003      	add	sp, #12
 80086e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80086e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80086ea:	e7ed      	b.n	80086c8 <__exponent+0x4c>
 80086ec:	2330      	movs	r3, #48	; 0x30
 80086ee:	3130      	adds	r1, #48	; 0x30
 80086f0:	7083      	strb	r3, [r0, #2]
 80086f2:	70c1      	strb	r1, [r0, #3]
 80086f4:	1d03      	adds	r3, r0, #4
 80086f6:	e7f1      	b.n	80086dc <__exponent+0x60>

080086f8 <_printf_float>:
 80086f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086fc:	ed2d 8b02 	vpush	{d8}
 8008700:	b08d      	sub	sp, #52	; 0x34
 8008702:	460c      	mov	r4, r1
 8008704:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008708:	4616      	mov	r6, r2
 800870a:	461f      	mov	r7, r3
 800870c:	4605      	mov	r5, r0
 800870e:	f000 fcf9 	bl	8009104 <_localeconv_r>
 8008712:	f8d0 a000 	ldr.w	sl, [r0]
 8008716:	4650      	mov	r0, sl
 8008718:	f7f7 fdca 	bl	80002b0 <strlen>
 800871c:	2300      	movs	r3, #0
 800871e:	930a      	str	r3, [sp, #40]	; 0x28
 8008720:	6823      	ldr	r3, [r4, #0]
 8008722:	9305      	str	r3, [sp, #20]
 8008724:	f8d8 3000 	ldr.w	r3, [r8]
 8008728:	f894 b018 	ldrb.w	fp, [r4, #24]
 800872c:	3307      	adds	r3, #7
 800872e:	f023 0307 	bic.w	r3, r3, #7
 8008732:	f103 0208 	add.w	r2, r3, #8
 8008736:	f8c8 2000 	str.w	r2, [r8]
 800873a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800873e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008742:	9307      	str	r3, [sp, #28]
 8008744:	f8cd 8018 	str.w	r8, [sp, #24]
 8008748:	ee08 0a10 	vmov	s16, r0
 800874c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008750:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008754:	4b9e      	ldr	r3, [pc, #632]	; (80089d0 <_printf_float+0x2d8>)
 8008756:	f04f 32ff 	mov.w	r2, #4294967295
 800875a:	f7f8 fa07 	bl	8000b6c <__aeabi_dcmpun>
 800875e:	bb88      	cbnz	r0, 80087c4 <_printf_float+0xcc>
 8008760:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008764:	4b9a      	ldr	r3, [pc, #616]	; (80089d0 <_printf_float+0x2d8>)
 8008766:	f04f 32ff 	mov.w	r2, #4294967295
 800876a:	f7f8 f9e1 	bl	8000b30 <__aeabi_dcmple>
 800876e:	bb48      	cbnz	r0, 80087c4 <_printf_float+0xcc>
 8008770:	2200      	movs	r2, #0
 8008772:	2300      	movs	r3, #0
 8008774:	4640      	mov	r0, r8
 8008776:	4649      	mov	r1, r9
 8008778:	f7f8 f9d0 	bl	8000b1c <__aeabi_dcmplt>
 800877c:	b110      	cbz	r0, 8008784 <_printf_float+0x8c>
 800877e:	232d      	movs	r3, #45	; 0x2d
 8008780:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008784:	4a93      	ldr	r2, [pc, #588]	; (80089d4 <_printf_float+0x2dc>)
 8008786:	4b94      	ldr	r3, [pc, #592]	; (80089d8 <_printf_float+0x2e0>)
 8008788:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800878c:	bf94      	ite	ls
 800878e:	4690      	movls	r8, r2
 8008790:	4698      	movhi	r8, r3
 8008792:	2303      	movs	r3, #3
 8008794:	6123      	str	r3, [r4, #16]
 8008796:	9b05      	ldr	r3, [sp, #20]
 8008798:	f023 0304 	bic.w	r3, r3, #4
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	f04f 0900 	mov.w	r9, #0
 80087a2:	9700      	str	r7, [sp, #0]
 80087a4:	4633      	mov	r3, r6
 80087a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80087a8:	4621      	mov	r1, r4
 80087aa:	4628      	mov	r0, r5
 80087ac:	f000 f9da 	bl	8008b64 <_printf_common>
 80087b0:	3001      	adds	r0, #1
 80087b2:	f040 8090 	bne.w	80088d6 <_printf_float+0x1de>
 80087b6:	f04f 30ff 	mov.w	r0, #4294967295
 80087ba:	b00d      	add	sp, #52	; 0x34
 80087bc:	ecbd 8b02 	vpop	{d8}
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087c4:	4642      	mov	r2, r8
 80087c6:	464b      	mov	r3, r9
 80087c8:	4640      	mov	r0, r8
 80087ca:	4649      	mov	r1, r9
 80087cc:	f7f8 f9ce 	bl	8000b6c <__aeabi_dcmpun>
 80087d0:	b140      	cbz	r0, 80087e4 <_printf_float+0xec>
 80087d2:	464b      	mov	r3, r9
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bfbc      	itt	lt
 80087d8:	232d      	movlt	r3, #45	; 0x2d
 80087da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80087de:	4a7f      	ldr	r2, [pc, #508]	; (80089dc <_printf_float+0x2e4>)
 80087e0:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <_printf_float+0x2e8>)
 80087e2:	e7d1      	b.n	8008788 <_printf_float+0x90>
 80087e4:	6863      	ldr	r3, [r4, #4]
 80087e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80087ea:	9206      	str	r2, [sp, #24]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	d13f      	bne.n	8008870 <_printf_float+0x178>
 80087f0:	2306      	movs	r3, #6
 80087f2:	6063      	str	r3, [r4, #4]
 80087f4:	9b05      	ldr	r3, [sp, #20]
 80087f6:	6861      	ldr	r1, [r4, #4]
 80087f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80087fc:	2300      	movs	r3, #0
 80087fe:	9303      	str	r3, [sp, #12]
 8008800:	ab0a      	add	r3, sp, #40	; 0x28
 8008802:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008806:	ab09      	add	r3, sp, #36	; 0x24
 8008808:	ec49 8b10 	vmov	d0, r8, r9
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	6022      	str	r2, [r4, #0]
 8008810:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008814:	4628      	mov	r0, r5
 8008816:	f7ff fecf 	bl	80085b8 <__cvt>
 800881a:	9b06      	ldr	r3, [sp, #24]
 800881c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800881e:	2b47      	cmp	r3, #71	; 0x47
 8008820:	4680      	mov	r8, r0
 8008822:	d108      	bne.n	8008836 <_printf_float+0x13e>
 8008824:	1cc8      	adds	r0, r1, #3
 8008826:	db02      	blt.n	800882e <_printf_float+0x136>
 8008828:	6863      	ldr	r3, [r4, #4]
 800882a:	4299      	cmp	r1, r3
 800882c:	dd41      	ble.n	80088b2 <_printf_float+0x1ba>
 800882e:	f1ab 0302 	sub.w	r3, fp, #2
 8008832:	fa5f fb83 	uxtb.w	fp, r3
 8008836:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800883a:	d820      	bhi.n	800887e <_printf_float+0x186>
 800883c:	3901      	subs	r1, #1
 800883e:	465a      	mov	r2, fp
 8008840:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008844:	9109      	str	r1, [sp, #36]	; 0x24
 8008846:	f7ff ff19 	bl	800867c <__exponent>
 800884a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800884c:	1813      	adds	r3, r2, r0
 800884e:	2a01      	cmp	r2, #1
 8008850:	4681      	mov	r9, r0
 8008852:	6123      	str	r3, [r4, #16]
 8008854:	dc02      	bgt.n	800885c <_printf_float+0x164>
 8008856:	6822      	ldr	r2, [r4, #0]
 8008858:	07d2      	lsls	r2, r2, #31
 800885a:	d501      	bpl.n	8008860 <_printf_float+0x168>
 800885c:	3301      	adds	r3, #1
 800885e:	6123      	str	r3, [r4, #16]
 8008860:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008864:	2b00      	cmp	r3, #0
 8008866:	d09c      	beq.n	80087a2 <_printf_float+0xaa>
 8008868:	232d      	movs	r3, #45	; 0x2d
 800886a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800886e:	e798      	b.n	80087a2 <_printf_float+0xaa>
 8008870:	9a06      	ldr	r2, [sp, #24]
 8008872:	2a47      	cmp	r2, #71	; 0x47
 8008874:	d1be      	bne.n	80087f4 <_printf_float+0xfc>
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1bc      	bne.n	80087f4 <_printf_float+0xfc>
 800887a:	2301      	movs	r3, #1
 800887c:	e7b9      	b.n	80087f2 <_printf_float+0xfa>
 800887e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008882:	d118      	bne.n	80088b6 <_printf_float+0x1be>
 8008884:	2900      	cmp	r1, #0
 8008886:	6863      	ldr	r3, [r4, #4]
 8008888:	dd0b      	ble.n	80088a2 <_printf_float+0x1aa>
 800888a:	6121      	str	r1, [r4, #16]
 800888c:	b913      	cbnz	r3, 8008894 <_printf_float+0x19c>
 800888e:	6822      	ldr	r2, [r4, #0]
 8008890:	07d0      	lsls	r0, r2, #31
 8008892:	d502      	bpl.n	800889a <_printf_float+0x1a2>
 8008894:	3301      	adds	r3, #1
 8008896:	440b      	add	r3, r1
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	65a1      	str	r1, [r4, #88]	; 0x58
 800889c:	f04f 0900 	mov.w	r9, #0
 80088a0:	e7de      	b.n	8008860 <_printf_float+0x168>
 80088a2:	b913      	cbnz	r3, 80088aa <_printf_float+0x1b2>
 80088a4:	6822      	ldr	r2, [r4, #0]
 80088a6:	07d2      	lsls	r2, r2, #31
 80088a8:	d501      	bpl.n	80088ae <_printf_float+0x1b6>
 80088aa:	3302      	adds	r3, #2
 80088ac:	e7f4      	b.n	8008898 <_printf_float+0x1a0>
 80088ae:	2301      	movs	r3, #1
 80088b0:	e7f2      	b.n	8008898 <_printf_float+0x1a0>
 80088b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80088b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088b8:	4299      	cmp	r1, r3
 80088ba:	db05      	blt.n	80088c8 <_printf_float+0x1d0>
 80088bc:	6823      	ldr	r3, [r4, #0]
 80088be:	6121      	str	r1, [r4, #16]
 80088c0:	07d8      	lsls	r0, r3, #31
 80088c2:	d5ea      	bpl.n	800889a <_printf_float+0x1a2>
 80088c4:	1c4b      	adds	r3, r1, #1
 80088c6:	e7e7      	b.n	8008898 <_printf_float+0x1a0>
 80088c8:	2900      	cmp	r1, #0
 80088ca:	bfd4      	ite	le
 80088cc:	f1c1 0202 	rsble	r2, r1, #2
 80088d0:	2201      	movgt	r2, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	e7e0      	b.n	8008898 <_printf_float+0x1a0>
 80088d6:	6823      	ldr	r3, [r4, #0]
 80088d8:	055a      	lsls	r2, r3, #21
 80088da:	d407      	bmi.n	80088ec <_printf_float+0x1f4>
 80088dc:	6923      	ldr	r3, [r4, #16]
 80088de:	4642      	mov	r2, r8
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	d12c      	bne.n	8008944 <_printf_float+0x24c>
 80088ea:	e764      	b.n	80087b6 <_printf_float+0xbe>
 80088ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80088f0:	f240 80e0 	bls.w	8008ab4 <_printf_float+0x3bc>
 80088f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80088f8:	2200      	movs	r2, #0
 80088fa:	2300      	movs	r3, #0
 80088fc:	f7f8 f904 	bl	8000b08 <__aeabi_dcmpeq>
 8008900:	2800      	cmp	r0, #0
 8008902:	d034      	beq.n	800896e <_printf_float+0x276>
 8008904:	4a37      	ldr	r2, [pc, #220]	; (80089e4 <_printf_float+0x2ec>)
 8008906:	2301      	movs	r3, #1
 8008908:	4631      	mov	r1, r6
 800890a:	4628      	mov	r0, r5
 800890c:	47b8      	blx	r7
 800890e:	3001      	adds	r0, #1
 8008910:	f43f af51 	beq.w	80087b6 <_printf_float+0xbe>
 8008914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008918:	429a      	cmp	r2, r3
 800891a:	db02      	blt.n	8008922 <_printf_float+0x22a>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	07d8      	lsls	r0, r3, #31
 8008920:	d510      	bpl.n	8008944 <_printf_float+0x24c>
 8008922:	ee18 3a10 	vmov	r3, s16
 8008926:	4652      	mov	r2, sl
 8008928:	4631      	mov	r1, r6
 800892a:	4628      	mov	r0, r5
 800892c:	47b8      	blx	r7
 800892e:	3001      	adds	r0, #1
 8008930:	f43f af41 	beq.w	80087b6 <_printf_float+0xbe>
 8008934:	f04f 0800 	mov.w	r8, #0
 8008938:	f104 091a 	add.w	r9, r4, #26
 800893c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800893e:	3b01      	subs	r3, #1
 8008940:	4543      	cmp	r3, r8
 8008942:	dc09      	bgt.n	8008958 <_printf_float+0x260>
 8008944:	6823      	ldr	r3, [r4, #0]
 8008946:	079b      	lsls	r3, r3, #30
 8008948:	f100 8107 	bmi.w	8008b5a <_printf_float+0x462>
 800894c:	68e0      	ldr	r0, [r4, #12]
 800894e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008950:	4298      	cmp	r0, r3
 8008952:	bfb8      	it	lt
 8008954:	4618      	movlt	r0, r3
 8008956:	e730      	b.n	80087ba <_printf_float+0xc2>
 8008958:	2301      	movs	r3, #1
 800895a:	464a      	mov	r2, r9
 800895c:	4631      	mov	r1, r6
 800895e:	4628      	mov	r0, r5
 8008960:	47b8      	blx	r7
 8008962:	3001      	adds	r0, #1
 8008964:	f43f af27 	beq.w	80087b6 <_printf_float+0xbe>
 8008968:	f108 0801 	add.w	r8, r8, #1
 800896c:	e7e6      	b.n	800893c <_printf_float+0x244>
 800896e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008970:	2b00      	cmp	r3, #0
 8008972:	dc39      	bgt.n	80089e8 <_printf_float+0x2f0>
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <_printf_float+0x2ec>)
 8008976:	2301      	movs	r3, #1
 8008978:	4631      	mov	r1, r6
 800897a:	4628      	mov	r0, r5
 800897c:	47b8      	blx	r7
 800897e:	3001      	adds	r0, #1
 8008980:	f43f af19 	beq.w	80087b6 <_printf_float+0xbe>
 8008984:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008988:	4313      	orrs	r3, r2
 800898a:	d102      	bne.n	8008992 <_printf_float+0x29a>
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	07d9      	lsls	r1, r3, #31
 8008990:	d5d8      	bpl.n	8008944 <_printf_float+0x24c>
 8008992:	ee18 3a10 	vmov	r3, s16
 8008996:	4652      	mov	r2, sl
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	47b8      	blx	r7
 800899e:	3001      	adds	r0, #1
 80089a0:	f43f af09 	beq.w	80087b6 <_printf_float+0xbe>
 80089a4:	f04f 0900 	mov.w	r9, #0
 80089a8:	f104 0a1a 	add.w	sl, r4, #26
 80089ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ae:	425b      	negs	r3, r3
 80089b0:	454b      	cmp	r3, r9
 80089b2:	dc01      	bgt.n	80089b8 <_printf_float+0x2c0>
 80089b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b6:	e792      	b.n	80088de <_printf_float+0x1e6>
 80089b8:	2301      	movs	r3, #1
 80089ba:	4652      	mov	r2, sl
 80089bc:	4631      	mov	r1, r6
 80089be:	4628      	mov	r0, r5
 80089c0:	47b8      	blx	r7
 80089c2:	3001      	adds	r0, #1
 80089c4:	f43f aef7 	beq.w	80087b6 <_printf_float+0xbe>
 80089c8:	f109 0901 	add.w	r9, r9, #1
 80089cc:	e7ee      	b.n	80089ac <_printf_float+0x2b4>
 80089ce:	bf00      	nop
 80089d0:	7fefffff 	.word	0x7fefffff
 80089d4:	0800bd50 	.word	0x0800bd50
 80089d8:	0800bd54 	.word	0x0800bd54
 80089dc:	0800bd58 	.word	0x0800bd58
 80089e0:	0800bd5c 	.word	0x0800bd5c
 80089e4:	0800bd60 	.word	0x0800bd60
 80089e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80089ec:	429a      	cmp	r2, r3
 80089ee:	bfa8      	it	ge
 80089f0:	461a      	movge	r2, r3
 80089f2:	2a00      	cmp	r2, #0
 80089f4:	4691      	mov	r9, r2
 80089f6:	dc37      	bgt.n	8008a68 <_printf_float+0x370>
 80089f8:	f04f 0b00 	mov.w	fp, #0
 80089fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a00:	f104 021a 	add.w	r2, r4, #26
 8008a04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008a06:	9305      	str	r3, [sp, #20]
 8008a08:	eba3 0309 	sub.w	r3, r3, r9
 8008a0c:	455b      	cmp	r3, fp
 8008a0e:	dc33      	bgt.n	8008a78 <_printf_float+0x380>
 8008a10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a14:	429a      	cmp	r2, r3
 8008a16:	db3b      	blt.n	8008a90 <_printf_float+0x398>
 8008a18:	6823      	ldr	r3, [r4, #0]
 8008a1a:	07da      	lsls	r2, r3, #31
 8008a1c:	d438      	bmi.n	8008a90 <_printf_float+0x398>
 8008a1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008a22:	eba2 0903 	sub.w	r9, r2, r3
 8008a26:	9b05      	ldr	r3, [sp, #20]
 8008a28:	1ad2      	subs	r2, r2, r3
 8008a2a:	4591      	cmp	r9, r2
 8008a2c:	bfa8      	it	ge
 8008a2e:	4691      	movge	r9, r2
 8008a30:	f1b9 0f00 	cmp.w	r9, #0
 8008a34:	dc35      	bgt.n	8008aa2 <_printf_float+0x3aa>
 8008a36:	f04f 0800 	mov.w	r8, #0
 8008a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a3e:	f104 0a1a 	add.w	sl, r4, #26
 8008a42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	eba3 0309 	sub.w	r3, r3, r9
 8008a4c:	4543      	cmp	r3, r8
 8008a4e:	f77f af79 	ble.w	8008944 <_printf_float+0x24c>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4652      	mov	r2, sl
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f aeaa 	beq.w	80087b6 <_printf_float+0xbe>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	e7ec      	b.n	8008a42 <_printf_float+0x34a>
 8008a68:	4613      	mov	r3, r2
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	4642      	mov	r2, r8
 8008a6e:	4628      	mov	r0, r5
 8008a70:	47b8      	blx	r7
 8008a72:	3001      	adds	r0, #1
 8008a74:	d1c0      	bne.n	80089f8 <_printf_float+0x300>
 8008a76:	e69e      	b.n	80087b6 <_printf_float+0xbe>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4631      	mov	r1, r6
 8008a7c:	4628      	mov	r0, r5
 8008a7e:	9205      	str	r2, [sp, #20]
 8008a80:	47b8      	blx	r7
 8008a82:	3001      	adds	r0, #1
 8008a84:	f43f ae97 	beq.w	80087b6 <_printf_float+0xbe>
 8008a88:	9a05      	ldr	r2, [sp, #20]
 8008a8a:	f10b 0b01 	add.w	fp, fp, #1
 8008a8e:	e7b9      	b.n	8008a04 <_printf_float+0x30c>
 8008a90:	ee18 3a10 	vmov	r3, s16
 8008a94:	4652      	mov	r2, sl
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	d1be      	bne.n	8008a1e <_printf_float+0x326>
 8008aa0:	e689      	b.n	80087b6 <_printf_float+0xbe>
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	464b      	mov	r3, r9
 8008aa6:	4442      	add	r2, r8
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	d1c1      	bne.n	8008a36 <_printf_float+0x33e>
 8008ab2:	e680      	b.n	80087b6 <_printf_float+0xbe>
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab6:	2a01      	cmp	r2, #1
 8008ab8:	dc01      	bgt.n	8008abe <_printf_float+0x3c6>
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d53a      	bpl.n	8008b34 <_printf_float+0x43c>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	4642      	mov	r2, r8
 8008ac2:	4631      	mov	r1, r6
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	f43f ae74 	beq.w	80087b6 <_printf_float+0xbe>
 8008ace:	ee18 3a10 	vmov	r3, s16
 8008ad2:	4652      	mov	r2, sl
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4628      	mov	r0, r5
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	f43f ae6b 	beq.w	80087b6 <_printf_float+0xbe>
 8008ae0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008aec:	f7f8 f80c 	bl	8000b08 <__aeabi_dcmpeq>
 8008af0:	b9d8      	cbnz	r0, 8008b2a <_printf_float+0x432>
 8008af2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008af6:	f108 0201 	add.w	r2, r8, #1
 8008afa:	4631      	mov	r1, r6
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b8      	blx	r7
 8008b00:	3001      	adds	r0, #1
 8008b02:	d10e      	bne.n	8008b22 <_printf_float+0x42a>
 8008b04:	e657      	b.n	80087b6 <_printf_float+0xbe>
 8008b06:	2301      	movs	r3, #1
 8008b08:	4652      	mov	r2, sl
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4628      	mov	r0, r5
 8008b0e:	47b8      	blx	r7
 8008b10:	3001      	adds	r0, #1
 8008b12:	f43f ae50 	beq.w	80087b6 <_printf_float+0xbe>
 8008b16:	f108 0801 	add.w	r8, r8, #1
 8008b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	4543      	cmp	r3, r8
 8008b20:	dcf1      	bgt.n	8008b06 <_printf_float+0x40e>
 8008b22:	464b      	mov	r3, r9
 8008b24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008b28:	e6da      	b.n	80088e0 <_printf_float+0x1e8>
 8008b2a:	f04f 0800 	mov.w	r8, #0
 8008b2e:	f104 0a1a 	add.w	sl, r4, #26
 8008b32:	e7f2      	b.n	8008b1a <_printf_float+0x422>
 8008b34:	2301      	movs	r3, #1
 8008b36:	4642      	mov	r2, r8
 8008b38:	e7df      	b.n	8008afa <_printf_float+0x402>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	464a      	mov	r2, r9
 8008b3e:	4631      	mov	r1, r6
 8008b40:	4628      	mov	r0, r5
 8008b42:	47b8      	blx	r7
 8008b44:	3001      	adds	r0, #1
 8008b46:	f43f ae36 	beq.w	80087b6 <_printf_float+0xbe>
 8008b4a:	f108 0801 	add.w	r8, r8, #1
 8008b4e:	68e3      	ldr	r3, [r4, #12]
 8008b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b52:	1a5b      	subs	r3, r3, r1
 8008b54:	4543      	cmp	r3, r8
 8008b56:	dcf0      	bgt.n	8008b3a <_printf_float+0x442>
 8008b58:	e6f8      	b.n	800894c <_printf_float+0x254>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	f104 0919 	add.w	r9, r4, #25
 8008b62:	e7f4      	b.n	8008b4e <_printf_float+0x456>

08008b64 <_printf_common>:
 8008b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b68:	4616      	mov	r6, r2
 8008b6a:	4699      	mov	r9, r3
 8008b6c:	688a      	ldr	r2, [r1, #8]
 8008b6e:	690b      	ldr	r3, [r1, #16]
 8008b70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	bfb8      	it	lt
 8008b78:	4613      	movlt	r3, r2
 8008b7a:	6033      	str	r3, [r6, #0]
 8008b7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b80:	4607      	mov	r7, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	b10a      	cbz	r2, 8008b8a <_printf_common+0x26>
 8008b86:	3301      	adds	r3, #1
 8008b88:	6033      	str	r3, [r6, #0]
 8008b8a:	6823      	ldr	r3, [r4, #0]
 8008b8c:	0699      	lsls	r1, r3, #26
 8008b8e:	bf42      	ittt	mi
 8008b90:	6833      	ldrmi	r3, [r6, #0]
 8008b92:	3302      	addmi	r3, #2
 8008b94:	6033      	strmi	r3, [r6, #0]
 8008b96:	6825      	ldr	r5, [r4, #0]
 8008b98:	f015 0506 	ands.w	r5, r5, #6
 8008b9c:	d106      	bne.n	8008bac <_printf_common+0x48>
 8008b9e:	f104 0a19 	add.w	sl, r4, #25
 8008ba2:	68e3      	ldr	r3, [r4, #12]
 8008ba4:	6832      	ldr	r2, [r6, #0]
 8008ba6:	1a9b      	subs	r3, r3, r2
 8008ba8:	42ab      	cmp	r3, r5
 8008baa:	dc26      	bgt.n	8008bfa <_printf_common+0x96>
 8008bac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bb0:	1e13      	subs	r3, r2, #0
 8008bb2:	6822      	ldr	r2, [r4, #0]
 8008bb4:	bf18      	it	ne
 8008bb6:	2301      	movne	r3, #1
 8008bb8:	0692      	lsls	r2, r2, #26
 8008bba:	d42b      	bmi.n	8008c14 <_printf_common+0xb0>
 8008bbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	4638      	mov	r0, r7
 8008bc4:	47c0      	blx	r8
 8008bc6:	3001      	adds	r0, #1
 8008bc8:	d01e      	beq.n	8008c08 <_printf_common+0xa4>
 8008bca:	6823      	ldr	r3, [r4, #0]
 8008bcc:	6922      	ldr	r2, [r4, #16]
 8008bce:	f003 0306 	and.w	r3, r3, #6
 8008bd2:	2b04      	cmp	r3, #4
 8008bd4:	bf02      	ittt	eq
 8008bd6:	68e5      	ldreq	r5, [r4, #12]
 8008bd8:	6833      	ldreq	r3, [r6, #0]
 8008bda:	1aed      	subeq	r5, r5, r3
 8008bdc:	68a3      	ldr	r3, [r4, #8]
 8008bde:	bf0c      	ite	eq
 8008be0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008be4:	2500      	movne	r5, #0
 8008be6:	4293      	cmp	r3, r2
 8008be8:	bfc4      	itt	gt
 8008bea:	1a9b      	subgt	r3, r3, r2
 8008bec:	18ed      	addgt	r5, r5, r3
 8008bee:	2600      	movs	r6, #0
 8008bf0:	341a      	adds	r4, #26
 8008bf2:	42b5      	cmp	r5, r6
 8008bf4:	d11a      	bne.n	8008c2c <_printf_common+0xc8>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e008      	b.n	8008c0c <_printf_common+0xa8>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	4652      	mov	r2, sl
 8008bfe:	4649      	mov	r1, r9
 8008c00:	4638      	mov	r0, r7
 8008c02:	47c0      	blx	r8
 8008c04:	3001      	adds	r0, #1
 8008c06:	d103      	bne.n	8008c10 <_printf_common+0xac>
 8008c08:	f04f 30ff 	mov.w	r0, #4294967295
 8008c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c10:	3501      	adds	r5, #1
 8008c12:	e7c6      	b.n	8008ba2 <_printf_common+0x3e>
 8008c14:	18e1      	adds	r1, r4, r3
 8008c16:	1c5a      	adds	r2, r3, #1
 8008c18:	2030      	movs	r0, #48	; 0x30
 8008c1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c1e:	4422      	add	r2, r4
 8008c20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c28:	3302      	adds	r3, #2
 8008c2a:	e7c7      	b.n	8008bbc <_printf_common+0x58>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	4622      	mov	r2, r4
 8008c30:	4649      	mov	r1, r9
 8008c32:	4638      	mov	r0, r7
 8008c34:	47c0      	blx	r8
 8008c36:	3001      	adds	r0, #1
 8008c38:	d0e6      	beq.n	8008c08 <_printf_common+0xa4>
 8008c3a:	3601      	adds	r6, #1
 8008c3c:	e7d9      	b.n	8008bf2 <_printf_common+0x8e>
	...

08008c40 <_printf_i>:
 8008c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c44:	7e0f      	ldrb	r7, [r1, #24]
 8008c46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c48:	2f78      	cmp	r7, #120	; 0x78
 8008c4a:	4691      	mov	r9, r2
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	469a      	mov	sl, r3
 8008c52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c56:	d807      	bhi.n	8008c68 <_printf_i+0x28>
 8008c58:	2f62      	cmp	r7, #98	; 0x62
 8008c5a:	d80a      	bhi.n	8008c72 <_printf_i+0x32>
 8008c5c:	2f00      	cmp	r7, #0
 8008c5e:	f000 80d4 	beq.w	8008e0a <_printf_i+0x1ca>
 8008c62:	2f58      	cmp	r7, #88	; 0x58
 8008c64:	f000 80c0 	beq.w	8008de8 <_printf_i+0x1a8>
 8008c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c70:	e03a      	b.n	8008ce8 <_printf_i+0xa8>
 8008c72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c76:	2b15      	cmp	r3, #21
 8008c78:	d8f6      	bhi.n	8008c68 <_printf_i+0x28>
 8008c7a:	a101      	add	r1, pc, #4	; (adr r1, 8008c80 <_printf_i+0x40>)
 8008c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c80:	08008cd9 	.word	0x08008cd9
 8008c84:	08008ced 	.word	0x08008ced
 8008c88:	08008c69 	.word	0x08008c69
 8008c8c:	08008c69 	.word	0x08008c69
 8008c90:	08008c69 	.word	0x08008c69
 8008c94:	08008c69 	.word	0x08008c69
 8008c98:	08008ced 	.word	0x08008ced
 8008c9c:	08008c69 	.word	0x08008c69
 8008ca0:	08008c69 	.word	0x08008c69
 8008ca4:	08008c69 	.word	0x08008c69
 8008ca8:	08008c69 	.word	0x08008c69
 8008cac:	08008df1 	.word	0x08008df1
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008dab 	.word	0x08008dab
 8008cb8:	08008c69 	.word	0x08008c69
 8008cbc:	08008c69 	.word	0x08008c69
 8008cc0:	08008e13 	.word	0x08008e13
 8008cc4:	08008c69 	.word	0x08008c69
 8008cc8:	08008d19 	.word	0x08008d19
 8008ccc:	08008c69 	.word	0x08008c69
 8008cd0:	08008c69 	.word	0x08008c69
 8008cd4:	08008db3 	.word	0x08008db3
 8008cd8:	682b      	ldr	r3, [r5, #0]
 8008cda:	1d1a      	adds	r2, r3, #4
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	602a      	str	r2, [r5, #0]
 8008ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e09f      	b.n	8008e2c <_printf_i+0x1ec>
 8008cec:	6820      	ldr	r0, [r4, #0]
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	0607      	lsls	r7, r0, #24
 8008cf2:	f103 0104 	add.w	r1, r3, #4
 8008cf6:	6029      	str	r1, [r5, #0]
 8008cf8:	d501      	bpl.n	8008cfe <_printf_i+0xbe>
 8008cfa:	681e      	ldr	r6, [r3, #0]
 8008cfc:	e003      	b.n	8008d06 <_printf_i+0xc6>
 8008cfe:	0646      	lsls	r6, r0, #25
 8008d00:	d5fb      	bpl.n	8008cfa <_printf_i+0xba>
 8008d02:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008d06:	2e00      	cmp	r6, #0
 8008d08:	da03      	bge.n	8008d12 <_printf_i+0xd2>
 8008d0a:	232d      	movs	r3, #45	; 0x2d
 8008d0c:	4276      	negs	r6, r6
 8008d0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d12:	485a      	ldr	r0, [pc, #360]	; (8008e7c <_printf_i+0x23c>)
 8008d14:	230a      	movs	r3, #10
 8008d16:	e012      	b.n	8008d3e <_printf_i+0xfe>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6820      	ldr	r0, [r4, #0]
 8008d1c:	1d19      	adds	r1, r3, #4
 8008d1e:	6029      	str	r1, [r5, #0]
 8008d20:	0605      	lsls	r5, r0, #24
 8008d22:	d501      	bpl.n	8008d28 <_printf_i+0xe8>
 8008d24:	681e      	ldr	r6, [r3, #0]
 8008d26:	e002      	b.n	8008d2e <_printf_i+0xee>
 8008d28:	0641      	lsls	r1, r0, #25
 8008d2a:	d5fb      	bpl.n	8008d24 <_printf_i+0xe4>
 8008d2c:	881e      	ldrh	r6, [r3, #0]
 8008d2e:	4853      	ldr	r0, [pc, #332]	; (8008e7c <_printf_i+0x23c>)
 8008d30:	2f6f      	cmp	r7, #111	; 0x6f
 8008d32:	bf0c      	ite	eq
 8008d34:	2308      	moveq	r3, #8
 8008d36:	230a      	movne	r3, #10
 8008d38:	2100      	movs	r1, #0
 8008d3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d3e:	6865      	ldr	r5, [r4, #4]
 8008d40:	60a5      	str	r5, [r4, #8]
 8008d42:	2d00      	cmp	r5, #0
 8008d44:	bfa2      	ittt	ge
 8008d46:	6821      	ldrge	r1, [r4, #0]
 8008d48:	f021 0104 	bicge.w	r1, r1, #4
 8008d4c:	6021      	strge	r1, [r4, #0]
 8008d4e:	b90e      	cbnz	r6, 8008d54 <_printf_i+0x114>
 8008d50:	2d00      	cmp	r5, #0
 8008d52:	d04b      	beq.n	8008dec <_printf_i+0x1ac>
 8008d54:	4615      	mov	r5, r2
 8008d56:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d5a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d5e:	5dc7      	ldrb	r7, [r0, r7]
 8008d60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d64:	4637      	mov	r7, r6
 8008d66:	42bb      	cmp	r3, r7
 8008d68:	460e      	mov	r6, r1
 8008d6a:	d9f4      	bls.n	8008d56 <_printf_i+0x116>
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d10b      	bne.n	8008d88 <_printf_i+0x148>
 8008d70:	6823      	ldr	r3, [r4, #0]
 8008d72:	07de      	lsls	r6, r3, #31
 8008d74:	d508      	bpl.n	8008d88 <_printf_i+0x148>
 8008d76:	6923      	ldr	r3, [r4, #16]
 8008d78:	6861      	ldr	r1, [r4, #4]
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	bfde      	ittt	le
 8008d7e:	2330      	movle	r3, #48	; 0x30
 8008d80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008d88:	1b52      	subs	r2, r2, r5
 8008d8a:	6122      	str	r2, [r4, #16]
 8008d8c:	f8cd a000 	str.w	sl, [sp]
 8008d90:	464b      	mov	r3, r9
 8008d92:	aa03      	add	r2, sp, #12
 8008d94:	4621      	mov	r1, r4
 8008d96:	4640      	mov	r0, r8
 8008d98:	f7ff fee4 	bl	8008b64 <_printf_common>
 8008d9c:	3001      	adds	r0, #1
 8008d9e:	d14a      	bne.n	8008e36 <_printf_i+0x1f6>
 8008da0:	f04f 30ff 	mov.w	r0, #4294967295
 8008da4:	b004      	add	sp, #16
 8008da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	f043 0320 	orr.w	r3, r3, #32
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	4833      	ldr	r0, [pc, #204]	; (8008e80 <_printf_i+0x240>)
 8008db4:	2778      	movs	r7, #120	; 0x78
 8008db6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008dba:	6823      	ldr	r3, [r4, #0]
 8008dbc:	6829      	ldr	r1, [r5, #0]
 8008dbe:	061f      	lsls	r7, r3, #24
 8008dc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dc4:	d402      	bmi.n	8008dcc <_printf_i+0x18c>
 8008dc6:	065f      	lsls	r7, r3, #25
 8008dc8:	bf48      	it	mi
 8008dca:	b2b6      	uxthmi	r6, r6
 8008dcc:	07df      	lsls	r7, r3, #31
 8008dce:	bf48      	it	mi
 8008dd0:	f043 0320 	orrmi.w	r3, r3, #32
 8008dd4:	6029      	str	r1, [r5, #0]
 8008dd6:	bf48      	it	mi
 8008dd8:	6023      	strmi	r3, [r4, #0]
 8008dda:	b91e      	cbnz	r6, 8008de4 <_printf_i+0x1a4>
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	f023 0320 	bic.w	r3, r3, #32
 8008de2:	6023      	str	r3, [r4, #0]
 8008de4:	2310      	movs	r3, #16
 8008de6:	e7a7      	b.n	8008d38 <_printf_i+0xf8>
 8008de8:	4824      	ldr	r0, [pc, #144]	; (8008e7c <_printf_i+0x23c>)
 8008dea:	e7e4      	b.n	8008db6 <_printf_i+0x176>
 8008dec:	4615      	mov	r5, r2
 8008dee:	e7bd      	b.n	8008d6c <_printf_i+0x12c>
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	6826      	ldr	r6, [r4, #0]
 8008df4:	6961      	ldr	r1, [r4, #20]
 8008df6:	1d18      	adds	r0, r3, #4
 8008df8:	6028      	str	r0, [r5, #0]
 8008dfa:	0635      	lsls	r5, r6, #24
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	d501      	bpl.n	8008e04 <_printf_i+0x1c4>
 8008e00:	6019      	str	r1, [r3, #0]
 8008e02:	e002      	b.n	8008e0a <_printf_i+0x1ca>
 8008e04:	0670      	lsls	r0, r6, #25
 8008e06:	d5fb      	bpl.n	8008e00 <_printf_i+0x1c0>
 8008e08:	8019      	strh	r1, [r3, #0]
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6123      	str	r3, [r4, #16]
 8008e0e:	4615      	mov	r5, r2
 8008e10:	e7bc      	b.n	8008d8c <_printf_i+0x14c>
 8008e12:	682b      	ldr	r3, [r5, #0]
 8008e14:	1d1a      	adds	r2, r3, #4
 8008e16:	602a      	str	r2, [r5, #0]
 8008e18:	681d      	ldr	r5, [r3, #0]
 8008e1a:	6862      	ldr	r2, [r4, #4]
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	4628      	mov	r0, r5
 8008e20:	f7f7 f9f6 	bl	8000210 <memchr>
 8008e24:	b108      	cbz	r0, 8008e2a <_printf_i+0x1ea>
 8008e26:	1b40      	subs	r0, r0, r5
 8008e28:	6060      	str	r0, [r4, #4]
 8008e2a:	6863      	ldr	r3, [r4, #4]
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e34:	e7aa      	b.n	8008d8c <_printf_i+0x14c>
 8008e36:	6923      	ldr	r3, [r4, #16]
 8008e38:	462a      	mov	r2, r5
 8008e3a:	4649      	mov	r1, r9
 8008e3c:	4640      	mov	r0, r8
 8008e3e:	47d0      	blx	sl
 8008e40:	3001      	adds	r0, #1
 8008e42:	d0ad      	beq.n	8008da0 <_printf_i+0x160>
 8008e44:	6823      	ldr	r3, [r4, #0]
 8008e46:	079b      	lsls	r3, r3, #30
 8008e48:	d413      	bmi.n	8008e72 <_printf_i+0x232>
 8008e4a:	68e0      	ldr	r0, [r4, #12]
 8008e4c:	9b03      	ldr	r3, [sp, #12]
 8008e4e:	4298      	cmp	r0, r3
 8008e50:	bfb8      	it	lt
 8008e52:	4618      	movlt	r0, r3
 8008e54:	e7a6      	b.n	8008da4 <_printf_i+0x164>
 8008e56:	2301      	movs	r3, #1
 8008e58:	4632      	mov	r2, r6
 8008e5a:	4649      	mov	r1, r9
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	47d0      	blx	sl
 8008e60:	3001      	adds	r0, #1
 8008e62:	d09d      	beq.n	8008da0 <_printf_i+0x160>
 8008e64:	3501      	adds	r5, #1
 8008e66:	68e3      	ldr	r3, [r4, #12]
 8008e68:	9903      	ldr	r1, [sp, #12]
 8008e6a:	1a5b      	subs	r3, r3, r1
 8008e6c:	42ab      	cmp	r3, r5
 8008e6e:	dcf2      	bgt.n	8008e56 <_printf_i+0x216>
 8008e70:	e7eb      	b.n	8008e4a <_printf_i+0x20a>
 8008e72:	2500      	movs	r5, #0
 8008e74:	f104 0619 	add.w	r6, r4, #25
 8008e78:	e7f5      	b.n	8008e66 <_printf_i+0x226>
 8008e7a:	bf00      	nop
 8008e7c:	0800bd62 	.word	0x0800bd62
 8008e80:	0800bd73 	.word	0x0800bd73

08008e84 <std>:
 8008e84:	2300      	movs	r3, #0
 8008e86:	b510      	push	{r4, lr}
 8008e88:	4604      	mov	r4, r0
 8008e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8008e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e92:	6083      	str	r3, [r0, #8]
 8008e94:	8181      	strh	r1, [r0, #12]
 8008e96:	6643      	str	r3, [r0, #100]	; 0x64
 8008e98:	81c2      	strh	r2, [r0, #14]
 8008e9a:	6183      	str	r3, [r0, #24]
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	2208      	movs	r2, #8
 8008ea0:	305c      	adds	r0, #92	; 0x5c
 8008ea2:	f000 f914 	bl	80090ce <memset>
 8008ea6:	4b0d      	ldr	r3, [pc, #52]	; (8008edc <std+0x58>)
 8008ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8008eaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ee0 <std+0x5c>)
 8008eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <std+0x60>)
 8008eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008eb2:	4b0d      	ldr	r3, [pc, #52]	; (8008ee8 <std+0x64>)
 8008eb4:	6323      	str	r3, [r4, #48]	; 0x30
 8008eb6:	4b0d      	ldr	r3, [pc, #52]	; (8008eec <std+0x68>)
 8008eb8:	6224      	str	r4, [r4, #32]
 8008eba:	429c      	cmp	r4, r3
 8008ebc:	d006      	beq.n	8008ecc <std+0x48>
 8008ebe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008ec2:	4294      	cmp	r4, r2
 8008ec4:	d002      	beq.n	8008ecc <std+0x48>
 8008ec6:	33d0      	adds	r3, #208	; 0xd0
 8008ec8:	429c      	cmp	r4, r3
 8008eca:	d105      	bne.n	8008ed8 <std+0x54>
 8008ecc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ed4:	f000 b98a 	b.w	80091ec <__retarget_lock_init_recursive>
 8008ed8:	bd10      	pop	{r4, pc}
 8008eda:	bf00      	nop
 8008edc:	08009049 	.word	0x08009049
 8008ee0:	0800906b 	.word	0x0800906b
 8008ee4:	080090a3 	.word	0x080090a3
 8008ee8:	080090c7 	.word	0x080090c7
 8008eec:	20000954 	.word	0x20000954

08008ef0 <stdio_exit_handler>:
 8008ef0:	4a02      	ldr	r2, [pc, #8]	; (8008efc <stdio_exit_handler+0xc>)
 8008ef2:	4903      	ldr	r1, [pc, #12]	; (8008f00 <stdio_exit_handler+0x10>)
 8008ef4:	4803      	ldr	r0, [pc, #12]	; (8008f04 <stdio_exit_handler+0x14>)
 8008ef6:	f000 b869 	b.w	8008fcc <_fwalk_sglue>
 8008efa:	bf00      	nop
 8008efc:	20000010 	.word	0x20000010
 8008f00:	0800b519 	.word	0x0800b519
 8008f04:	20000188 	.word	0x20000188

08008f08 <cleanup_stdio>:
 8008f08:	6841      	ldr	r1, [r0, #4]
 8008f0a:	4b0c      	ldr	r3, [pc, #48]	; (8008f3c <cleanup_stdio+0x34>)
 8008f0c:	4299      	cmp	r1, r3
 8008f0e:	b510      	push	{r4, lr}
 8008f10:	4604      	mov	r4, r0
 8008f12:	d001      	beq.n	8008f18 <cleanup_stdio+0x10>
 8008f14:	f002 fb00 	bl	800b518 <_fflush_r>
 8008f18:	68a1      	ldr	r1, [r4, #8]
 8008f1a:	4b09      	ldr	r3, [pc, #36]	; (8008f40 <cleanup_stdio+0x38>)
 8008f1c:	4299      	cmp	r1, r3
 8008f1e:	d002      	beq.n	8008f26 <cleanup_stdio+0x1e>
 8008f20:	4620      	mov	r0, r4
 8008f22:	f002 faf9 	bl	800b518 <_fflush_r>
 8008f26:	68e1      	ldr	r1, [r4, #12]
 8008f28:	4b06      	ldr	r3, [pc, #24]	; (8008f44 <cleanup_stdio+0x3c>)
 8008f2a:	4299      	cmp	r1, r3
 8008f2c:	d004      	beq.n	8008f38 <cleanup_stdio+0x30>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f34:	f002 baf0 	b.w	800b518 <_fflush_r>
 8008f38:	bd10      	pop	{r4, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000954 	.word	0x20000954
 8008f40:	200009bc 	.word	0x200009bc
 8008f44:	20000a24 	.word	0x20000a24

08008f48 <global_stdio_init.part.0>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4b0b      	ldr	r3, [pc, #44]	; (8008f78 <global_stdio_init.part.0+0x30>)
 8008f4c:	4c0b      	ldr	r4, [pc, #44]	; (8008f7c <global_stdio_init.part.0+0x34>)
 8008f4e:	4a0c      	ldr	r2, [pc, #48]	; (8008f80 <global_stdio_init.part.0+0x38>)
 8008f50:	601a      	str	r2, [r3, #0]
 8008f52:	4620      	mov	r0, r4
 8008f54:	2200      	movs	r2, #0
 8008f56:	2104      	movs	r1, #4
 8008f58:	f7ff ff94 	bl	8008e84 <std>
 8008f5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008f60:	2201      	movs	r2, #1
 8008f62:	2109      	movs	r1, #9
 8008f64:	f7ff ff8e 	bl	8008e84 <std>
 8008f68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008f6c:	2202      	movs	r2, #2
 8008f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f72:	2112      	movs	r1, #18
 8008f74:	f7ff bf86 	b.w	8008e84 <std>
 8008f78:	20000a8c 	.word	0x20000a8c
 8008f7c:	20000954 	.word	0x20000954
 8008f80:	08008ef1 	.word	0x08008ef1

08008f84 <__sfp_lock_acquire>:
 8008f84:	4801      	ldr	r0, [pc, #4]	; (8008f8c <__sfp_lock_acquire+0x8>)
 8008f86:	f000 b932 	b.w	80091ee <__retarget_lock_acquire_recursive>
 8008f8a:	bf00      	nop
 8008f8c:	20000a95 	.word	0x20000a95

08008f90 <__sfp_lock_release>:
 8008f90:	4801      	ldr	r0, [pc, #4]	; (8008f98 <__sfp_lock_release+0x8>)
 8008f92:	f000 b92d 	b.w	80091f0 <__retarget_lock_release_recursive>
 8008f96:	bf00      	nop
 8008f98:	20000a95 	.word	0x20000a95

08008f9c <__sinit>:
 8008f9c:	b510      	push	{r4, lr}
 8008f9e:	4604      	mov	r4, r0
 8008fa0:	f7ff fff0 	bl	8008f84 <__sfp_lock_acquire>
 8008fa4:	6a23      	ldr	r3, [r4, #32]
 8008fa6:	b11b      	cbz	r3, 8008fb0 <__sinit+0x14>
 8008fa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fac:	f7ff bff0 	b.w	8008f90 <__sfp_lock_release>
 8008fb0:	4b04      	ldr	r3, [pc, #16]	; (8008fc4 <__sinit+0x28>)
 8008fb2:	6223      	str	r3, [r4, #32]
 8008fb4:	4b04      	ldr	r3, [pc, #16]	; (8008fc8 <__sinit+0x2c>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1f5      	bne.n	8008fa8 <__sinit+0xc>
 8008fbc:	f7ff ffc4 	bl	8008f48 <global_stdio_init.part.0>
 8008fc0:	e7f2      	b.n	8008fa8 <__sinit+0xc>
 8008fc2:	bf00      	nop
 8008fc4:	08008f09 	.word	0x08008f09
 8008fc8:	20000a8c 	.word	0x20000a8c

08008fcc <_fwalk_sglue>:
 8008fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	4688      	mov	r8, r1
 8008fd4:	4614      	mov	r4, r2
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008fdc:	f1b9 0901 	subs.w	r9, r9, #1
 8008fe0:	d505      	bpl.n	8008fee <_fwalk_sglue+0x22>
 8008fe2:	6824      	ldr	r4, [r4, #0]
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	d1f7      	bne.n	8008fd8 <_fwalk_sglue+0xc>
 8008fe8:	4630      	mov	r0, r6
 8008fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d907      	bls.n	8009004 <_fwalk_sglue+0x38>
 8008ff4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	d003      	beq.n	8009004 <_fwalk_sglue+0x38>
 8008ffc:	4629      	mov	r1, r5
 8008ffe:	4638      	mov	r0, r7
 8009000:	47c0      	blx	r8
 8009002:	4306      	orrs	r6, r0
 8009004:	3568      	adds	r5, #104	; 0x68
 8009006:	e7e9      	b.n	8008fdc <_fwalk_sglue+0x10>

08009008 <siprintf>:
 8009008:	b40e      	push	{r1, r2, r3}
 800900a:	b500      	push	{lr}
 800900c:	b09c      	sub	sp, #112	; 0x70
 800900e:	ab1d      	add	r3, sp, #116	; 0x74
 8009010:	9002      	str	r0, [sp, #8]
 8009012:	9006      	str	r0, [sp, #24]
 8009014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009018:	4809      	ldr	r0, [pc, #36]	; (8009040 <siprintf+0x38>)
 800901a:	9107      	str	r1, [sp, #28]
 800901c:	9104      	str	r1, [sp, #16]
 800901e:	4909      	ldr	r1, [pc, #36]	; (8009044 <siprintf+0x3c>)
 8009020:	f853 2b04 	ldr.w	r2, [r3], #4
 8009024:	9105      	str	r1, [sp, #20]
 8009026:	6800      	ldr	r0, [r0, #0]
 8009028:	9301      	str	r3, [sp, #4]
 800902a:	a902      	add	r1, sp, #8
 800902c:	f002 f8f0 	bl	800b210 <_svfiprintf_r>
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	2200      	movs	r2, #0
 8009034:	701a      	strb	r2, [r3, #0]
 8009036:	b01c      	add	sp, #112	; 0x70
 8009038:	f85d eb04 	ldr.w	lr, [sp], #4
 800903c:	b003      	add	sp, #12
 800903e:	4770      	bx	lr
 8009040:	200001d4 	.word	0x200001d4
 8009044:	ffff0208 	.word	0xffff0208

08009048 <__sread>:
 8009048:	b510      	push	{r4, lr}
 800904a:	460c      	mov	r4, r1
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	f000 f87e 	bl	8009150 <_read_r>
 8009054:	2800      	cmp	r0, #0
 8009056:	bfab      	itete	ge
 8009058:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800905a:	89a3      	ldrhlt	r3, [r4, #12]
 800905c:	181b      	addge	r3, r3, r0
 800905e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009062:	bfac      	ite	ge
 8009064:	6563      	strge	r3, [r4, #84]	; 0x54
 8009066:	81a3      	strhlt	r3, [r4, #12]
 8009068:	bd10      	pop	{r4, pc}

0800906a <__swrite>:
 800906a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	461f      	mov	r7, r3
 8009070:	898b      	ldrh	r3, [r1, #12]
 8009072:	05db      	lsls	r3, r3, #23
 8009074:	4605      	mov	r5, r0
 8009076:	460c      	mov	r4, r1
 8009078:	4616      	mov	r6, r2
 800907a:	d505      	bpl.n	8009088 <__swrite+0x1e>
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	2302      	movs	r3, #2
 8009082:	2200      	movs	r2, #0
 8009084:	f000 f852 	bl	800912c <_lseek_r>
 8009088:	89a3      	ldrh	r3, [r4, #12]
 800908a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800908e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	4632      	mov	r2, r6
 8009096:	463b      	mov	r3, r7
 8009098:	4628      	mov	r0, r5
 800909a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	f000 b869 	b.w	8009174 <_write_r>

080090a2 <__sseek>:
 80090a2:	b510      	push	{r4, lr}
 80090a4:	460c      	mov	r4, r1
 80090a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090aa:	f000 f83f 	bl	800912c <_lseek_r>
 80090ae:	1c43      	adds	r3, r0, #1
 80090b0:	89a3      	ldrh	r3, [r4, #12]
 80090b2:	bf15      	itete	ne
 80090b4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090b6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090be:	81a3      	strheq	r3, [r4, #12]
 80090c0:	bf18      	it	ne
 80090c2:	81a3      	strhne	r3, [r4, #12]
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <__sclose>:
 80090c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090ca:	f000 b81f 	b.w	800910c <_close_r>

080090ce <memset>:
 80090ce:	4402      	add	r2, r0
 80090d0:	4603      	mov	r3, r0
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d100      	bne.n	80090d8 <memset+0xa>
 80090d6:	4770      	bx	lr
 80090d8:	f803 1b01 	strb.w	r1, [r3], #1
 80090dc:	e7f9      	b.n	80090d2 <memset+0x4>

080090de <strncmp>:
 80090de:	b510      	push	{r4, lr}
 80090e0:	b16a      	cbz	r2, 80090fe <strncmp+0x20>
 80090e2:	3901      	subs	r1, #1
 80090e4:	1884      	adds	r4, r0, r2
 80090e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090ea:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d103      	bne.n	80090fa <strncmp+0x1c>
 80090f2:	42a0      	cmp	r0, r4
 80090f4:	d001      	beq.n	80090fa <strncmp+0x1c>
 80090f6:	2a00      	cmp	r2, #0
 80090f8:	d1f5      	bne.n	80090e6 <strncmp+0x8>
 80090fa:	1ad0      	subs	r0, r2, r3
 80090fc:	bd10      	pop	{r4, pc}
 80090fe:	4610      	mov	r0, r2
 8009100:	e7fc      	b.n	80090fc <strncmp+0x1e>
	...

08009104 <_localeconv_r>:
 8009104:	4800      	ldr	r0, [pc, #0]	; (8009108 <_localeconv_r+0x4>)
 8009106:	4770      	bx	lr
 8009108:	2000010c 	.word	0x2000010c

0800910c <_close_r>:
 800910c:	b538      	push	{r3, r4, r5, lr}
 800910e:	4d06      	ldr	r5, [pc, #24]	; (8009128 <_close_r+0x1c>)
 8009110:	2300      	movs	r3, #0
 8009112:	4604      	mov	r4, r0
 8009114:	4608      	mov	r0, r1
 8009116:	602b      	str	r3, [r5, #0]
 8009118:	f7f9 fd97 	bl	8002c4a <_close>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d102      	bne.n	8009126 <_close_r+0x1a>
 8009120:	682b      	ldr	r3, [r5, #0]
 8009122:	b103      	cbz	r3, 8009126 <_close_r+0x1a>
 8009124:	6023      	str	r3, [r4, #0]
 8009126:	bd38      	pop	{r3, r4, r5, pc}
 8009128:	20000a90 	.word	0x20000a90

0800912c <_lseek_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d07      	ldr	r5, [pc, #28]	; (800914c <_lseek_r+0x20>)
 8009130:	4604      	mov	r4, r0
 8009132:	4608      	mov	r0, r1
 8009134:	4611      	mov	r1, r2
 8009136:	2200      	movs	r2, #0
 8009138:	602a      	str	r2, [r5, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f7f9 fdac 	bl	8002c98 <_lseek>
 8009140:	1c43      	adds	r3, r0, #1
 8009142:	d102      	bne.n	800914a <_lseek_r+0x1e>
 8009144:	682b      	ldr	r3, [r5, #0]
 8009146:	b103      	cbz	r3, 800914a <_lseek_r+0x1e>
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	bd38      	pop	{r3, r4, r5, pc}
 800914c:	20000a90 	.word	0x20000a90

08009150 <_read_r>:
 8009150:	b538      	push	{r3, r4, r5, lr}
 8009152:	4d07      	ldr	r5, [pc, #28]	; (8009170 <_read_r+0x20>)
 8009154:	4604      	mov	r4, r0
 8009156:	4608      	mov	r0, r1
 8009158:	4611      	mov	r1, r2
 800915a:	2200      	movs	r2, #0
 800915c:	602a      	str	r2, [r5, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f7f9 fd3a 	bl	8002bd8 <_read>
 8009164:	1c43      	adds	r3, r0, #1
 8009166:	d102      	bne.n	800916e <_read_r+0x1e>
 8009168:	682b      	ldr	r3, [r5, #0]
 800916a:	b103      	cbz	r3, 800916e <_read_r+0x1e>
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	bd38      	pop	{r3, r4, r5, pc}
 8009170:	20000a90 	.word	0x20000a90

08009174 <_write_r>:
 8009174:	b538      	push	{r3, r4, r5, lr}
 8009176:	4d07      	ldr	r5, [pc, #28]	; (8009194 <_write_r+0x20>)
 8009178:	4604      	mov	r4, r0
 800917a:	4608      	mov	r0, r1
 800917c:	4611      	mov	r1, r2
 800917e:	2200      	movs	r2, #0
 8009180:	602a      	str	r2, [r5, #0]
 8009182:	461a      	mov	r2, r3
 8009184:	f7f9 fd45 	bl	8002c12 <_write>
 8009188:	1c43      	adds	r3, r0, #1
 800918a:	d102      	bne.n	8009192 <_write_r+0x1e>
 800918c:	682b      	ldr	r3, [r5, #0]
 800918e:	b103      	cbz	r3, 8009192 <_write_r+0x1e>
 8009190:	6023      	str	r3, [r4, #0]
 8009192:	bd38      	pop	{r3, r4, r5, pc}
 8009194:	20000a90 	.word	0x20000a90

08009198 <__errno>:
 8009198:	4b01      	ldr	r3, [pc, #4]	; (80091a0 <__errno+0x8>)
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	4770      	bx	lr
 800919e:	bf00      	nop
 80091a0:	200001d4 	.word	0x200001d4

080091a4 <__libc_init_array>:
 80091a4:	b570      	push	{r4, r5, r6, lr}
 80091a6:	4d0d      	ldr	r5, [pc, #52]	; (80091dc <__libc_init_array+0x38>)
 80091a8:	4c0d      	ldr	r4, [pc, #52]	; (80091e0 <__libc_init_array+0x3c>)
 80091aa:	1b64      	subs	r4, r4, r5
 80091ac:	10a4      	asrs	r4, r4, #2
 80091ae:	2600      	movs	r6, #0
 80091b0:	42a6      	cmp	r6, r4
 80091b2:	d109      	bne.n	80091c8 <__libc_init_array+0x24>
 80091b4:	4d0b      	ldr	r5, [pc, #44]	; (80091e4 <__libc_init_array+0x40>)
 80091b6:	4c0c      	ldr	r4, [pc, #48]	; (80091e8 <__libc_init_array+0x44>)
 80091b8:	f002 fd6e 	bl	800bc98 <_init>
 80091bc:	1b64      	subs	r4, r4, r5
 80091be:	10a4      	asrs	r4, r4, #2
 80091c0:	2600      	movs	r6, #0
 80091c2:	42a6      	cmp	r6, r4
 80091c4:	d105      	bne.n	80091d2 <__libc_init_array+0x2e>
 80091c6:	bd70      	pop	{r4, r5, r6, pc}
 80091c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091cc:	4798      	blx	r3
 80091ce:	3601      	adds	r6, #1
 80091d0:	e7ee      	b.n	80091b0 <__libc_init_array+0xc>
 80091d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d6:	4798      	blx	r3
 80091d8:	3601      	adds	r6, #1
 80091da:	e7f2      	b.n	80091c2 <__libc_init_array+0x1e>
 80091dc:	0800c12c 	.word	0x0800c12c
 80091e0:	0800c12c 	.word	0x0800c12c
 80091e4:	0800c12c 	.word	0x0800c12c
 80091e8:	0800c130 	.word	0x0800c130

080091ec <__retarget_lock_init_recursive>:
 80091ec:	4770      	bx	lr

080091ee <__retarget_lock_acquire_recursive>:
 80091ee:	4770      	bx	lr

080091f0 <__retarget_lock_release_recursive>:
 80091f0:	4770      	bx	lr

080091f2 <memcpy>:
 80091f2:	440a      	add	r2, r1
 80091f4:	4291      	cmp	r1, r2
 80091f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80091fa:	d100      	bne.n	80091fe <memcpy+0xc>
 80091fc:	4770      	bx	lr
 80091fe:	b510      	push	{r4, lr}
 8009200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009208:	4291      	cmp	r1, r2
 800920a:	d1f9      	bne.n	8009200 <memcpy+0xe>
 800920c:	bd10      	pop	{r4, pc}
	...

08009210 <nan>:
 8009210:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009218 <nan+0x8>
 8009214:	4770      	bx	lr
 8009216:	bf00      	nop
 8009218:	00000000 	.word	0x00000000
 800921c:	7ff80000 	.word	0x7ff80000

08009220 <quorem>:
 8009220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009224:	6903      	ldr	r3, [r0, #16]
 8009226:	690c      	ldr	r4, [r1, #16]
 8009228:	42a3      	cmp	r3, r4
 800922a:	4607      	mov	r7, r0
 800922c:	db7e      	blt.n	800932c <quorem+0x10c>
 800922e:	3c01      	subs	r4, #1
 8009230:	f101 0814 	add.w	r8, r1, #20
 8009234:	f100 0514 	add.w	r5, r0, #20
 8009238:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800923c:	9301      	str	r3, [sp, #4]
 800923e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009242:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009246:	3301      	adds	r3, #1
 8009248:	429a      	cmp	r2, r3
 800924a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800924e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009252:	fbb2 f6f3 	udiv	r6, r2, r3
 8009256:	d331      	bcc.n	80092bc <quorem+0x9c>
 8009258:	f04f 0e00 	mov.w	lr, #0
 800925c:	4640      	mov	r0, r8
 800925e:	46ac      	mov	ip, r5
 8009260:	46f2      	mov	sl, lr
 8009262:	f850 2b04 	ldr.w	r2, [r0], #4
 8009266:	b293      	uxth	r3, r2
 8009268:	fb06 e303 	mla	r3, r6, r3, lr
 800926c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009270:	0c1a      	lsrs	r2, r3, #16
 8009272:	b29b      	uxth	r3, r3
 8009274:	ebaa 0303 	sub.w	r3, sl, r3
 8009278:	f8dc a000 	ldr.w	sl, [ip]
 800927c:	fa13 f38a 	uxtah	r3, r3, sl
 8009280:	fb06 220e 	mla	r2, r6, lr, r2
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	9b00      	ldr	r3, [sp, #0]
 8009288:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800928c:	b292      	uxth	r2, r2
 800928e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009292:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009296:	f8bd 3000 	ldrh.w	r3, [sp]
 800929a:	4581      	cmp	r9, r0
 800929c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092a0:	f84c 3b04 	str.w	r3, [ip], #4
 80092a4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80092a8:	d2db      	bcs.n	8009262 <quorem+0x42>
 80092aa:	f855 300b 	ldr.w	r3, [r5, fp]
 80092ae:	b92b      	cbnz	r3, 80092bc <quorem+0x9c>
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	3b04      	subs	r3, #4
 80092b4:	429d      	cmp	r5, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	d32c      	bcc.n	8009314 <quorem+0xf4>
 80092ba:	613c      	str	r4, [r7, #16]
 80092bc:	4638      	mov	r0, r7
 80092be:	f001 fd59 	bl	800ad74 <__mcmp>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	db22      	blt.n	800930c <quorem+0xec>
 80092c6:	3601      	adds	r6, #1
 80092c8:	4629      	mov	r1, r5
 80092ca:	2000      	movs	r0, #0
 80092cc:	f858 2b04 	ldr.w	r2, [r8], #4
 80092d0:	f8d1 c000 	ldr.w	ip, [r1]
 80092d4:	b293      	uxth	r3, r2
 80092d6:	1ac3      	subs	r3, r0, r3
 80092d8:	0c12      	lsrs	r2, r2, #16
 80092da:	fa13 f38c 	uxtah	r3, r3, ip
 80092de:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80092e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ec:	45c1      	cmp	r9, r8
 80092ee:	f841 3b04 	str.w	r3, [r1], #4
 80092f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80092f6:	d2e9      	bcs.n	80092cc <quorem+0xac>
 80092f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009300:	b922      	cbnz	r2, 800930c <quorem+0xec>
 8009302:	3b04      	subs	r3, #4
 8009304:	429d      	cmp	r5, r3
 8009306:	461a      	mov	r2, r3
 8009308:	d30a      	bcc.n	8009320 <quorem+0x100>
 800930a:	613c      	str	r4, [r7, #16]
 800930c:	4630      	mov	r0, r6
 800930e:	b003      	add	sp, #12
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	6812      	ldr	r2, [r2, #0]
 8009316:	3b04      	subs	r3, #4
 8009318:	2a00      	cmp	r2, #0
 800931a:	d1ce      	bne.n	80092ba <quorem+0x9a>
 800931c:	3c01      	subs	r4, #1
 800931e:	e7c9      	b.n	80092b4 <quorem+0x94>
 8009320:	6812      	ldr	r2, [r2, #0]
 8009322:	3b04      	subs	r3, #4
 8009324:	2a00      	cmp	r2, #0
 8009326:	d1f0      	bne.n	800930a <quorem+0xea>
 8009328:	3c01      	subs	r4, #1
 800932a:	e7eb      	b.n	8009304 <quorem+0xe4>
 800932c:	2000      	movs	r0, #0
 800932e:	e7ee      	b.n	800930e <quorem+0xee>

08009330 <_dtoa_r>:
 8009330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009334:	ed2d 8b04 	vpush	{d8-d9}
 8009338:	69c5      	ldr	r5, [r0, #28]
 800933a:	b093      	sub	sp, #76	; 0x4c
 800933c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009340:	ec57 6b10 	vmov	r6, r7, d0
 8009344:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009348:	9107      	str	r1, [sp, #28]
 800934a:	4604      	mov	r4, r0
 800934c:	920a      	str	r2, [sp, #40]	; 0x28
 800934e:	930d      	str	r3, [sp, #52]	; 0x34
 8009350:	b975      	cbnz	r5, 8009370 <_dtoa_r+0x40>
 8009352:	2010      	movs	r0, #16
 8009354:	f001 f982 	bl	800a65c <malloc>
 8009358:	4602      	mov	r2, r0
 800935a:	61e0      	str	r0, [r4, #28]
 800935c:	b920      	cbnz	r0, 8009368 <_dtoa_r+0x38>
 800935e:	4bae      	ldr	r3, [pc, #696]	; (8009618 <_dtoa_r+0x2e8>)
 8009360:	21ef      	movs	r1, #239	; 0xef
 8009362:	48ae      	ldr	r0, [pc, #696]	; (800961c <_dtoa_r+0x2ec>)
 8009364:	f002 f92a 	bl	800b5bc <__assert_func>
 8009368:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800936c:	6005      	str	r5, [r0, #0]
 800936e:	60c5      	str	r5, [r0, #12]
 8009370:	69e3      	ldr	r3, [r4, #28]
 8009372:	6819      	ldr	r1, [r3, #0]
 8009374:	b151      	cbz	r1, 800938c <_dtoa_r+0x5c>
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	604a      	str	r2, [r1, #4]
 800937a:	2301      	movs	r3, #1
 800937c:	4093      	lsls	r3, r2
 800937e:	608b      	str	r3, [r1, #8]
 8009380:	4620      	mov	r0, r4
 8009382:	f001 fa71 	bl	800a868 <_Bfree>
 8009386:	69e3      	ldr	r3, [r4, #28]
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	1e3b      	subs	r3, r7, #0
 800938e:	bfbb      	ittet	lt
 8009390:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009394:	9303      	strlt	r3, [sp, #12]
 8009396:	2300      	movge	r3, #0
 8009398:	2201      	movlt	r2, #1
 800939a:	bfac      	ite	ge
 800939c:	f8c8 3000 	strge.w	r3, [r8]
 80093a0:	f8c8 2000 	strlt.w	r2, [r8]
 80093a4:	4b9e      	ldr	r3, [pc, #632]	; (8009620 <_dtoa_r+0x2f0>)
 80093a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80093aa:	ea33 0308 	bics.w	r3, r3, r8
 80093ae:	d11b      	bne.n	80093e8 <_dtoa_r+0xb8>
 80093b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093b2:	f242 730f 	movw	r3, #9999	; 0x270f
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80093bc:	4333      	orrs	r3, r6
 80093be:	f000 8593 	beq.w	8009ee8 <_dtoa_r+0xbb8>
 80093c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093c4:	b963      	cbnz	r3, 80093e0 <_dtoa_r+0xb0>
 80093c6:	4b97      	ldr	r3, [pc, #604]	; (8009624 <_dtoa_r+0x2f4>)
 80093c8:	e027      	b.n	800941a <_dtoa_r+0xea>
 80093ca:	4b97      	ldr	r3, [pc, #604]	; (8009628 <_dtoa_r+0x2f8>)
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	3308      	adds	r3, #8
 80093d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093d2:	6013      	str	r3, [r2, #0]
 80093d4:	9800      	ldr	r0, [sp, #0]
 80093d6:	b013      	add	sp, #76	; 0x4c
 80093d8:	ecbd 8b04 	vpop	{d8-d9}
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	4b90      	ldr	r3, [pc, #576]	; (8009624 <_dtoa_r+0x2f4>)
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	3303      	adds	r3, #3
 80093e6:	e7f3      	b.n	80093d0 <_dtoa_r+0xa0>
 80093e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	ec51 0b17 	vmov	r0, r1, d7
 80093f2:	eeb0 8a47 	vmov.f32	s16, s14
 80093f6:	eef0 8a67 	vmov.f32	s17, s15
 80093fa:	2300      	movs	r3, #0
 80093fc:	f7f7 fb84 	bl	8000b08 <__aeabi_dcmpeq>
 8009400:	4681      	mov	r9, r0
 8009402:	b160      	cbz	r0, 800941e <_dtoa_r+0xee>
 8009404:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009406:	2301      	movs	r3, #1
 8009408:	6013      	str	r3, [r2, #0]
 800940a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800940c:	2b00      	cmp	r3, #0
 800940e:	f000 8568 	beq.w	8009ee2 <_dtoa_r+0xbb2>
 8009412:	4b86      	ldr	r3, [pc, #536]	; (800962c <_dtoa_r+0x2fc>)
 8009414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009416:	6013      	str	r3, [r2, #0]
 8009418:	3b01      	subs	r3, #1
 800941a:	9300      	str	r3, [sp, #0]
 800941c:	e7da      	b.n	80093d4 <_dtoa_r+0xa4>
 800941e:	aa10      	add	r2, sp, #64	; 0x40
 8009420:	a911      	add	r1, sp, #68	; 0x44
 8009422:	4620      	mov	r0, r4
 8009424:	eeb0 0a48 	vmov.f32	s0, s16
 8009428:	eef0 0a68 	vmov.f32	s1, s17
 800942c:	f001 fdb8 	bl	800afa0 <__d2b>
 8009430:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009434:	4682      	mov	sl, r0
 8009436:	2d00      	cmp	r5, #0
 8009438:	d07f      	beq.n	800953a <_dtoa_r+0x20a>
 800943a:	ee18 3a90 	vmov	r3, s17
 800943e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009442:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009446:	ec51 0b18 	vmov	r0, r1, d8
 800944a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800944e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009452:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009456:	4619      	mov	r1, r3
 8009458:	2200      	movs	r2, #0
 800945a:	4b75      	ldr	r3, [pc, #468]	; (8009630 <_dtoa_r+0x300>)
 800945c:	f7f6 ff34 	bl	80002c8 <__aeabi_dsub>
 8009460:	a367      	add	r3, pc, #412	; (adr r3, 8009600 <_dtoa_r+0x2d0>)
 8009462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009466:	f7f7 f8e7 	bl	8000638 <__aeabi_dmul>
 800946a:	a367      	add	r3, pc, #412	; (adr r3, 8009608 <_dtoa_r+0x2d8>)
 800946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009470:	f7f6 ff2c 	bl	80002cc <__adddf3>
 8009474:	4606      	mov	r6, r0
 8009476:	4628      	mov	r0, r5
 8009478:	460f      	mov	r7, r1
 800947a:	f7f7 f873 	bl	8000564 <__aeabi_i2d>
 800947e:	a364      	add	r3, pc, #400	; (adr r3, 8009610 <_dtoa_r+0x2e0>)
 8009480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009484:	f7f7 f8d8 	bl	8000638 <__aeabi_dmul>
 8009488:	4602      	mov	r2, r0
 800948a:	460b      	mov	r3, r1
 800948c:	4630      	mov	r0, r6
 800948e:	4639      	mov	r1, r7
 8009490:	f7f6 ff1c 	bl	80002cc <__adddf3>
 8009494:	4606      	mov	r6, r0
 8009496:	460f      	mov	r7, r1
 8009498:	f7f7 fb7e 	bl	8000b98 <__aeabi_d2iz>
 800949c:	2200      	movs	r2, #0
 800949e:	4683      	mov	fp, r0
 80094a0:	2300      	movs	r3, #0
 80094a2:	4630      	mov	r0, r6
 80094a4:	4639      	mov	r1, r7
 80094a6:	f7f7 fb39 	bl	8000b1c <__aeabi_dcmplt>
 80094aa:	b148      	cbz	r0, 80094c0 <_dtoa_r+0x190>
 80094ac:	4658      	mov	r0, fp
 80094ae:	f7f7 f859 	bl	8000564 <__aeabi_i2d>
 80094b2:	4632      	mov	r2, r6
 80094b4:	463b      	mov	r3, r7
 80094b6:	f7f7 fb27 	bl	8000b08 <__aeabi_dcmpeq>
 80094ba:	b908      	cbnz	r0, 80094c0 <_dtoa_r+0x190>
 80094bc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094c0:	f1bb 0f16 	cmp.w	fp, #22
 80094c4:	d857      	bhi.n	8009576 <_dtoa_r+0x246>
 80094c6:	4b5b      	ldr	r3, [pc, #364]	; (8009634 <_dtoa_r+0x304>)
 80094c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80094cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094d0:	ec51 0b18 	vmov	r0, r1, d8
 80094d4:	f7f7 fb22 	bl	8000b1c <__aeabi_dcmplt>
 80094d8:	2800      	cmp	r0, #0
 80094da:	d04e      	beq.n	800957a <_dtoa_r+0x24a>
 80094dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80094e0:	2300      	movs	r3, #0
 80094e2:	930c      	str	r3, [sp, #48]	; 0x30
 80094e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094e6:	1b5b      	subs	r3, r3, r5
 80094e8:	1e5a      	subs	r2, r3, #1
 80094ea:	bf45      	ittet	mi
 80094ec:	f1c3 0301 	rsbmi	r3, r3, #1
 80094f0:	9305      	strmi	r3, [sp, #20]
 80094f2:	2300      	movpl	r3, #0
 80094f4:	2300      	movmi	r3, #0
 80094f6:	9206      	str	r2, [sp, #24]
 80094f8:	bf54      	ite	pl
 80094fa:	9305      	strpl	r3, [sp, #20]
 80094fc:	9306      	strmi	r3, [sp, #24]
 80094fe:	f1bb 0f00 	cmp.w	fp, #0
 8009502:	db3c      	blt.n	800957e <_dtoa_r+0x24e>
 8009504:	9b06      	ldr	r3, [sp, #24]
 8009506:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800950a:	445b      	add	r3, fp
 800950c:	9306      	str	r3, [sp, #24]
 800950e:	2300      	movs	r3, #0
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	9b07      	ldr	r3, [sp, #28]
 8009514:	2b09      	cmp	r3, #9
 8009516:	d868      	bhi.n	80095ea <_dtoa_r+0x2ba>
 8009518:	2b05      	cmp	r3, #5
 800951a:	bfc4      	itt	gt
 800951c:	3b04      	subgt	r3, #4
 800951e:	9307      	strgt	r3, [sp, #28]
 8009520:	9b07      	ldr	r3, [sp, #28]
 8009522:	f1a3 0302 	sub.w	r3, r3, #2
 8009526:	bfcc      	ite	gt
 8009528:	2500      	movgt	r5, #0
 800952a:	2501      	movle	r5, #1
 800952c:	2b03      	cmp	r3, #3
 800952e:	f200 8085 	bhi.w	800963c <_dtoa_r+0x30c>
 8009532:	e8df f003 	tbb	[pc, r3]
 8009536:	3b2e      	.short	0x3b2e
 8009538:	5839      	.short	0x5839
 800953a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800953e:	441d      	add	r5, r3
 8009540:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009544:	2b20      	cmp	r3, #32
 8009546:	bfc1      	itttt	gt
 8009548:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800954c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009550:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009554:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009558:	bfd6      	itet	le
 800955a:	f1c3 0320 	rsble	r3, r3, #32
 800955e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009562:	fa06 f003 	lslle.w	r0, r6, r3
 8009566:	f7f6 ffed 	bl	8000544 <__aeabi_ui2d>
 800956a:	2201      	movs	r2, #1
 800956c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009570:	3d01      	subs	r5, #1
 8009572:	920e      	str	r2, [sp, #56]	; 0x38
 8009574:	e76f      	b.n	8009456 <_dtoa_r+0x126>
 8009576:	2301      	movs	r3, #1
 8009578:	e7b3      	b.n	80094e2 <_dtoa_r+0x1b2>
 800957a:	900c      	str	r0, [sp, #48]	; 0x30
 800957c:	e7b2      	b.n	80094e4 <_dtoa_r+0x1b4>
 800957e:	9b05      	ldr	r3, [sp, #20]
 8009580:	eba3 030b 	sub.w	r3, r3, fp
 8009584:	9305      	str	r3, [sp, #20]
 8009586:	f1cb 0300 	rsb	r3, fp, #0
 800958a:	9308      	str	r3, [sp, #32]
 800958c:	2300      	movs	r3, #0
 800958e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009590:	e7bf      	b.n	8009512 <_dtoa_r+0x1e2>
 8009592:	2300      	movs	r3, #0
 8009594:	9309      	str	r3, [sp, #36]	; 0x24
 8009596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	dc52      	bgt.n	8009642 <_dtoa_r+0x312>
 800959c:	2301      	movs	r3, #1
 800959e:	9301      	str	r3, [sp, #4]
 80095a0:	9304      	str	r3, [sp, #16]
 80095a2:	461a      	mov	r2, r3
 80095a4:	920a      	str	r2, [sp, #40]	; 0x28
 80095a6:	e00b      	b.n	80095c0 <_dtoa_r+0x290>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e7f3      	b.n	8009594 <_dtoa_r+0x264>
 80095ac:	2300      	movs	r3, #0
 80095ae:	9309      	str	r3, [sp, #36]	; 0x24
 80095b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095b2:	445b      	add	r3, fp
 80095b4:	9301      	str	r3, [sp, #4]
 80095b6:	3301      	adds	r3, #1
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	9304      	str	r3, [sp, #16]
 80095bc:	bfb8      	it	lt
 80095be:	2301      	movlt	r3, #1
 80095c0:	69e0      	ldr	r0, [r4, #28]
 80095c2:	2100      	movs	r1, #0
 80095c4:	2204      	movs	r2, #4
 80095c6:	f102 0614 	add.w	r6, r2, #20
 80095ca:	429e      	cmp	r6, r3
 80095cc:	d93d      	bls.n	800964a <_dtoa_r+0x31a>
 80095ce:	6041      	str	r1, [r0, #4]
 80095d0:	4620      	mov	r0, r4
 80095d2:	f001 f909 	bl	800a7e8 <_Balloc>
 80095d6:	9000      	str	r0, [sp, #0]
 80095d8:	2800      	cmp	r0, #0
 80095da:	d139      	bne.n	8009650 <_dtoa_r+0x320>
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <_dtoa_r+0x308>)
 80095de:	4602      	mov	r2, r0
 80095e0:	f240 11af 	movw	r1, #431	; 0x1af
 80095e4:	e6bd      	b.n	8009362 <_dtoa_r+0x32>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e7e1      	b.n	80095ae <_dtoa_r+0x27e>
 80095ea:	2501      	movs	r5, #1
 80095ec:	2300      	movs	r3, #0
 80095ee:	9307      	str	r3, [sp, #28]
 80095f0:	9509      	str	r5, [sp, #36]	; 0x24
 80095f2:	f04f 33ff 	mov.w	r3, #4294967295
 80095f6:	9301      	str	r3, [sp, #4]
 80095f8:	9304      	str	r3, [sp, #16]
 80095fa:	2200      	movs	r2, #0
 80095fc:	2312      	movs	r3, #18
 80095fe:	e7d1      	b.n	80095a4 <_dtoa_r+0x274>
 8009600:	636f4361 	.word	0x636f4361
 8009604:	3fd287a7 	.word	0x3fd287a7
 8009608:	8b60c8b3 	.word	0x8b60c8b3
 800960c:	3fc68a28 	.word	0x3fc68a28
 8009610:	509f79fb 	.word	0x509f79fb
 8009614:	3fd34413 	.word	0x3fd34413
 8009618:	0800bd99 	.word	0x0800bd99
 800961c:	0800bdb0 	.word	0x0800bdb0
 8009620:	7ff00000 	.word	0x7ff00000
 8009624:	0800bd95 	.word	0x0800bd95
 8009628:	0800bd8c 	.word	0x0800bd8c
 800962c:	0800bd61 	.word	0x0800bd61
 8009630:	3ff80000 	.word	0x3ff80000
 8009634:	0800bf00 	.word	0x0800bf00
 8009638:	0800be08 	.word	0x0800be08
 800963c:	2301      	movs	r3, #1
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	e7d7      	b.n	80095f2 <_dtoa_r+0x2c2>
 8009642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009644:	9301      	str	r3, [sp, #4]
 8009646:	9304      	str	r3, [sp, #16]
 8009648:	e7ba      	b.n	80095c0 <_dtoa_r+0x290>
 800964a:	3101      	adds	r1, #1
 800964c:	0052      	lsls	r2, r2, #1
 800964e:	e7ba      	b.n	80095c6 <_dtoa_r+0x296>
 8009650:	69e3      	ldr	r3, [r4, #28]
 8009652:	9a00      	ldr	r2, [sp, #0]
 8009654:	601a      	str	r2, [r3, #0]
 8009656:	9b04      	ldr	r3, [sp, #16]
 8009658:	2b0e      	cmp	r3, #14
 800965a:	f200 80a8 	bhi.w	80097ae <_dtoa_r+0x47e>
 800965e:	2d00      	cmp	r5, #0
 8009660:	f000 80a5 	beq.w	80097ae <_dtoa_r+0x47e>
 8009664:	f1bb 0f00 	cmp.w	fp, #0
 8009668:	dd38      	ble.n	80096dc <_dtoa_r+0x3ac>
 800966a:	4bc0      	ldr	r3, [pc, #768]	; (800996c <_dtoa_r+0x63c>)
 800966c:	f00b 020f 	and.w	r2, fp, #15
 8009670:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009674:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009678:	e9d3 6700 	ldrd	r6, r7, [r3]
 800967c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009680:	d019      	beq.n	80096b6 <_dtoa_r+0x386>
 8009682:	4bbb      	ldr	r3, [pc, #748]	; (8009970 <_dtoa_r+0x640>)
 8009684:	ec51 0b18 	vmov	r0, r1, d8
 8009688:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800968c:	f7f7 f8fe 	bl	800088c <__aeabi_ddiv>
 8009690:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009694:	f008 080f 	and.w	r8, r8, #15
 8009698:	2503      	movs	r5, #3
 800969a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009970 <_dtoa_r+0x640>
 800969e:	f1b8 0f00 	cmp.w	r8, #0
 80096a2:	d10a      	bne.n	80096ba <_dtoa_r+0x38a>
 80096a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096a8:	4632      	mov	r2, r6
 80096aa:	463b      	mov	r3, r7
 80096ac:	f7f7 f8ee 	bl	800088c <__aeabi_ddiv>
 80096b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096b4:	e02b      	b.n	800970e <_dtoa_r+0x3de>
 80096b6:	2502      	movs	r5, #2
 80096b8:	e7ef      	b.n	800969a <_dtoa_r+0x36a>
 80096ba:	f018 0f01 	tst.w	r8, #1
 80096be:	d008      	beq.n	80096d2 <_dtoa_r+0x3a2>
 80096c0:	4630      	mov	r0, r6
 80096c2:	4639      	mov	r1, r7
 80096c4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80096c8:	f7f6 ffb6 	bl	8000638 <__aeabi_dmul>
 80096cc:	3501      	adds	r5, #1
 80096ce:	4606      	mov	r6, r0
 80096d0:	460f      	mov	r7, r1
 80096d2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80096d6:	f109 0908 	add.w	r9, r9, #8
 80096da:	e7e0      	b.n	800969e <_dtoa_r+0x36e>
 80096dc:	f000 809f 	beq.w	800981e <_dtoa_r+0x4ee>
 80096e0:	f1cb 0600 	rsb	r6, fp, #0
 80096e4:	4ba1      	ldr	r3, [pc, #644]	; (800996c <_dtoa_r+0x63c>)
 80096e6:	4fa2      	ldr	r7, [pc, #648]	; (8009970 <_dtoa_r+0x640>)
 80096e8:	f006 020f 	and.w	r2, r6, #15
 80096ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	ec51 0b18 	vmov	r0, r1, d8
 80096f8:	f7f6 ff9e 	bl	8000638 <__aeabi_dmul>
 80096fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009700:	1136      	asrs	r6, r6, #4
 8009702:	2300      	movs	r3, #0
 8009704:	2502      	movs	r5, #2
 8009706:	2e00      	cmp	r6, #0
 8009708:	d17e      	bne.n	8009808 <_dtoa_r+0x4d8>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1d0      	bne.n	80096b0 <_dtoa_r+0x380>
 800970e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009710:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	f000 8084 	beq.w	8009822 <_dtoa_r+0x4f2>
 800971a:	4b96      	ldr	r3, [pc, #600]	; (8009974 <_dtoa_r+0x644>)
 800971c:	2200      	movs	r2, #0
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 f9fb 	bl	8000b1c <__aeabi_dcmplt>
 8009726:	2800      	cmp	r0, #0
 8009728:	d07b      	beq.n	8009822 <_dtoa_r+0x4f2>
 800972a:	9b04      	ldr	r3, [sp, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d078      	beq.n	8009822 <_dtoa_r+0x4f2>
 8009730:	9b01      	ldr	r3, [sp, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	dd39      	ble.n	80097aa <_dtoa_r+0x47a>
 8009736:	4b90      	ldr	r3, [pc, #576]	; (8009978 <_dtoa_r+0x648>)
 8009738:	2200      	movs	r2, #0
 800973a:	4640      	mov	r0, r8
 800973c:	4649      	mov	r1, r9
 800973e:	f7f6 ff7b 	bl	8000638 <__aeabi_dmul>
 8009742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009746:	9e01      	ldr	r6, [sp, #4]
 8009748:	f10b 37ff 	add.w	r7, fp, #4294967295
 800974c:	3501      	adds	r5, #1
 800974e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009752:	4628      	mov	r0, r5
 8009754:	f7f6 ff06 	bl	8000564 <__aeabi_i2d>
 8009758:	4642      	mov	r2, r8
 800975a:	464b      	mov	r3, r9
 800975c:	f7f6 ff6c 	bl	8000638 <__aeabi_dmul>
 8009760:	4b86      	ldr	r3, [pc, #536]	; (800997c <_dtoa_r+0x64c>)
 8009762:	2200      	movs	r2, #0
 8009764:	f7f6 fdb2 	bl	80002cc <__adddf3>
 8009768:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800976c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009770:	9303      	str	r3, [sp, #12]
 8009772:	2e00      	cmp	r6, #0
 8009774:	d158      	bne.n	8009828 <_dtoa_r+0x4f8>
 8009776:	4b82      	ldr	r3, [pc, #520]	; (8009980 <_dtoa_r+0x650>)
 8009778:	2200      	movs	r2, #0
 800977a:	4640      	mov	r0, r8
 800977c:	4649      	mov	r1, r9
 800977e:	f7f6 fda3 	bl	80002c8 <__aeabi_dsub>
 8009782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009786:	4680      	mov	r8, r0
 8009788:	4689      	mov	r9, r1
 800978a:	f7f7 f9e5 	bl	8000b58 <__aeabi_dcmpgt>
 800978e:	2800      	cmp	r0, #0
 8009790:	f040 8296 	bne.w	8009cc0 <_dtoa_r+0x990>
 8009794:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009798:	4640      	mov	r0, r8
 800979a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800979e:	4649      	mov	r1, r9
 80097a0:	f7f7 f9bc 	bl	8000b1c <__aeabi_dcmplt>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	f040 8289 	bne.w	8009cbc <_dtoa_r+0x98c>
 80097aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80097ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f2c0 814e 	blt.w	8009a52 <_dtoa_r+0x722>
 80097b6:	f1bb 0f0e 	cmp.w	fp, #14
 80097ba:	f300 814a 	bgt.w	8009a52 <_dtoa_r+0x722>
 80097be:	4b6b      	ldr	r3, [pc, #428]	; (800996c <_dtoa_r+0x63c>)
 80097c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80097c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80097c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	f280 80dc 	bge.w	8009988 <_dtoa_r+0x658>
 80097d0:	9b04      	ldr	r3, [sp, #16]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f300 80d8 	bgt.w	8009988 <_dtoa_r+0x658>
 80097d8:	f040 826f 	bne.w	8009cba <_dtoa_r+0x98a>
 80097dc:	4b68      	ldr	r3, [pc, #416]	; (8009980 <_dtoa_r+0x650>)
 80097de:	2200      	movs	r2, #0
 80097e0:	4640      	mov	r0, r8
 80097e2:	4649      	mov	r1, r9
 80097e4:	f7f6 ff28 	bl	8000638 <__aeabi_dmul>
 80097e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ec:	f7f7 f9aa 	bl	8000b44 <__aeabi_dcmpge>
 80097f0:	9e04      	ldr	r6, [sp, #16]
 80097f2:	4637      	mov	r7, r6
 80097f4:	2800      	cmp	r0, #0
 80097f6:	f040 8245 	bne.w	8009c84 <_dtoa_r+0x954>
 80097fa:	9d00      	ldr	r5, [sp, #0]
 80097fc:	2331      	movs	r3, #49	; 0x31
 80097fe:	f805 3b01 	strb.w	r3, [r5], #1
 8009802:	f10b 0b01 	add.w	fp, fp, #1
 8009806:	e241      	b.n	8009c8c <_dtoa_r+0x95c>
 8009808:	07f2      	lsls	r2, r6, #31
 800980a:	d505      	bpl.n	8009818 <_dtoa_r+0x4e8>
 800980c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009810:	f7f6 ff12 	bl	8000638 <__aeabi_dmul>
 8009814:	3501      	adds	r5, #1
 8009816:	2301      	movs	r3, #1
 8009818:	1076      	asrs	r6, r6, #1
 800981a:	3708      	adds	r7, #8
 800981c:	e773      	b.n	8009706 <_dtoa_r+0x3d6>
 800981e:	2502      	movs	r5, #2
 8009820:	e775      	b.n	800970e <_dtoa_r+0x3de>
 8009822:	9e04      	ldr	r6, [sp, #16]
 8009824:	465f      	mov	r7, fp
 8009826:	e792      	b.n	800974e <_dtoa_r+0x41e>
 8009828:	9900      	ldr	r1, [sp, #0]
 800982a:	4b50      	ldr	r3, [pc, #320]	; (800996c <_dtoa_r+0x63c>)
 800982c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009830:	4431      	add	r1, r6
 8009832:	9102      	str	r1, [sp, #8]
 8009834:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009836:	eeb0 9a47 	vmov.f32	s18, s14
 800983a:	eef0 9a67 	vmov.f32	s19, s15
 800983e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009846:	2900      	cmp	r1, #0
 8009848:	d044      	beq.n	80098d4 <_dtoa_r+0x5a4>
 800984a:	494e      	ldr	r1, [pc, #312]	; (8009984 <_dtoa_r+0x654>)
 800984c:	2000      	movs	r0, #0
 800984e:	f7f7 f81d 	bl	800088c <__aeabi_ddiv>
 8009852:	ec53 2b19 	vmov	r2, r3, d9
 8009856:	f7f6 fd37 	bl	80002c8 <__aeabi_dsub>
 800985a:	9d00      	ldr	r5, [sp, #0]
 800985c:	ec41 0b19 	vmov	d9, r0, r1
 8009860:	4649      	mov	r1, r9
 8009862:	4640      	mov	r0, r8
 8009864:	f7f7 f998 	bl	8000b98 <__aeabi_d2iz>
 8009868:	4606      	mov	r6, r0
 800986a:	f7f6 fe7b 	bl	8000564 <__aeabi_i2d>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4640      	mov	r0, r8
 8009874:	4649      	mov	r1, r9
 8009876:	f7f6 fd27 	bl	80002c8 <__aeabi_dsub>
 800987a:	3630      	adds	r6, #48	; 0x30
 800987c:	f805 6b01 	strb.w	r6, [r5], #1
 8009880:	ec53 2b19 	vmov	r2, r3, d9
 8009884:	4680      	mov	r8, r0
 8009886:	4689      	mov	r9, r1
 8009888:	f7f7 f948 	bl	8000b1c <__aeabi_dcmplt>
 800988c:	2800      	cmp	r0, #0
 800988e:	d164      	bne.n	800995a <_dtoa_r+0x62a>
 8009890:	4642      	mov	r2, r8
 8009892:	464b      	mov	r3, r9
 8009894:	4937      	ldr	r1, [pc, #220]	; (8009974 <_dtoa_r+0x644>)
 8009896:	2000      	movs	r0, #0
 8009898:	f7f6 fd16 	bl	80002c8 <__aeabi_dsub>
 800989c:	ec53 2b19 	vmov	r2, r3, d9
 80098a0:	f7f7 f93c 	bl	8000b1c <__aeabi_dcmplt>
 80098a4:	2800      	cmp	r0, #0
 80098a6:	f040 80b6 	bne.w	8009a16 <_dtoa_r+0x6e6>
 80098aa:	9b02      	ldr	r3, [sp, #8]
 80098ac:	429d      	cmp	r5, r3
 80098ae:	f43f af7c 	beq.w	80097aa <_dtoa_r+0x47a>
 80098b2:	4b31      	ldr	r3, [pc, #196]	; (8009978 <_dtoa_r+0x648>)
 80098b4:	ec51 0b19 	vmov	r0, r1, d9
 80098b8:	2200      	movs	r2, #0
 80098ba:	f7f6 febd 	bl	8000638 <__aeabi_dmul>
 80098be:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <_dtoa_r+0x648>)
 80098c0:	ec41 0b19 	vmov	d9, r0, r1
 80098c4:	2200      	movs	r2, #0
 80098c6:	4640      	mov	r0, r8
 80098c8:	4649      	mov	r1, r9
 80098ca:	f7f6 feb5 	bl	8000638 <__aeabi_dmul>
 80098ce:	4680      	mov	r8, r0
 80098d0:	4689      	mov	r9, r1
 80098d2:	e7c5      	b.n	8009860 <_dtoa_r+0x530>
 80098d4:	ec51 0b17 	vmov	r0, r1, d7
 80098d8:	f7f6 feae 	bl	8000638 <__aeabi_dmul>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	9d00      	ldr	r5, [sp, #0]
 80098e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e2:	ec41 0b19 	vmov	d9, r0, r1
 80098e6:	4649      	mov	r1, r9
 80098e8:	4640      	mov	r0, r8
 80098ea:	f7f7 f955 	bl	8000b98 <__aeabi_d2iz>
 80098ee:	4606      	mov	r6, r0
 80098f0:	f7f6 fe38 	bl	8000564 <__aeabi_i2d>
 80098f4:	3630      	adds	r6, #48	; 0x30
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	4640      	mov	r0, r8
 80098fc:	4649      	mov	r1, r9
 80098fe:	f7f6 fce3 	bl	80002c8 <__aeabi_dsub>
 8009902:	f805 6b01 	strb.w	r6, [r5], #1
 8009906:	9b02      	ldr	r3, [sp, #8]
 8009908:	429d      	cmp	r5, r3
 800990a:	4680      	mov	r8, r0
 800990c:	4689      	mov	r9, r1
 800990e:	f04f 0200 	mov.w	r2, #0
 8009912:	d124      	bne.n	800995e <_dtoa_r+0x62e>
 8009914:	4b1b      	ldr	r3, [pc, #108]	; (8009984 <_dtoa_r+0x654>)
 8009916:	ec51 0b19 	vmov	r0, r1, d9
 800991a:	f7f6 fcd7 	bl	80002cc <__adddf3>
 800991e:	4602      	mov	r2, r0
 8009920:	460b      	mov	r3, r1
 8009922:	4640      	mov	r0, r8
 8009924:	4649      	mov	r1, r9
 8009926:	f7f7 f917 	bl	8000b58 <__aeabi_dcmpgt>
 800992a:	2800      	cmp	r0, #0
 800992c:	d173      	bne.n	8009a16 <_dtoa_r+0x6e6>
 800992e:	ec53 2b19 	vmov	r2, r3, d9
 8009932:	4914      	ldr	r1, [pc, #80]	; (8009984 <_dtoa_r+0x654>)
 8009934:	2000      	movs	r0, #0
 8009936:	f7f6 fcc7 	bl	80002c8 <__aeabi_dsub>
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	4640      	mov	r0, r8
 8009940:	4649      	mov	r1, r9
 8009942:	f7f7 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8009946:	2800      	cmp	r0, #0
 8009948:	f43f af2f 	beq.w	80097aa <_dtoa_r+0x47a>
 800994c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800994e:	1e6b      	subs	r3, r5, #1
 8009950:	930f      	str	r3, [sp, #60]	; 0x3c
 8009952:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009956:	2b30      	cmp	r3, #48	; 0x30
 8009958:	d0f8      	beq.n	800994c <_dtoa_r+0x61c>
 800995a:	46bb      	mov	fp, r7
 800995c:	e04a      	b.n	80099f4 <_dtoa_r+0x6c4>
 800995e:	4b06      	ldr	r3, [pc, #24]	; (8009978 <_dtoa_r+0x648>)
 8009960:	f7f6 fe6a 	bl	8000638 <__aeabi_dmul>
 8009964:	4680      	mov	r8, r0
 8009966:	4689      	mov	r9, r1
 8009968:	e7bd      	b.n	80098e6 <_dtoa_r+0x5b6>
 800996a:	bf00      	nop
 800996c:	0800bf00 	.word	0x0800bf00
 8009970:	0800bed8 	.word	0x0800bed8
 8009974:	3ff00000 	.word	0x3ff00000
 8009978:	40240000 	.word	0x40240000
 800997c:	401c0000 	.word	0x401c0000
 8009980:	40140000 	.word	0x40140000
 8009984:	3fe00000 	.word	0x3fe00000
 8009988:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800998c:	9d00      	ldr	r5, [sp, #0]
 800998e:	4642      	mov	r2, r8
 8009990:	464b      	mov	r3, r9
 8009992:	4630      	mov	r0, r6
 8009994:	4639      	mov	r1, r7
 8009996:	f7f6 ff79 	bl	800088c <__aeabi_ddiv>
 800999a:	f7f7 f8fd 	bl	8000b98 <__aeabi_d2iz>
 800999e:	9001      	str	r0, [sp, #4]
 80099a0:	f7f6 fde0 	bl	8000564 <__aeabi_i2d>
 80099a4:	4642      	mov	r2, r8
 80099a6:	464b      	mov	r3, r9
 80099a8:	f7f6 fe46 	bl	8000638 <__aeabi_dmul>
 80099ac:	4602      	mov	r2, r0
 80099ae:	460b      	mov	r3, r1
 80099b0:	4630      	mov	r0, r6
 80099b2:	4639      	mov	r1, r7
 80099b4:	f7f6 fc88 	bl	80002c8 <__aeabi_dsub>
 80099b8:	9e01      	ldr	r6, [sp, #4]
 80099ba:	9f04      	ldr	r7, [sp, #16]
 80099bc:	3630      	adds	r6, #48	; 0x30
 80099be:	f805 6b01 	strb.w	r6, [r5], #1
 80099c2:	9e00      	ldr	r6, [sp, #0]
 80099c4:	1bae      	subs	r6, r5, r6
 80099c6:	42b7      	cmp	r7, r6
 80099c8:	4602      	mov	r2, r0
 80099ca:	460b      	mov	r3, r1
 80099cc:	d134      	bne.n	8009a38 <_dtoa_r+0x708>
 80099ce:	f7f6 fc7d 	bl	80002cc <__adddf3>
 80099d2:	4642      	mov	r2, r8
 80099d4:	464b      	mov	r3, r9
 80099d6:	4606      	mov	r6, r0
 80099d8:	460f      	mov	r7, r1
 80099da:	f7f7 f8bd 	bl	8000b58 <__aeabi_dcmpgt>
 80099de:	b9c8      	cbnz	r0, 8009a14 <_dtoa_r+0x6e4>
 80099e0:	4642      	mov	r2, r8
 80099e2:	464b      	mov	r3, r9
 80099e4:	4630      	mov	r0, r6
 80099e6:	4639      	mov	r1, r7
 80099e8:	f7f7 f88e 	bl	8000b08 <__aeabi_dcmpeq>
 80099ec:	b110      	cbz	r0, 80099f4 <_dtoa_r+0x6c4>
 80099ee:	9b01      	ldr	r3, [sp, #4]
 80099f0:	07db      	lsls	r3, r3, #31
 80099f2:	d40f      	bmi.n	8009a14 <_dtoa_r+0x6e4>
 80099f4:	4651      	mov	r1, sl
 80099f6:	4620      	mov	r0, r4
 80099f8:	f000 ff36 	bl	800a868 <_Bfree>
 80099fc:	2300      	movs	r3, #0
 80099fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a00:	702b      	strb	r3, [r5, #0]
 8009a02:	f10b 0301 	add.w	r3, fp, #1
 8009a06:	6013      	str	r3, [r2, #0]
 8009a08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f43f ace2 	beq.w	80093d4 <_dtoa_r+0xa4>
 8009a10:	601d      	str	r5, [r3, #0]
 8009a12:	e4df      	b.n	80093d4 <_dtoa_r+0xa4>
 8009a14:	465f      	mov	r7, fp
 8009a16:	462b      	mov	r3, r5
 8009a18:	461d      	mov	r5, r3
 8009a1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a1e:	2a39      	cmp	r2, #57	; 0x39
 8009a20:	d106      	bne.n	8009a30 <_dtoa_r+0x700>
 8009a22:	9a00      	ldr	r2, [sp, #0]
 8009a24:	429a      	cmp	r2, r3
 8009a26:	d1f7      	bne.n	8009a18 <_dtoa_r+0x6e8>
 8009a28:	9900      	ldr	r1, [sp, #0]
 8009a2a:	2230      	movs	r2, #48	; 0x30
 8009a2c:	3701      	adds	r7, #1
 8009a2e:	700a      	strb	r2, [r1, #0]
 8009a30:	781a      	ldrb	r2, [r3, #0]
 8009a32:	3201      	adds	r2, #1
 8009a34:	701a      	strb	r2, [r3, #0]
 8009a36:	e790      	b.n	800995a <_dtoa_r+0x62a>
 8009a38:	4ba3      	ldr	r3, [pc, #652]	; (8009cc8 <_dtoa_r+0x998>)
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	2200      	movs	r2, #0
 8009a42:	2300      	movs	r3, #0
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	f7f7 f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	d09e      	beq.n	800998e <_dtoa_r+0x65e>
 8009a50:	e7d0      	b.n	80099f4 <_dtoa_r+0x6c4>
 8009a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a54:	2a00      	cmp	r2, #0
 8009a56:	f000 80ca 	beq.w	8009bee <_dtoa_r+0x8be>
 8009a5a:	9a07      	ldr	r2, [sp, #28]
 8009a5c:	2a01      	cmp	r2, #1
 8009a5e:	f300 80ad 	bgt.w	8009bbc <_dtoa_r+0x88c>
 8009a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a64:	2a00      	cmp	r2, #0
 8009a66:	f000 80a5 	beq.w	8009bb4 <_dtoa_r+0x884>
 8009a6a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a6e:	9e08      	ldr	r6, [sp, #32]
 8009a70:	9d05      	ldr	r5, [sp, #20]
 8009a72:	9a05      	ldr	r2, [sp, #20]
 8009a74:	441a      	add	r2, r3
 8009a76:	9205      	str	r2, [sp, #20]
 8009a78:	9a06      	ldr	r2, [sp, #24]
 8009a7a:	2101      	movs	r1, #1
 8009a7c:	441a      	add	r2, r3
 8009a7e:	4620      	mov	r0, r4
 8009a80:	9206      	str	r2, [sp, #24]
 8009a82:	f000 fff1 	bl	800aa68 <__i2b>
 8009a86:	4607      	mov	r7, r0
 8009a88:	b165      	cbz	r5, 8009aa4 <_dtoa_r+0x774>
 8009a8a:	9b06      	ldr	r3, [sp, #24]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	dd09      	ble.n	8009aa4 <_dtoa_r+0x774>
 8009a90:	42ab      	cmp	r3, r5
 8009a92:	9a05      	ldr	r2, [sp, #20]
 8009a94:	bfa8      	it	ge
 8009a96:	462b      	movge	r3, r5
 8009a98:	1ad2      	subs	r2, r2, r3
 8009a9a:	9205      	str	r2, [sp, #20]
 8009a9c:	9a06      	ldr	r2, [sp, #24]
 8009a9e:	1aed      	subs	r5, r5, r3
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	9306      	str	r3, [sp, #24]
 8009aa4:	9b08      	ldr	r3, [sp, #32]
 8009aa6:	b1f3      	cbz	r3, 8009ae6 <_dtoa_r+0x7b6>
 8009aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f000 80a3 	beq.w	8009bf6 <_dtoa_r+0x8c6>
 8009ab0:	2e00      	cmp	r6, #0
 8009ab2:	dd10      	ble.n	8009ad6 <_dtoa_r+0x7a6>
 8009ab4:	4639      	mov	r1, r7
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	4620      	mov	r0, r4
 8009aba:	f001 f895 	bl	800abe8 <__pow5mult>
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4601      	mov	r1, r0
 8009ac2:	4607      	mov	r7, r0
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 ffe5 	bl	800aa94 <__multiply>
 8009aca:	4651      	mov	r1, sl
 8009acc:	4680      	mov	r8, r0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 feca 	bl	800a868 <_Bfree>
 8009ad4:	46c2      	mov	sl, r8
 8009ad6:	9b08      	ldr	r3, [sp, #32]
 8009ad8:	1b9a      	subs	r2, r3, r6
 8009ada:	d004      	beq.n	8009ae6 <_dtoa_r+0x7b6>
 8009adc:	4651      	mov	r1, sl
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f001 f882 	bl	800abe8 <__pow5mult>
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	2101      	movs	r1, #1
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 ffbd 	bl	800aa68 <__i2b>
 8009aee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	4606      	mov	r6, r0
 8009af4:	f340 8081 	ble.w	8009bfa <_dtoa_r+0x8ca>
 8009af8:	461a      	mov	r2, r3
 8009afa:	4601      	mov	r1, r0
 8009afc:	4620      	mov	r0, r4
 8009afe:	f001 f873 	bl	800abe8 <__pow5mult>
 8009b02:	9b07      	ldr	r3, [sp, #28]
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	4606      	mov	r6, r0
 8009b08:	dd7a      	ble.n	8009c00 <_dtoa_r+0x8d0>
 8009b0a:	f04f 0800 	mov.w	r8, #0
 8009b0e:	6933      	ldr	r3, [r6, #16]
 8009b10:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009b14:	6918      	ldr	r0, [r3, #16]
 8009b16:	f000 ff59 	bl	800a9cc <__hi0bits>
 8009b1a:	f1c0 0020 	rsb	r0, r0, #32
 8009b1e:	9b06      	ldr	r3, [sp, #24]
 8009b20:	4418      	add	r0, r3
 8009b22:	f010 001f 	ands.w	r0, r0, #31
 8009b26:	f000 8094 	beq.w	8009c52 <_dtoa_r+0x922>
 8009b2a:	f1c0 0320 	rsb	r3, r0, #32
 8009b2e:	2b04      	cmp	r3, #4
 8009b30:	f340 8085 	ble.w	8009c3e <_dtoa_r+0x90e>
 8009b34:	9b05      	ldr	r3, [sp, #20]
 8009b36:	f1c0 001c 	rsb	r0, r0, #28
 8009b3a:	4403      	add	r3, r0
 8009b3c:	9305      	str	r3, [sp, #20]
 8009b3e:	9b06      	ldr	r3, [sp, #24]
 8009b40:	4403      	add	r3, r0
 8009b42:	4405      	add	r5, r0
 8009b44:	9306      	str	r3, [sp, #24]
 8009b46:	9b05      	ldr	r3, [sp, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dd05      	ble.n	8009b58 <_dtoa_r+0x828>
 8009b4c:	4651      	mov	r1, sl
 8009b4e:	461a      	mov	r2, r3
 8009b50:	4620      	mov	r0, r4
 8009b52:	f001 f8a3 	bl	800ac9c <__lshift>
 8009b56:	4682      	mov	sl, r0
 8009b58:	9b06      	ldr	r3, [sp, #24]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	dd05      	ble.n	8009b6a <_dtoa_r+0x83a>
 8009b5e:	4631      	mov	r1, r6
 8009b60:	461a      	mov	r2, r3
 8009b62:	4620      	mov	r0, r4
 8009b64:	f001 f89a 	bl	800ac9c <__lshift>
 8009b68:	4606      	mov	r6, r0
 8009b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d072      	beq.n	8009c56 <_dtoa_r+0x926>
 8009b70:	4631      	mov	r1, r6
 8009b72:	4650      	mov	r0, sl
 8009b74:	f001 f8fe 	bl	800ad74 <__mcmp>
 8009b78:	2800      	cmp	r0, #0
 8009b7a:	da6c      	bge.n	8009c56 <_dtoa_r+0x926>
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4651      	mov	r1, sl
 8009b80:	220a      	movs	r2, #10
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 fe92 	bl	800a8ac <__multadd>
 8009b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009b8e:	4682      	mov	sl, r0
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	f000 81b0 	beq.w	8009ef6 <_dtoa_r+0xbc6>
 8009b96:	2300      	movs	r3, #0
 8009b98:	4639      	mov	r1, r7
 8009b9a:	220a      	movs	r2, #10
 8009b9c:	4620      	mov	r0, r4
 8009b9e:	f000 fe85 	bl	800a8ac <__multadd>
 8009ba2:	9b01      	ldr	r3, [sp, #4]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	4607      	mov	r7, r0
 8009ba8:	f300 8096 	bgt.w	8009cd8 <_dtoa_r+0x9a8>
 8009bac:	9b07      	ldr	r3, [sp, #28]
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	dc59      	bgt.n	8009c66 <_dtoa_r+0x936>
 8009bb2:	e091      	b.n	8009cd8 <_dtoa_r+0x9a8>
 8009bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009bba:	e758      	b.n	8009a6e <_dtoa_r+0x73e>
 8009bbc:	9b04      	ldr	r3, [sp, #16]
 8009bbe:	1e5e      	subs	r6, r3, #1
 8009bc0:	9b08      	ldr	r3, [sp, #32]
 8009bc2:	42b3      	cmp	r3, r6
 8009bc4:	bfbf      	itttt	lt
 8009bc6:	9b08      	ldrlt	r3, [sp, #32]
 8009bc8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009bca:	9608      	strlt	r6, [sp, #32]
 8009bcc:	1af3      	sublt	r3, r6, r3
 8009bce:	bfb4      	ite	lt
 8009bd0:	18d2      	addlt	r2, r2, r3
 8009bd2:	1b9e      	subge	r6, r3, r6
 8009bd4:	9b04      	ldr	r3, [sp, #16]
 8009bd6:	bfbc      	itt	lt
 8009bd8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009bda:	2600      	movlt	r6, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	bfb7      	itett	lt
 8009be0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009be4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009be8:	1a9d      	sublt	r5, r3, r2
 8009bea:	2300      	movlt	r3, #0
 8009bec:	e741      	b.n	8009a72 <_dtoa_r+0x742>
 8009bee:	9e08      	ldr	r6, [sp, #32]
 8009bf0:	9d05      	ldr	r5, [sp, #20]
 8009bf2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009bf4:	e748      	b.n	8009a88 <_dtoa_r+0x758>
 8009bf6:	9a08      	ldr	r2, [sp, #32]
 8009bf8:	e770      	b.n	8009adc <_dtoa_r+0x7ac>
 8009bfa:	9b07      	ldr	r3, [sp, #28]
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	dc19      	bgt.n	8009c34 <_dtoa_r+0x904>
 8009c00:	9b02      	ldr	r3, [sp, #8]
 8009c02:	b9bb      	cbnz	r3, 8009c34 <_dtoa_r+0x904>
 8009c04:	9b03      	ldr	r3, [sp, #12]
 8009c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c0a:	b99b      	cbnz	r3, 8009c34 <_dtoa_r+0x904>
 8009c0c:	9b03      	ldr	r3, [sp, #12]
 8009c0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c12:	0d1b      	lsrs	r3, r3, #20
 8009c14:	051b      	lsls	r3, r3, #20
 8009c16:	b183      	cbz	r3, 8009c3a <_dtoa_r+0x90a>
 8009c18:	9b05      	ldr	r3, [sp, #20]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	9305      	str	r3, [sp, #20]
 8009c1e:	9b06      	ldr	r3, [sp, #24]
 8009c20:	3301      	adds	r3, #1
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	f04f 0801 	mov.w	r8, #1
 8009c28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f47f af6f 	bne.w	8009b0e <_dtoa_r+0x7de>
 8009c30:	2001      	movs	r0, #1
 8009c32:	e774      	b.n	8009b1e <_dtoa_r+0x7ee>
 8009c34:	f04f 0800 	mov.w	r8, #0
 8009c38:	e7f6      	b.n	8009c28 <_dtoa_r+0x8f8>
 8009c3a:	4698      	mov	r8, r3
 8009c3c:	e7f4      	b.n	8009c28 <_dtoa_r+0x8f8>
 8009c3e:	d082      	beq.n	8009b46 <_dtoa_r+0x816>
 8009c40:	9a05      	ldr	r2, [sp, #20]
 8009c42:	331c      	adds	r3, #28
 8009c44:	441a      	add	r2, r3
 8009c46:	9205      	str	r2, [sp, #20]
 8009c48:	9a06      	ldr	r2, [sp, #24]
 8009c4a:	441a      	add	r2, r3
 8009c4c:	441d      	add	r5, r3
 8009c4e:	9206      	str	r2, [sp, #24]
 8009c50:	e779      	b.n	8009b46 <_dtoa_r+0x816>
 8009c52:	4603      	mov	r3, r0
 8009c54:	e7f4      	b.n	8009c40 <_dtoa_r+0x910>
 8009c56:	9b04      	ldr	r3, [sp, #16]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	dc37      	bgt.n	8009ccc <_dtoa_r+0x99c>
 8009c5c:	9b07      	ldr	r3, [sp, #28]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	dd34      	ble.n	8009ccc <_dtoa_r+0x99c>
 8009c62:	9b04      	ldr	r3, [sp, #16]
 8009c64:	9301      	str	r3, [sp, #4]
 8009c66:	9b01      	ldr	r3, [sp, #4]
 8009c68:	b963      	cbnz	r3, 8009c84 <_dtoa_r+0x954>
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	2205      	movs	r2, #5
 8009c6e:	4620      	mov	r0, r4
 8009c70:	f000 fe1c 	bl	800a8ac <__multadd>
 8009c74:	4601      	mov	r1, r0
 8009c76:	4606      	mov	r6, r0
 8009c78:	4650      	mov	r0, sl
 8009c7a:	f001 f87b 	bl	800ad74 <__mcmp>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	f73f adbb 	bgt.w	80097fa <_dtoa_r+0x4ca>
 8009c84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c86:	9d00      	ldr	r5, [sp, #0]
 8009c88:	ea6f 0b03 	mvn.w	fp, r3
 8009c8c:	f04f 0800 	mov.w	r8, #0
 8009c90:	4631      	mov	r1, r6
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 fde8 	bl	800a868 <_Bfree>
 8009c98:	2f00      	cmp	r7, #0
 8009c9a:	f43f aeab 	beq.w	80099f4 <_dtoa_r+0x6c4>
 8009c9e:	f1b8 0f00 	cmp.w	r8, #0
 8009ca2:	d005      	beq.n	8009cb0 <_dtoa_r+0x980>
 8009ca4:	45b8      	cmp	r8, r7
 8009ca6:	d003      	beq.n	8009cb0 <_dtoa_r+0x980>
 8009ca8:	4641      	mov	r1, r8
 8009caa:	4620      	mov	r0, r4
 8009cac:	f000 fddc 	bl	800a868 <_Bfree>
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f000 fdd8 	bl	800a868 <_Bfree>
 8009cb8:	e69c      	b.n	80099f4 <_dtoa_r+0x6c4>
 8009cba:	2600      	movs	r6, #0
 8009cbc:	4637      	mov	r7, r6
 8009cbe:	e7e1      	b.n	8009c84 <_dtoa_r+0x954>
 8009cc0:	46bb      	mov	fp, r7
 8009cc2:	4637      	mov	r7, r6
 8009cc4:	e599      	b.n	80097fa <_dtoa_r+0x4ca>
 8009cc6:	bf00      	nop
 8009cc8:	40240000 	.word	0x40240000
 8009ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f000 80c8 	beq.w	8009e64 <_dtoa_r+0xb34>
 8009cd4:	9b04      	ldr	r3, [sp, #16]
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	2d00      	cmp	r5, #0
 8009cda:	dd05      	ble.n	8009ce8 <_dtoa_r+0x9b8>
 8009cdc:	4639      	mov	r1, r7
 8009cde:	462a      	mov	r2, r5
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f000 ffdb 	bl	800ac9c <__lshift>
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	f1b8 0f00 	cmp.w	r8, #0
 8009cec:	d05b      	beq.n	8009da6 <_dtoa_r+0xa76>
 8009cee:	6879      	ldr	r1, [r7, #4]
 8009cf0:	4620      	mov	r0, r4
 8009cf2:	f000 fd79 	bl	800a7e8 <_Balloc>
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b928      	cbnz	r0, 8009d06 <_dtoa_r+0x9d6>
 8009cfa:	4b83      	ldr	r3, [pc, #524]	; (8009f08 <_dtoa_r+0xbd8>)
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009d02:	f7ff bb2e 	b.w	8009362 <_dtoa_r+0x32>
 8009d06:	693a      	ldr	r2, [r7, #16]
 8009d08:	3202      	adds	r2, #2
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	f107 010c 	add.w	r1, r7, #12
 8009d10:	300c      	adds	r0, #12
 8009d12:	f7ff fa6e 	bl	80091f2 <memcpy>
 8009d16:	2201      	movs	r2, #1
 8009d18:	4629      	mov	r1, r5
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f000 ffbe 	bl	800ac9c <__lshift>
 8009d20:	9b00      	ldr	r3, [sp, #0]
 8009d22:	3301      	adds	r3, #1
 8009d24:	9304      	str	r3, [sp, #16]
 8009d26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	9308      	str	r3, [sp, #32]
 8009d2e:	9b02      	ldr	r3, [sp, #8]
 8009d30:	f003 0301 	and.w	r3, r3, #1
 8009d34:	46b8      	mov	r8, r7
 8009d36:	9306      	str	r3, [sp, #24]
 8009d38:	4607      	mov	r7, r0
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	4631      	mov	r1, r6
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4650      	mov	r0, sl
 8009d42:	9301      	str	r3, [sp, #4]
 8009d44:	f7ff fa6c 	bl	8009220 <quorem>
 8009d48:	4641      	mov	r1, r8
 8009d4a:	9002      	str	r0, [sp, #8]
 8009d4c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009d50:	4650      	mov	r0, sl
 8009d52:	f001 f80f 	bl	800ad74 <__mcmp>
 8009d56:	463a      	mov	r2, r7
 8009d58:	9005      	str	r0, [sp, #20]
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4620      	mov	r0, r4
 8009d5e:	f001 f825 	bl	800adac <__mdiff>
 8009d62:	68c2      	ldr	r2, [r0, #12]
 8009d64:	4605      	mov	r5, r0
 8009d66:	bb02      	cbnz	r2, 8009daa <_dtoa_r+0xa7a>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	4650      	mov	r0, sl
 8009d6c:	f001 f802 	bl	800ad74 <__mcmp>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4629      	mov	r1, r5
 8009d74:	4620      	mov	r0, r4
 8009d76:	9209      	str	r2, [sp, #36]	; 0x24
 8009d78:	f000 fd76 	bl	800a868 <_Bfree>
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d80:	9d04      	ldr	r5, [sp, #16]
 8009d82:	ea43 0102 	orr.w	r1, r3, r2
 8009d86:	9b06      	ldr	r3, [sp, #24]
 8009d88:	4319      	orrs	r1, r3
 8009d8a:	d110      	bne.n	8009dae <_dtoa_r+0xa7e>
 8009d8c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009d90:	d029      	beq.n	8009de6 <_dtoa_r+0xab6>
 8009d92:	9b05      	ldr	r3, [sp, #20]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd02      	ble.n	8009d9e <_dtoa_r+0xa6e>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009d9e:	9b01      	ldr	r3, [sp, #4]
 8009da0:	f883 9000 	strb.w	r9, [r3]
 8009da4:	e774      	b.n	8009c90 <_dtoa_r+0x960>
 8009da6:	4638      	mov	r0, r7
 8009da8:	e7ba      	b.n	8009d20 <_dtoa_r+0x9f0>
 8009daa:	2201      	movs	r2, #1
 8009dac:	e7e1      	b.n	8009d72 <_dtoa_r+0xa42>
 8009dae:	9b05      	ldr	r3, [sp, #20]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db04      	blt.n	8009dbe <_dtoa_r+0xa8e>
 8009db4:	9907      	ldr	r1, [sp, #28]
 8009db6:	430b      	orrs	r3, r1
 8009db8:	9906      	ldr	r1, [sp, #24]
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	d120      	bne.n	8009e00 <_dtoa_r+0xad0>
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	dded      	ble.n	8009d9e <_dtoa_r+0xa6e>
 8009dc2:	4651      	mov	r1, sl
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4620      	mov	r0, r4
 8009dc8:	f000 ff68 	bl	800ac9c <__lshift>
 8009dcc:	4631      	mov	r1, r6
 8009dce:	4682      	mov	sl, r0
 8009dd0:	f000 ffd0 	bl	800ad74 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dc03      	bgt.n	8009de0 <_dtoa_r+0xab0>
 8009dd8:	d1e1      	bne.n	8009d9e <_dtoa_r+0xa6e>
 8009dda:	f019 0f01 	tst.w	r9, #1
 8009dde:	d0de      	beq.n	8009d9e <_dtoa_r+0xa6e>
 8009de0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009de4:	d1d8      	bne.n	8009d98 <_dtoa_r+0xa68>
 8009de6:	9a01      	ldr	r2, [sp, #4]
 8009de8:	2339      	movs	r3, #57	; 0x39
 8009dea:	7013      	strb	r3, [r2, #0]
 8009dec:	462b      	mov	r3, r5
 8009dee:	461d      	mov	r5, r3
 8009df0:	3b01      	subs	r3, #1
 8009df2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009df6:	2a39      	cmp	r2, #57	; 0x39
 8009df8:	d06c      	beq.n	8009ed4 <_dtoa_r+0xba4>
 8009dfa:	3201      	adds	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	e747      	b.n	8009c90 <_dtoa_r+0x960>
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	dd07      	ble.n	8009e14 <_dtoa_r+0xae4>
 8009e04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009e08:	d0ed      	beq.n	8009de6 <_dtoa_r+0xab6>
 8009e0a:	9a01      	ldr	r2, [sp, #4]
 8009e0c:	f109 0301 	add.w	r3, r9, #1
 8009e10:	7013      	strb	r3, [r2, #0]
 8009e12:	e73d      	b.n	8009c90 <_dtoa_r+0x960>
 8009e14:	9b04      	ldr	r3, [sp, #16]
 8009e16:	9a08      	ldr	r2, [sp, #32]
 8009e18:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d043      	beq.n	8009ea8 <_dtoa_r+0xb78>
 8009e20:	4651      	mov	r1, sl
 8009e22:	2300      	movs	r3, #0
 8009e24:	220a      	movs	r2, #10
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 fd40 	bl	800a8ac <__multadd>
 8009e2c:	45b8      	cmp	r8, r7
 8009e2e:	4682      	mov	sl, r0
 8009e30:	f04f 0300 	mov.w	r3, #0
 8009e34:	f04f 020a 	mov.w	r2, #10
 8009e38:	4641      	mov	r1, r8
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	d107      	bne.n	8009e4e <_dtoa_r+0xb1e>
 8009e3e:	f000 fd35 	bl	800a8ac <__multadd>
 8009e42:	4680      	mov	r8, r0
 8009e44:	4607      	mov	r7, r0
 8009e46:	9b04      	ldr	r3, [sp, #16]
 8009e48:	3301      	adds	r3, #1
 8009e4a:	9304      	str	r3, [sp, #16]
 8009e4c:	e775      	b.n	8009d3a <_dtoa_r+0xa0a>
 8009e4e:	f000 fd2d 	bl	800a8ac <__multadd>
 8009e52:	4639      	mov	r1, r7
 8009e54:	4680      	mov	r8, r0
 8009e56:	2300      	movs	r3, #0
 8009e58:	220a      	movs	r2, #10
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	f000 fd26 	bl	800a8ac <__multadd>
 8009e60:	4607      	mov	r7, r0
 8009e62:	e7f0      	b.n	8009e46 <_dtoa_r+0xb16>
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	9301      	str	r3, [sp, #4]
 8009e68:	9d00      	ldr	r5, [sp, #0]
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	4650      	mov	r0, sl
 8009e6e:	f7ff f9d7 	bl	8009220 <quorem>
 8009e72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009e76:	9b00      	ldr	r3, [sp, #0]
 8009e78:	f805 9b01 	strb.w	r9, [r5], #1
 8009e7c:	1aea      	subs	r2, r5, r3
 8009e7e:	9b01      	ldr	r3, [sp, #4]
 8009e80:	4293      	cmp	r3, r2
 8009e82:	dd07      	ble.n	8009e94 <_dtoa_r+0xb64>
 8009e84:	4651      	mov	r1, sl
 8009e86:	2300      	movs	r3, #0
 8009e88:	220a      	movs	r2, #10
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f000 fd0e 	bl	800a8ac <__multadd>
 8009e90:	4682      	mov	sl, r0
 8009e92:	e7ea      	b.n	8009e6a <_dtoa_r+0xb3a>
 8009e94:	9b01      	ldr	r3, [sp, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	bfc8      	it	gt
 8009e9a:	461d      	movgt	r5, r3
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	bfd8      	it	le
 8009ea0:	2501      	movle	r5, #1
 8009ea2:	441d      	add	r5, r3
 8009ea4:	f04f 0800 	mov.w	r8, #0
 8009ea8:	4651      	mov	r1, sl
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 fef5 	bl	800ac9c <__lshift>
 8009eb2:	4631      	mov	r1, r6
 8009eb4:	4682      	mov	sl, r0
 8009eb6:	f000 ff5d 	bl	800ad74 <__mcmp>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	dc96      	bgt.n	8009dec <_dtoa_r+0xabc>
 8009ebe:	d102      	bne.n	8009ec6 <_dtoa_r+0xb96>
 8009ec0:	f019 0f01 	tst.w	r9, #1
 8009ec4:	d192      	bne.n	8009dec <_dtoa_r+0xabc>
 8009ec6:	462b      	mov	r3, r5
 8009ec8:	461d      	mov	r5, r3
 8009eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ece:	2a30      	cmp	r2, #48	; 0x30
 8009ed0:	d0fa      	beq.n	8009ec8 <_dtoa_r+0xb98>
 8009ed2:	e6dd      	b.n	8009c90 <_dtoa_r+0x960>
 8009ed4:	9a00      	ldr	r2, [sp, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d189      	bne.n	8009dee <_dtoa_r+0xabe>
 8009eda:	f10b 0b01 	add.w	fp, fp, #1
 8009ede:	2331      	movs	r3, #49	; 0x31
 8009ee0:	e796      	b.n	8009e10 <_dtoa_r+0xae0>
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <_dtoa_r+0xbdc>)
 8009ee4:	f7ff ba99 	b.w	800941a <_dtoa_r+0xea>
 8009ee8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f47f aa6d 	bne.w	80093ca <_dtoa_r+0x9a>
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <_dtoa_r+0xbe0>)
 8009ef2:	f7ff ba92 	b.w	800941a <_dtoa_r+0xea>
 8009ef6:	9b01      	ldr	r3, [sp, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dcb5      	bgt.n	8009e68 <_dtoa_r+0xb38>
 8009efc:	9b07      	ldr	r3, [sp, #28]
 8009efe:	2b02      	cmp	r3, #2
 8009f00:	f73f aeb1 	bgt.w	8009c66 <_dtoa_r+0x936>
 8009f04:	e7b0      	b.n	8009e68 <_dtoa_r+0xb38>
 8009f06:	bf00      	nop
 8009f08:	0800be08 	.word	0x0800be08
 8009f0c:	0800bd60 	.word	0x0800bd60
 8009f10:	0800bd8c 	.word	0x0800bd8c

08009f14 <_free_r>:
 8009f14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d044      	beq.n	8009fa4 <_free_r+0x90>
 8009f1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1e:	9001      	str	r0, [sp, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	f1a1 0404 	sub.w	r4, r1, #4
 8009f26:	bfb8      	it	lt
 8009f28:	18e4      	addlt	r4, r4, r3
 8009f2a:	f000 fc51 	bl	800a7d0 <__malloc_lock>
 8009f2e:	4a1e      	ldr	r2, [pc, #120]	; (8009fa8 <_free_r+0x94>)
 8009f30:	9801      	ldr	r0, [sp, #4]
 8009f32:	6813      	ldr	r3, [r2, #0]
 8009f34:	b933      	cbnz	r3, 8009f44 <_free_r+0x30>
 8009f36:	6063      	str	r3, [r4, #4]
 8009f38:	6014      	str	r4, [r2, #0]
 8009f3a:	b003      	add	sp, #12
 8009f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f40:	f000 bc4c 	b.w	800a7dc <__malloc_unlock>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d908      	bls.n	8009f5a <_free_r+0x46>
 8009f48:	6825      	ldr	r5, [r4, #0]
 8009f4a:	1961      	adds	r1, r4, r5
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	bf01      	itttt	eq
 8009f50:	6819      	ldreq	r1, [r3, #0]
 8009f52:	685b      	ldreq	r3, [r3, #4]
 8009f54:	1949      	addeq	r1, r1, r5
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	e7ed      	b.n	8009f36 <_free_r+0x22>
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	b10b      	cbz	r3, 8009f64 <_free_r+0x50>
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	d9fa      	bls.n	8009f5a <_free_r+0x46>
 8009f64:	6811      	ldr	r1, [r2, #0]
 8009f66:	1855      	adds	r5, r2, r1
 8009f68:	42a5      	cmp	r5, r4
 8009f6a:	d10b      	bne.n	8009f84 <_free_r+0x70>
 8009f6c:	6824      	ldr	r4, [r4, #0]
 8009f6e:	4421      	add	r1, r4
 8009f70:	1854      	adds	r4, r2, r1
 8009f72:	42a3      	cmp	r3, r4
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	d1e0      	bne.n	8009f3a <_free_r+0x26>
 8009f78:	681c      	ldr	r4, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	6053      	str	r3, [r2, #4]
 8009f7e:	440c      	add	r4, r1
 8009f80:	6014      	str	r4, [r2, #0]
 8009f82:	e7da      	b.n	8009f3a <_free_r+0x26>
 8009f84:	d902      	bls.n	8009f8c <_free_r+0x78>
 8009f86:	230c      	movs	r3, #12
 8009f88:	6003      	str	r3, [r0, #0]
 8009f8a:	e7d6      	b.n	8009f3a <_free_r+0x26>
 8009f8c:	6825      	ldr	r5, [r4, #0]
 8009f8e:	1961      	adds	r1, r4, r5
 8009f90:	428b      	cmp	r3, r1
 8009f92:	bf04      	itt	eq
 8009f94:	6819      	ldreq	r1, [r3, #0]
 8009f96:	685b      	ldreq	r3, [r3, #4]
 8009f98:	6063      	str	r3, [r4, #4]
 8009f9a:	bf04      	itt	eq
 8009f9c:	1949      	addeq	r1, r1, r5
 8009f9e:	6021      	streq	r1, [r4, #0]
 8009fa0:	6054      	str	r4, [r2, #4]
 8009fa2:	e7ca      	b.n	8009f3a <_free_r+0x26>
 8009fa4:	b003      	add	sp, #12
 8009fa6:	bd30      	pop	{r4, r5, pc}
 8009fa8:	20000a98 	.word	0x20000a98

08009fac <rshift>:
 8009fac:	6903      	ldr	r3, [r0, #16]
 8009fae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009fb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009fb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009fba:	f100 0414 	add.w	r4, r0, #20
 8009fbe:	dd45      	ble.n	800a04c <rshift+0xa0>
 8009fc0:	f011 011f 	ands.w	r1, r1, #31
 8009fc4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009fc8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009fcc:	d10c      	bne.n	8009fe8 <rshift+0x3c>
 8009fce:	f100 0710 	add.w	r7, r0, #16
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	42b1      	cmp	r1, r6
 8009fd6:	d334      	bcc.n	800a042 <rshift+0x96>
 8009fd8:	1a9b      	subs	r3, r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	1eea      	subs	r2, r5, #3
 8009fde:	4296      	cmp	r6, r2
 8009fe0:	bf38      	it	cc
 8009fe2:	2300      	movcc	r3, #0
 8009fe4:	4423      	add	r3, r4
 8009fe6:	e015      	b.n	800a014 <rshift+0x68>
 8009fe8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009fec:	f1c1 0820 	rsb	r8, r1, #32
 8009ff0:	40cf      	lsrs	r7, r1
 8009ff2:	f105 0e04 	add.w	lr, r5, #4
 8009ff6:	46a1      	mov	r9, r4
 8009ff8:	4576      	cmp	r6, lr
 8009ffa:	46f4      	mov	ip, lr
 8009ffc:	d815      	bhi.n	800a02a <rshift+0x7e>
 8009ffe:	1a9a      	subs	r2, r3, r2
 800a000:	0092      	lsls	r2, r2, #2
 800a002:	3a04      	subs	r2, #4
 800a004:	3501      	adds	r5, #1
 800a006:	42ae      	cmp	r6, r5
 800a008:	bf38      	it	cc
 800a00a:	2200      	movcc	r2, #0
 800a00c:	18a3      	adds	r3, r4, r2
 800a00e:	50a7      	str	r7, [r4, r2]
 800a010:	b107      	cbz	r7, 800a014 <rshift+0x68>
 800a012:	3304      	adds	r3, #4
 800a014:	1b1a      	subs	r2, r3, r4
 800a016:	42a3      	cmp	r3, r4
 800a018:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a01c:	bf08      	it	eq
 800a01e:	2300      	moveq	r3, #0
 800a020:	6102      	str	r2, [r0, #16]
 800a022:	bf08      	it	eq
 800a024:	6143      	streq	r3, [r0, #20]
 800a026:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a02a:	f8dc c000 	ldr.w	ip, [ip]
 800a02e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a032:	ea4c 0707 	orr.w	r7, ip, r7
 800a036:	f849 7b04 	str.w	r7, [r9], #4
 800a03a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a03e:	40cf      	lsrs	r7, r1
 800a040:	e7da      	b.n	8009ff8 <rshift+0x4c>
 800a042:	f851 cb04 	ldr.w	ip, [r1], #4
 800a046:	f847 cf04 	str.w	ip, [r7, #4]!
 800a04a:	e7c3      	b.n	8009fd4 <rshift+0x28>
 800a04c:	4623      	mov	r3, r4
 800a04e:	e7e1      	b.n	800a014 <rshift+0x68>

0800a050 <__hexdig_fun>:
 800a050:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a054:	2b09      	cmp	r3, #9
 800a056:	d802      	bhi.n	800a05e <__hexdig_fun+0xe>
 800a058:	3820      	subs	r0, #32
 800a05a:	b2c0      	uxtb	r0, r0
 800a05c:	4770      	bx	lr
 800a05e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a062:	2b05      	cmp	r3, #5
 800a064:	d801      	bhi.n	800a06a <__hexdig_fun+0x1a>
 800a066:	3847      	subs	r0, #71	; 0x47
 800a068:	e7f7      	b.n	800a05a <__hexdig_fun+0xa>
 800a06a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a06e:	2b05      	cmp	r3, #5
 800a070:	d801      	bhi.n	800a076 <__hexdig_fun+0x26>
 800a072:	3827      	subs	r0, #39	; 0x27
 800a074:	e7f1      	b.n	800a05a <__hexdig_fun+0xa>
 800a076:	2000      	movs	r0, #0
 800a078:	4770      	bx	lr
	...

0800a07c <__gethex>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	4617      	mov	r7, r2
 800a082:	680a      	ldr	r2, [r1, #0]
 800a084:	b085      	sub	sp, #20
 800a086:	f102 0b02 	add.w	fp, r2, #2
 800a08a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a08e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a092:	4681      	mov	r9, r0
 800a094:	468a      	mov	sl, r1
 800a096:	9302      	str	r3, [sp, #8]
 800a098:	32fe      	adds	r2, #254	; 0xfe
 800a09a:	eb02 030b 	add.w	r3, r2, fp
 800a09e:	46d8      	mov	r8, fp
 800a0a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800a0a4:	9301      	str	r3, [sp, #4]
 800a0a6:	2830      	cmp	r0, #48	; 0x30
 800a0a8:	d0f7      	beq.n	800a09a <__gethex+0x1e>
 800a0aa:	f7ff ffd1 	bl	800a050 <__hexdig_fun>
 800a0ae:	4604      	mov	r4, r0
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d138      	bne.n	800a126 <__gethex+0xaa>
 800a0b4:	49a7      	ldr	r1, [pc, #668]	; (800a354 <__gethex+0x2d8>)
 800a0b6:	2201      	movs	r2, #1
 800a0b8:	4640      	mov	r0, r8
 800a0ba:	f7ff f810 	bl	80090de <strncmp>
 800a0be:	4606      	mov	r6, r0
 800a0c0:	2800      	cmp	r0, #0
 800a0c2:	d169      	bne.n	800a198 <__gethex+0x11c>
 800a0c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800a0c8:	465d      	mov	r5, fp
 800a0ca:	f7ff ffc1 	bl	800a050 <__hexdig_fun>
 800a0ce:	2800      	cmp	r0, #0
 800a0d0:	d064      	beq.n	800a19c <__gethex+0x120>
 800a0d2:	465a      	mov	r2, fp
 800a0d4:	7810      	ldrb	r0, [r2, #0]
 800a0d6:	2830      	cmp	r0, #48	; 0x30
 800a0d8:	4690      	mov	r8, r2
 800a0da:	f102 0201 	add.w	r2, r2, #1
 800a0de:	d0f9      	beq.n	800a0d4 <__gethex+0x58>
 800a0e0:	f7ff ffb6 	bl	800a050 <__hexdig_fun>
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	fab0 f480 	clz	r4, r0
 800a0ea:	0964      	lsrs	r4, r4, #5
 800a0ec:	465e      	mov	r6, fp
 800a0ee:	9301      	str	r3, [sp, #4]
 800a0f0:	4642      	mov	r2, r8
 800a0f2:	4615      	mov	r5, r2
 800a0f4:	3201      	adds	r2, #1
 800a0f6:	7828      	ldrb	r0, [r5, #0]
 800a0f8:	f7ff ffaa 	bl	800a050 <__hexdig_fun>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d1f8      	bne.n	800a0f2 <__gethex+0x76>
 800a100:	4994      	ldr	r1, [pc, #592]	; (800a354 <__gethex+0x2d8>)
 800a102:	2201      	movs	r2, #1
 800a104:	4628      	mov	r0, r5
 800a106:	f7fe ffea 	bl	80090de <strncmp>
 800a10a:	b978      	cbnz	r0, 800a12c <__gethex+0xb0>
 800a10c:	b946      	cbnz	r6, 800a120 <__gethex+0xa4>
 800a10e:	1c6e      	adds	r6, r5, #1
 800a110:	4632      	mov	r2, r6
 800a112:	4615      	mov	r5, r2
 800a114:	3201      	adds	r2, #1
 800a116:	7828      	ldrb	r0, [r5, #0]
 800a118:	f7ff ff9a 	bl	800a050 <__hexdig_fun>
 800a11c:	2800      	cmp	r0, #0
 800a11e:	d1f8      	bne.n	800a112 <__gethex+0x96>
 800a120:	1b73      	subs	r3, r6, r5
 800a122:	009e      	lsls	r6, r3, #2
 800a124:	e004      	b.n	800a130 <__gethex+0xb4>
 800a126:	2400      	movs	r4, #0
 800a128:	4626      	mov	r6, r4
 800a12a:	e7e1      	b.n	800a0f0 <__gethex+0x74>
 800a12c:	2e00      	cmp	r6, #0
 800a12e:	d1f7      	bne.n	800a120 <__gethex+0xa4>
 800a130:	782b      	ldrb	r3, [r5, #0]
 800a132:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a136:	2b50      	cmp	r3, #80	; 0x50
 800a138:	d13d      	bne.n	800a1b6 <__gethex+0x13a>
 800a13a:	786b      	ldrb	r3, [r5, #1]
 800a13c:	2b2b      	cmp	r3, #43	; 0x2b
 800a13e:	d02f      	beq.n	800a1a0 <__gethex+0x124>
 800a140:	2b2d      	cmp	r3, #45	; 0x2d
 800a142:	d031      	beq.n	800a1a8 <__gethex+0x12c>
 800a144:	1c69      	adds	r1, r5, #1
 800a146:	f04f 0b00 	mov.w	fp, #0
 800a14a:	7808      	ldrb	r0, [r1, #0]
 800a14c:	f7ff ff80 	bl	800a050 <__hexdig_fun>
 800a150:	1e42      	subs	r2, r0, #1
 800a152:	b2d2      	uxtb	r2, r2
 800a154:	2a18      	cmp	r2, #24
 800a156:	d82e      	bhi.n	800a1b6 <__gethex+0x13a>
 800a158:	f1a0 0210 	sub.w	r2, r0, #16
 800a15c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a160:	f7ff ff76 	bl	800a050 <__hexdig_fun>
 800a164:	f100 3cff 	add.w	ip, r0, #4294967295
 800a168:	fa5f fc8c 	uxtb.w	ip, ip
 800a16c:	f1bc 0f18 	cmp.w	ip, #24
 800a170:	d91d      	bls.n	800a1ae <__gethex+0x132>
 800a172:	f1bb 0f00 	cmp.w	fp, #0
 800a176:	d000      	beq.n	800a17a <__gethex+0xfe>
 800a178:	4252      	negs	r2, r2
 800a17a:	4416      	add	r6, r2
 800a17c:	f8ca 1000 	str.w	r1, [sl]
 800a180:	b1dc      	cbz	r4, 800a1ba <__gethex+0x13e>
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf14      	ite	ne
 800a188:	f04f 0800 	movne.w	r8, #0
 800a18c:	f04f 0806 	moveq.w	r8, #6
 800a190:	4640      	mov	r0, r8
 800a192:	b005      	add	sp, #20
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	4645      	mov	r5, r8
 800a19a:	4626      	mov	r6, r4
 800a19c:	2401      	movs	r4, #1
 800a19e:	e7c7      	b.n	800a130 <__gethex+0xb4>
 800a1a0:	f04f 0b00 	mov.w	fp, #0
 800a1a4:	1ca9      	adds	r1, r5, #2
 800a1a6:	e7d0      	b.n	800a14a <__gethex+0xce>
 800a1a8:	f04f 0b01 	mov.w	fp, #1
 800a1ac:	e7fa      	b.n	800a1a4 <__gethex+0x128>
 800a1ae:	230a      	movs	r3, #10
 800a1b0:	fb03 0002 	mla	r0, r3, r2, r0
 800a1b4:	e7d0      	b.n	800a158 <__gethex+0xdc>
 800a1b6:	4629      	mov	r1, r5
 800a1b8:	e7e0      	b.n	800a17c <__gethex+0x100>
 800a1ba:	eba5 0308 	sub.w	r3, r5, r8
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	2b07      	cmp	r3, #7
 800a1c4:	dc0a      	bgt.n	800a1dc <__gethex+0x160>
 800a1c6:	4648      	mov	r0, r9
 800a1c8:	f000 fb0e 	bl	800a7e8 <_Balloc>
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	b940      	cbnz	r0, 800a1e2 <__gethex+0x166>
 800a1d0:	4b61      	ldr	r3, [pc, #388]	; (800a358 <__gethex+0x2dc>)
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	21e4      	movs	r1, #228	; 0xe4
 800a1d6:	4861      	ldr	r0, [pc, #388]	; (800a35c <__gethex+0x2e0>)
 800a1d8:	f001 f9f0 	bl	800b5bc <__assert_func>
 800a1dc:	3101      	adds	r1, #1
 800a1de:	105b      	asrs	r3, r3, #1
 800a1e0:	e7ef      	b.n	800a1c2 <__gethex+0x146>
 800a1e2:	f100 0a14 	add.w	sl, r0, #20
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	495a      	ldr	r1, [pc, #360]	; (800a354 <__gethex+0x2d8>)
 800a1ea:	f8cd a004 	str.w	sl, [sp, #4]
 800a1ee:	469b      	mov	fp, r3
 800a1f0:	45a8      	cmp	r8, r5
 800a1f2:	d342      	bcc.n	800a27a <__gethex+0x1fe>
 800a1f4:	9801      	ldr	r0, [sp, #4]
 800a1f6:	f840 bb04 	str.w	fp, [r0], #4
 800a1fa:	eba0 000a 	sub.w	r0, r0, sl
 800a1fe:	1080      	asrs	r0, r0, #2
 800a200:	6120      	str	r0, [r4, #16]
 800a202:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800a206:	4658      	mov	r0, fp
 800a208:	f000 fbe0 	bl	800a9cc <__hi0bits>
 800a20c:	683d      	ldr	r5, [r7, #0]
 800a20e:	eba8 0000 	sub.w	r0, r8, r0
 800a212:	42a8      	cmp	r0, r5
 800a214:	dd59      	ble.n	800a2ca <__gethex+0x24e>
 800a216:	eba0 0805 	sub.w	r8, r0, r5
 800a21a:	4641      	mov	r1, r8
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 ff6f 	bl	800b100 <__any_on>
 800a222:	4683      	mov	fp, r0
 800a224:	b1b8      	cbz	r0, 800a256 <__gethex+0x1da>
 800a226:	f108 33ff 	add.w	r3, r8, #4294967295
 800a22a:	1159      	asrs	r1, r3, #5
 800a22c:	f003 021f 	and.w	r2, r3, #31
 800a230:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a234:	f04f 0b01 	mov.w	fp, #1
 800a238:	fa0b f202 	lsl.w	r2, fp, r2
 800a23c:	420a      	tst	r2, r1
 800a23e:	d00a      	beq.n	800a256 <__gethex+0x1da>
 800a240:	455b      	cmp	r3, fp
 800a242:	dd06      	ble.n	800a252 <__gethex+0x1d6>
 800a244:	f1a8 0102 	sub.w	r1, r8, #2
 800a248:	4620      	mov	r0, r4
 800a24a:	f000 ff59 	bl	800b100 <__any_on>
 800a24e:	2800      	cmp	r0, #0
 800a250:	d138      	bne.n	800a2c4 <__gethex+0x248>
 800a252:	f04f 0b02 	mov.w	fp, #2
 800a256:	4641      	mov	r1, r8
 800a258:	4620      	mov	r0, r4
 800a25a:	f7ff fea7 	bl	8009fac <rshift>
 800a25e:	4446      	add	r6, r8
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	42b3      	cmp	r3, r6
 800a264:	da41      	bge.n	800a2ea <__gethex+0x26e>
 800a266:	4621      	mov	r1, r4
 800a268:	4648      	mov	r0, r9
 800a26a:	f000 fafd 	bl	800a868 <_Bfree>
 800a26e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a270:	2300      	movs	r3, #0
 800a272:	6013      	str	r3, [r2, #0]
 800a274:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800a278:	e78a      	b.n	800a190 <__gethex+0x114>
 800a27a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800a27e:	2a2e      	cmp	r2, #46	; 0x2e
 800a280:	d014      	beq.n	800a2ac <__gethex+0x230>
 800a282:	2b20      	cmp	r3, #32
 800a284:	d106      	bne.n	800a294 <__gethex+0x218>
 800a286:	9b01      	ldr	r3, [sp, #4]
 800a288:	f843 bb04 	str.w	fp, [r3], #4
 800a28c:	f04f 0b00 	mov.w	fp, #0
 800a290:	9301      	str	r3, [sp, #4]
 800a292:	465b      	mov	r3, fp
 800a294:	7828      	ldrb	r0, [r5, #0]
 800a296:	9303      	str	r3, [sp, #12]
 800a298:	f7ff feda 	bl	800a050 <__hexdig_fun>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	f000 000f 	and.w	r0, r0, #15
 800a2a2:	4098      	lsls	r0, r3
 800a2a4:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2a8:	3304      	adds	r3, #4
 800a2aa:	e7a1      	b.n	800a1f0 <__gethex+0x174>
 800a2ac:	45a8      	cmp	r8, r5
 800a2ae:	d8e8      	bhi.n	800a282 <__gethex+0x206>
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	9303      	str	r3, [sp, #12]
 800a2b6:	f7fe ff12 	bl	80090de <strncmp>
 800a2ba:	4926      	ldr	r1, [pc, #152]	; (800a354 <__gethex+0x2d8>)
 800a2bc:	9b03      	ldr	r3, [sp, #12]
 800a2be:	2800      	cmp	r0, #0
 800a2c0:	d1df      	bne.n	800a282 <__gethex+0x206>
 800a2c2:	e795      	b.n	800a1f0 <__gethex+0x174>
 800a2c4:	f04f 0b03 	mov.w	fp, #3
 800a2c8:	e7c5      	b.n	800a256 <__gethex+0x1da>
 800a2ca:	da0b      	bge.n	800a2e4 <__gethex+0x268>
 800a2cc:	eba5 0800 	sub.w	r8, r5, r0
 800a2d0:	4621      	mov	r1, r4
 800a2d2:	4642      	mov	r2, r8
 800a2d4:	4648      	mov	r0, r9
 800a2d6:	f000 fce1 	bl	800ac9c <__lshift>
 800a2da:	eba6 0608 	sub.w	r6, r6, r8
 800a2de:	4604      	mov	r4, r0
 800a2e0:	f100 0a14 	add.w	sl, r0, #20
 800a2e4:	f04f 0b00 	mov.w	fp, #0
 800a2e8:	e7ba      	b.n	800a260 <__gethex+0x1e4>
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	42b3      	cmp	r3, r6
 800a2ee:	dd73      	ble.n	800a3d8 <__gethex+0x35c>
 800a2f0:	1b9e      	subs	r6, r3, r6
 800a2f2:	42b5      	cmp	r5, r6
 800a2f4:	dc34      	bgt.n	800a360 <__gethex+0x2e4>
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	d023      	beq.n	800a344 <__gethex+0x2c8>
 800a2fc:	2b03      	cmp	r3, #3
 800a2fe:	d025      	beq.n	800a34c <__gethex+0x2d0>
 800a300:	2b01      	cmp	r3, #1
 800a302:	d115      	bne.n	800a330 <__gethex+0x2b4>
 800a304:	42b5      	cmp	r5, r6
 800a306:	d113      	bne.n	800a330 <__gethex+0x2b4>
 800a308:	2d01      	cmp	r5, #1
 800a30a:	d10b      	bne.n	800a324 <__gethex+0x2a8>
 800a30c:	9a02      	ldr	r2, [sp, #8]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6013      	str	r3, [r2, #0]
 800a312:	2301      	movs	r3, #1
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	f8ca 3000 	str.w	r3, [sl]
 800a31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a31c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800a320:	601c      	str	r4, [r3, #0]
 800a322:	e735      	b.n	800a190 <__gethex+0x114>
 800a324:	1e69      	subs	r1, r5, #1
 800a326:	4620      	mov	r0, r4
 800a328:	f000 feea 	bl	800b100 <__any_on>
 800a32c:	2800      	cmp	r0, #0
 800a32e:	d1ed      	bne.n	800a30c <__gethex+0x290>
 800a330:	4621      	mov	r1, r4
 800a332:	4648      	mov	r0, r9
 800a334:	f000 fa98 	bl	800a868 <_Bfree>
 800a338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a33a:	2300      	movs	r3, #0
 800a33c:	6013      	str	r3, [r2, #0]
 800a33e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800a342:	e725      	b.n	800a190 <__gethex+0x114>
 800a344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a346:	2b00      	cmp	r3, #0
 800a348:	d1f2      	bne.n	800a330 <__gethex+0x2b4>
 800a34a:	e7df      	b.n	800a30c <__gethex+0x290>
 800a34c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d1dc      	bne.n	800a30c <__gethex+0x290>
 800a352:	e7ed      	b.n	800a330 <__gethex+0x2b4>
 800a354:	0800bcf8 	.word	0x0800bcf8
 800a358:	0800be08 	.word	0x0800be08
 800a35c:	0800be19 	.word	0x0800be19
 800a360:	f106 38ff 	add.w	r8, r6, #4294967295
 800a364:	f1bb 0f00 	cmp.w	fp, #0
 800a368:	d133      	bne.n	800a3d2 <__gethex+0x356>
 800a36a:	f1b8 0f00 	cmp.w	r8, #0
 800a36e:	d004      	beq.n	800a37a <__gethex+0x2fe>
 800a370:	4641      	mov	r1, r8
 800a372:	4620      	mov	r0, r4
 800a374:	f000 fec4 	bl	800b100 <__any_on>
 800a378:	4683      	mov	fp, r0
 800a37a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800a37e:	2301      	movs	r3, #1
 800a380:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a384:	f008 081f 	and.w	r8, r8, #31
 800a388:	fa03 f308 	lsl.w	r3, r3, r8
 800a38c:	4213      	tst	r3, r2
 800a38e:	4631      	mov	r1, r6
 800a390:	4620      	mov	r0, r4
 800a392:	bf18      	it	ne
 800a394:	f04b 0b02 	orrne.w	fp, fp, #2
 800a398:	1bad      	subs	r5, r5, r6
 800a39a:	f7ff fe07 	bl	8009fac <rshift>
 800a39e:	687e      	ldr	r6, [r7, #4]
 800a3a0:	f04f 0802 	mov.w	r8, #2
 800a3a4:	f1bb 0f00 	cmp.w	fp, #0
 800a3a8:	d04a      	beq.n	800a440 <__gethex+0x3c4>
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d016      	beq.n	800a3de <__gethex+0x362>
 800a3b0:	2b03      	cmp	r3, #3
 800a3b2:	d018      	beq.n	800a3e6 <__gethex+0x36a>
 800a3b4:	2b01      	cmp	r3, #1
 800a3b6:	d109      	bne.n	800a3cc <__gethex+0x350>
 800a3b8:	f01b 0f02 	tst.w	fp, #2
 800a3bc:	d006      	beq.n	800a3cc <__gethex+0x350>
 800a3be:	f8da 3000 	ldr.w	r3, [sl]
 800a3c2:	ea4b 0b03 	orr.w	fp, fp, r3
 800a3c6:	f01b 0f01 	tst.w	fp, #1
 800a3ca:	d10f      	bne.n	800a3ec <__gethex+0x370>
 800a3cc:	f048 0810 	orr.w	r8, r8, #16
 800a3d0:	e036      	b.n	800a440 <__gethex+0x3c4>
 800a3d2:	f04f 0b01 	mov.w	fp, #1
 800a3d6:	e7d0      	b.n	800a37a <__gethex+0x2fe>
 800a3d8:	f04f 0801 	mov.w	r8, #1
 800a3dc:	e7e2      	b.n	800a3a4 <__gethex+0x328>
 800a3de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3e0:	f1c3 0301 	rsb	r3, r3, #1
 800a3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d0ef      	beq.n	800a3cc <__gethex+0x350>
 800a3ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a3f0:	f104 0214 	add.w	r2, r4, #20
 800a3f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800a3f8:	9301      	str	r3, [sp, #4]
 800a3fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800a3fe:	2300      	movs	r3, #0
 800a400:	4694      	mov	ip, r2
 800a402:	f852 1b04 	ldr.w	r1, [r2], #4
 800a406:	f1b1 3fff 	cmp.w	r1, #4294967295
 800a40a:	d01e      	beq.n	800a44a <__gethex+0x3ce>
 800a40c:	3101      	adds	r1, #1
 800a40e:	f8cc 1000 	str.w	r1, [ip]
 800a412:	f1b8 0f02 	cmp.w	r8, #2
 800a416:	f104 0214 	add.w	r2, r4, #20
 800a41a:	d13d      	bne.n	800a498 <__gethex+0x41c>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	3b01      	subs	r3, #1
 800a420:	42ab      	cmp	r3, r5
 800a422:	d10b      	bne.n	800a43c <__gethex+0x3c0>
 800a424:	1169      	asrs	r1, r5, #5
 800a426:	2301      	movs	r3, #1
 800a428:	f005 051f 	and.w	r5, r5, #31
 800a42c:	fa03 f505 	lsl.w	r5, r3, r5
 800a430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a434:	421d      	tst	r5, r3
 800a436:	bf18      	it	ne
 800a438:	f04f 0801 	movne.w	r8, #1
 800a43c:	f048 0820 	orr.w	r8, r8, #32
 800a440:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a442:	601c      	str	r4, [r3, #0]
 800a444:	9b02      	ldr	r3, [sp, #8]
 800a446:	601e      	str	r6, [r3, #0]
 800a448:	e6a2      	b.n	800a190 <__gethex+0x114>
 800a44a:	4290      	cmp	r0, r2
 800a44c:	f842 3c04 	str.w	r3, [r2, #-4]
 800a450:	d8d6      	bhi.n	800a400 <__gethex+0x384>
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	4593      	cmp	fp, r2
 800a456:	db17      	blt.n	800a488 <__gethex+0x40c>
 800a458:	6861      	ldr	r1, [r4, #4]
 800a45a:	4648      	mov	r0, r9
 800a45c:	3101      	adds	r1, #1
 800a45e:	f000 f9c3 	bl	800a7e8 <_Balloc>
 800a462:	4682      	mov	sl, r0
 800a464:	b918      	cbnz	r0, 800a46e <__gethex+0x3f2>
 800a466:	4b1b      	ldr	r3, [pc, #108]	; (800a4d4 <__gethex+0x458>)
 800a468:	4602      	mov	r2, r0
 800a46a:	2184      	movs	r1, #132	; 0x84
 800a46c:	e6b3      	b.n	800a1d6 <__gethex+0x15a>
 800a46e:	6922      	ldr	r2, [r4, #16]
 800a470:	3202      	adds	r2, #2
 800a472:	f104 010c 	add.w	r1, r4, #12
 800a476:	0092      	lsls	r2, r2, #2
 800a478:	300c      	adds	r0, #12
 800a47a:	f7fe feba 	bl	80091f2 <memcpy>
 800a47e:	4621      	mov	r1, r4
 800a480:	4648      	mov	r0, r9
 800a482:	f000 f9f1 	bl	800a868 <_Bfree>
 800a486:	4654      	mov	r4, sl
 800a488:	6922      	ldr	r2, [r4, #16]
 800a48a:	1c51      	adds	r1, r2, #1
 800a48c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a490:	6121      	str	r1, [r4, #16]
 800a492:	2101      	movs	r1, #1
 800a494:	6151      	str	r1, [r2, #20]
 800a496:	e7bc      	b.n	800a412 <__gethex+0x396>
 800a498:	6921      	ldr	r1, [r4, #16]
 800a49a:	4559      	cmp	r1, fp
 800a49c:	dd0b      	ble.n	800a4b6 <__gethex+0x43a>
 800a49e:	2101      	movs	r1, #1
 800a4a0:	4620      	mov	r0, r4
 800a4a2:	f7ff fd83 	bl	8009fac <rshift>
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	3601      	adds	r6, #1
 800a4aa:	42b3      	cmp	r3, r6
 800a4ac:	f6ff aedb 	blt.w	800a266 <__gethex+0x1ea>
 800a4b0:	f04f 0801 	mov.w	r8, #1
 800a4b4:	e7c2      	b.n	800a43c <__gethex+0x3c0>
 800a4b6:	f015 051f 	ands.w	r5, r5, #31
 800a4ba:	d0f9      	beq.n	800a4b0 <__gethex+0x434>
 800a4bc:	9b01      	ldr	r3, [sp, #4]
 800a4be:	441a      	add	r2, r3
 800a4c0:	f1c5 0520 	rsb	r5, r5, #32
 800a4c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800a4c8:	f000 fa80 	bl	800a9cc <__hi0bits>
 800a4cc:	42a8      	cmp	r0, r5
 800a4ce:	dbe6      	blt.n	800a49e <__gethex+0x422>
 800a4d0:	e7ee      	b.n	800a4b0 <__gethex+0x434>
 800a4d2:	bf00      	nop
 800a4d4:	0800be08 	.word	0x0800be08

0800a4d8 <L_shift>:
 800a4d8:	f1c2 0208 	rsb	r2, r2, #8
 800a4dc:	0092      	lsls	r2, r2, #2
 800a4de:	b570      	push	{r4, r5, r6, lr}
 800a4e0:	f1c2 0620 	rsb	r6, r2, #32
 800a4e4:	6843      	ldr	r3, [r0, #4]
 800a4e6:	6804      	ldr	r4, [r0, #0]
 800a4e8:	fa03 f506 	lsl.w	r5, r3, r6
 800a4ec:	432c      	orrs	r4, r5
 800a4ee:	40d3      	lsrs	r3, r2
 800a4f0:	6004      	str	r4, [r0, #0]
 800a4f2:	f840 3f04 	str.w	r3, [r0, #4]!
 800a4f6:	4288      	cmp	r0, r1
 800a4f8:	d3f4      	bcc.n	800a4e4 <L_shift+0xc>
 800a4fa:	bd70      	pop	{r4, r5, r6, pc}

0800a4fc <__match>:
 800a4fc:	b530      	push	{r4, r5, lr}
 800a4fe:	6803      	ldr	r3, [r0, #0]
 800a500:	3301      	adds	r3, #1
 800a502:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a506:	b914      	cbnz	r4, 800a50e <__match+0x12>
 800a508:	6003      	str	r3, [r0, #0]
 800a50a:	2001      	movs	r0, #1
 800a50c:	bd30      	pop	{r4, r5, pc}
 800a50e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a512:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a516:	2d19      	cmp	r5, #25
 800a518:	bf98      	it	ls
 800a51a:	3220      	addls	r2, #32
 800a51c:	42a2      	cmp	r2, r4
 800a51e:	d0f0      	beq.n	800a502 <__match+0x6>
 800a520:	2000      	movs	r0, #0
 800a522:	e7f3      	b.n	800a50c <__match+0x10>

0800a524 <__hexnan>:
 800a524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a528:	680b      	ldr	r3, [r1, #0]
 800a52a:	6801      	ldr	r1, [r0, #0]
 800a52c:	115e      	asrs	r6, r3, #5
 800a52e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a532:	f013 031f 	ands.w	r3, r3, #31
 800a536:	b087      	sub	sp, #28
 800a538:	bf18      	it	ne
 800a53a:	3604      	addne	r6, #4
 800a53c:	2500      	movs	r5, #0
 800a53e:	1f37      	subs	r7, r6, #4
 800a540:	4682      	mov	sl, r0
 800a542:	4690      	mov	r8, r2
 800a544:	9301      	str	r3, [sp, #4]
 800a546:	f846 5c04 	str.w	r5, [r6, #-4]
 800a54a:	46b9      	mov	r9, r7
 800a54c:	463c      	mov	r4, r7
 800a54e:	9502      	str	r5, [sp, #8]
 800a550:	46ab      	mov	fp, r5
 800a552:	784a      	ldrb	r2, [r1, #1]
 800a554:	1c4b      	adds	r3, r1, #1
 800a556:	9303      	str	r3, [sp, #12]
 800a558:	b342      	cbz	r2, 800a5ac <__hexnan+0x88>
 800a55a:	4610      	mov	r0, r2
 800a55c:	9105      	str	r1, [sp, #20]
 800a55e:	9204      	str	r2, [sp, #16]
 800a560:	f7ff fd76 	bl	800a050 <__hexdig_fun>
 800a564:	2800      	cmp	r0, #0
 800a566:	d14f      	bne.n	800a608 <__hexnan+0xe4>
 800a568:	9a04      	ldr	r2, [sp, #16]
 800a56a:	9905      	ldr	r1, [sp, #20]
 800a56c:	2a20      	cmp	r2, #32
 800a56e:	d818      	bhi.n	800a5a2 <__hexnan+0x7e>
 800a570:	9b02      	ldr	r3, [sp, #8]
 800a572:	459b      	cmp	fp, r3
 800a574:	dd13      	ble.n	800a59e <__hexnan+0x7a>
 800a576:	454c      	cmp	r4, r9
 800a578:	d206      	bcs.n	800a588 <__hexnan+0x64>
 800a57a:	2d07      	cmp	r5, #7
 800a57c:	dc04      	bgt.n	800a588 <__hexnan+0x64>
 800a57e:	462a      	mov	r2, r5
 800a580:	4649      	mov	r1, r9
 800a582:	4620      	mov	r0, r4
 800a584:	f7ff ffa8 	bl	800a4d8 <L_shift>
 800a588:	4544      	cmp	r4, r8
 800a58a:	d950      	bls.n	800a62e <__hexnan+0x10a>
 800a58c:	2300      	movs	r3, #0
 800a58e:	f1a4 0904 	sub.w	r9, r4, #4
 800a592:	f844 3c04 	str.w	r3, [r4, #-4]
 800a596:	f8cd b008 	str.w	fp, [sp, #8]
 800a59a:	464c      	mov	r4, r9
 800a59c:	461d      	mov	r5, r3
 800a59e:	9903      	ldr	r1, [sp, #12]
 800a5a0:	e7d7      	b.n	800a552 <__hexnan+0x2e>
 800a5a2:	2a29      	cmp	r2, #41	; 0x29
 800a5a4:	d155      	bne.n	800a652 <__hexnan+0x12e>
 800a5a6:	3102      	adds	r1, #2
 800a5a8:	f8ca 1000 	str.w	r1, [sl]
 800a5ac:	f1bb 0f00 	cmp.w	fp, #0
 800a5b0:	d04f      	beq.n	800a652 <__hexnan+0x12e>
 800a5b2:	454c      	cmp	r4, r9
 800a5b4:	d206      	bcs.n	800a5c4 <__hexnan+0xa0>
 800a5b6:	2d07      	cmp	r5, #7
 800a5b8:	dc04      	bgt.n	800a5c4 <__hexnan+0xa0>
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	4649      	mov	r1, r9
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7ff ff8a 	bl	800a4d8 <L_shift>
 800a5c4:	4544      	cmp	r4, r8
 800a5c6:	d934      	bls.n	800a632 <__hexnan+0x10e>
 800a5c8:	f1a8 0204 	sub.w	r2, r8, #4
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	f853 1b04 	ldr.w	r1, [r3], #4
 800a5d2:	f842 1f04 	str.w	r1, [r2, #4]!
 800a5d6:	429f      	cmp	r7, r3
 800a5d8:	d2f9      	bcs.n	800a5ce <__hexnan+0xaa>
 800a5da:	1b3b      	subs	r3, r7, r4
 800a5dc:	f023 0303 	bic.w	r3, r3, #3
 800a5e0:	3304      	adds	r3, #4
 800a5e2:	3e03      	subs	r6, #3
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	42a6      	cmp	r6, r4
 800a5e8:	bf38      	it	cc
 800a5ea:	2304      	movcc	r3, #4
 800a5ec:	4443      	add	r3, r8
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	f843 2b04 	str.w	r2, [r3], #4
 800a5f4:	429f      	cmp	r7, r3
 800a5f6:	d2fb      	bcs.n	800a5f0 <__hexnan+0xcc>
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	b91b      	cbnz	r3, 800a604 <__hexnan+0xe0>
 800a5fc:	4547      	cmp	r7, r8
 800a5fe:	d126      	bne.n	800a64e <__hexnan+0x12a>
 800a600:	2301      	movs	r3, #1
 800a602:	603b      	str	r3, [r7, #0]
 800a604:	2005      	movs	r0, #5
 800a606:	e025      	b.n	800a654 <__hexnan+0x130>
 800a608:	3501      	adds	r5, #1
 800a60a:	2d08      	cmp	r5, #8
 800a60c:	f10b 0b01 	add.w	fp, fp, #1
 800a610:	dd06      	ble.n	800a620 <__hexnan+0xfc>
 800a612:	4544      	cmp	r4, r8
 800a614:	d9c3      	bls.n	800a59e <__hexnan+0x7a>
 800a616:	2300      	movs	r3, #0
 800a618:	f844 3c04 	str.w	r3, [r4, #-4]
 800a61c:	2501      	movs	r5, #1
 800a61e:	3c04      	subs	r4, #4
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	f000 000f 	and.w	r0, r0, #15
 800a626:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	e7b7      	b.n	800a59e <__hexnan+0x7a>
 800a62e:	2508      	movs	r5, #8
 800a630:	e7b5      	b.n	800a59e <__hexnan+0x7a>
 800a632:	9b01      	ldr	r3, [sp, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d0df      	beq.n	800a5f8 <__hexnan+0xd4>
 800a638:	f1c3 0320 	rsb	r3, r3, #32
 800a63c:	f04f 32ff 	mov.w	r2, #4294967295
 800a640:	40da      	lsrs	r2, r3
 800a642:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a646:	4013      	ands	r3, r2
 800a648:	f846 3c04 	str.w	r3, [r6, #-4]
 800a64c:	e7d4      	b.n	800a5f8 <__hexnan+0xd4>
 800a64e:	3f04      	subs	r7, #4
 800a650:	e7d2      	b.n	800a5f8 <__hexnan+0xd4>
 800a652:	2004      	movs	r0, #4
 800a654:	b007      	add	sp, #28
 800a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800a65c <malloc>:
 800a65c:	4b02      	ldr	r3, [pc, #8]	; (800a668 <malloc+0xc>)
 800a65e:	4601      	mov	r1, r0
 800a660:	6818      	ldr	r0, [r3, #0]
 800a662:	f000 b823 	b.w	800a6ac <_malloc_r>
 800a666:	bf00      	nop
 800a668:	200001d4 	.word	0x200001d4

0800a66c <sbrk_aligned>:
 800a66c:	b570      	push	{r4, r5, r6, lr}
 800a66e:	4e0e      	ldr	r6, [pc, #56]	; (800a6a8 <sbrk_aligned+0x3c>)
 800a670:	460c      	mov	r4, r1
 800a672:	6831      	ldr	r1, [r6, #0]
 800a674:	4605      	mov	r5, r0
 800a676:	b911      	cbnz	r1, 800a67e <sbrk_aligned+0x12>
 800a678:	f000 ff90 	bl	800b59c <_sbrk_r>
 800a67c:	6030      	str	r0, [r6, #0]
 800a67e:	4621      	mov	r1, r4
 800a680:	4628      	mov	r0, r5
 800a682:	f000 ff8b 	bl	800b59c <_sbrk_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d00a      	beq.n	800a6a0 <sbrk_aligned+0x34>
 800a68a:	1cc4      	adds	r4, r0, #3
 800a68c:	f024 0403 	bic.w	r4, r4, #3
 800a690:	42a0      	cmp	r0, r4
 800a692:	d007      	beq.n	800a6a4 <sbrk_aligned+0x38>
 800a694:	1a21      	subs	r1, r4, r0
 800a696:	4628      	mov	r0, r5
 800a698:	f000 ff80 	bl	800b59c <_sbrk_r>
 800a69c:	3001      	adds	r0, #1
 800a69e:	d101      	bne.n	800a6a4 <sbrk_aligned+0x38>
 800a6a0:	f04f 34ff 	mov.w	r4, #4294967295
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}
 800a6a8:	20000a9c 	.word	0x20000a9c

0800a6ac <_malloc_r>:
 800a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	1ccd      	adds	r5, r1, #3
 800a6b2:	f025 0503 	bic.w	r5, r5, #3
 800a6b6:	3508      	adds	r5, #8
 800a6b8:	2d0c      	cmp	r5, #12
 800a6ba:	bf38      	it	cc
 800a6bc:	250c      	movcc	r5, #12
 800a6be:	2d00      	cmp	r5, #0
 800a6c0:	4607      	mov	r7, r0
 800a6c2:	db01      	blt.n	800a6c8 <_malloc_r+0x1c>
 800a6c4:	42a9      	cmp	r1, r5
 800a6c6:	d905      	bls.n	800a6d4 <_malloc_r+0x28>
 800a6c8:	230c      	movs	r3, #12
 800a6ca:	603b      	str	r3, [r7, #0]
 800a6cc:	2600      	movs	r6, #0
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a7a8 <_malloc_r+0xfc>
 800a6d8:	f000 f87a 	bl	800a7d0 <__malloc_lock>
 800a6dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a6e0:	461c      	mov	r4, r3
 800a6e2:	bb5c      	cbnz	r4, 800a73c <_malloc_r+0x90>
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4638      	mov	r0, r7
 800a6e8:	f7ff ffc0 	bl	800a66c <sbrk_aligned>
 800a6ec:	1c43      	adds	r3, r0, #1
 800a6ee:	4604      	mov	r4, r0
 800a6f0:	d155      	bne.n	800a79e <_malloc_r+0xf2>
 800a6f2:	f8d8 4000 	ldr.w	r4, [r8]
 800a6f6:	4626      	mov	r6, r4
 800a6f8:	2e00      	cmp	r6, #0
 800a6fa:	d145      	bne.n	800a788 <_malloc_r+0xdc>
 800a6fc:	2c00      	cmp	r4, #0
 800a6fe:	d048      	beq.n	800a792 <_malloc_r+0xe6>
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	4631      	mov	r1, r6
 800a704:	4638      	mov	r0, r7
 800a706:	eb04 0903 	add.w	r9, r4, r3
 800a70a:	f000 ff47 	bl	800b59c <_sbrk_r>
 800a70e:	4581      	cmp	r9, r0
 800a710:	d13f      	bne.n	800a792 <_malloc_r+0xe6>
 800a712:	6821      	ldr	r1, [r4, #0]
 800a714:	1a6d      	subs	r5, r5, r1
 800a716:	4629      	mov	r1, r5
 800a718:	4638      	mov	r0, r7
 800a71a:	f7ff ffa7 	bl	800a66c <sbrk_aligned>
 800a71e:	3001      	adds	r0, #1
 800a720:	d037      	beq.n	800a792 <_malloc_r+0xe6>
 800a722:	6823      	ldr	r3, [r4, #0]
 800a724:	442b      	add	r3, r5
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	f8d8 3000 	ldr.w	r3, [r8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d038      	beq.n	800a7a2 <_malloc_r+0xf6>
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	42a2      	cmp	r2, r4
 800a734:	d12b      	bne.n	800a78e <_malloc_r+0xe2>
 800a736:	2200      	movs	r2, #0
 800a738:	605a      	str	r2, [r3, #4]
 800a73a:	e00f      	b.n	800a75c <_malloc_r+0xb0>
 800a73c:	6822      	ldr	r2, [r4, #0]
 800a73e:	1b52      	subs	r2, r2, r5
 800a740:	d41f      	bmi.n	800a782 <_malloc_r+0xd6>
 800a742:	2a0b      	cmp	r2, #11
 800a744:	d917      	bls.n	800a776 <_malloc_r+0xca>
 800a746:	1961      	adds	r1, r4, r5
 800a748:	42a3      	cmp	r3, r4
 800a74a:	6025      	str	r5, [r4, #0]
 800a74c:	bf18      	it	ne
 800a74e:	6059      	strne	r1, [r3, #4]
 800a750:	6863      	ldr	r3, [r4, #4]
 800a752:	bf08      	it	eq
 800a754:	f8c8 1000 	streq.w	r1, [r8]
 800a758:	5162      	str	r2, [r4, r5]
 800a75a:	604b      	str	r3, [r1, #4]
 800a75c:	4638      	mov	r0, r7
 800a75e:	f104 060b 	add.w	r6, r4, #11
 800a762:	f000 f83b 	bl	800a7dc <__malloc_unlock>
 800a766:	f026 0607 	bic.w	r6, r6, #7
 800a76a:	1d23      	adds	r3, r4, #4
 800a76c:	1af2      	subs	r2, r6, r3
 800a76e:	d0ae      	beq.n	800a6ce <_malloc_r+0x22>
 800a770:	1b9b      	subs	r3, r3, r6
 800a772:	50a3      	str	r3, [r4, r2]
 800a774:	e7ab      	b.n	800a6ce <_malloc_r+0x22>
 800a776:	42a3      	cmp	r3, r4
 800a778:	6862      	ldr	r2, [r4, #4]
 800a77a:	d1dd      	bne.n	800a738 <_malloc_r+0x8c>
 800a77c:	f8c8 2000 	str.w	r2, [r8]
 800a780:	e7ec      	b.n	800a75c <_malloc_r+0xb0>
 800a782:	4623      	mov	r3, r4
 800a784:	6864      	ldr	r4, [r4, #4]
 800a786:	e7ac      	b.n	800a6e2 <_malloc_r+0x36>
 800a788:	4634      	mov	r4, r6
 800a78a:	6876      	ldr	r6, [r6, #4]
 800a78c:	e7b4      	b.n	800a6f8 <_malloc_r+0x4c>
 800a78e:	4613      	mov	r3, r2
 800a790:	e7cc      	b.n	800a72c <_malloc_r+0x80>
 800a792:	230c      	movs	r3, #12
 800a794:	603b      	str	r3, [r7, #0]
 800a796:	4638      	mov	r0, r7
 800a798:	f000 f820 	bl	800a7dc <__malloc_unlock>
 800a79c:	e797      	b.n	800a6ce <_malloc_r+0x22>
 800a79e:	6025      	str	r5, [r4, #0]
 800a7a0:	e7dc      	b.n	800a75c <_malloc_r+0xb0>
 800a7a2:	605b      	str	r3, [r3, #4]
 800a7a4:	deff      	udf	#255	; 0xff
 800a7a6:	bf00      	nop
 800a7a8:	20000a98 	.word	0x20000a98

0800a7ac <__ascii_mbtowc>:
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	b901      	cbnz	r1, 800a7b2 <__ascii_mbtowc+0x6>
 800a7b0:	a901      	add	r1, sp, #4
 800a7b2:	b142      	cbz	r2, 800a7c6 <__ascii_mbtowc+0x1a>
 800a7b4:	b14b      	cbz	r3, 800a7ca <__ascii_mbtowc+0x1e>
 800a7b6:	7813      	ldrb	r3, [r2, #0]
 800a7b8:	600b      	str	r3, [r1, #0]
 800a7ba:	7812      	ldrb	r2, [r2, #0]
 800a7bc:	1e10      	subs	r0, r2, #0
 800a7be:	bf18      	it	ne
 800a7c0:	2001      	movne	r0, #1
 800a7c2:	b002      	add	sp, #8
 800a7c4:	4770      	bx	lr
 800a7c6:	4610      	mov	r0, r2
 800a7c8:	e7fb      	b.n	800a7c2 <__ascii_mbtowc+0x16>
 800a7ca:	f06f 0001 	mvn.w	r0, #1
 800a7ce:	e7f8      	b.n	800a7c2 <__ascii_mbtowc+0x16>

0800a7d0 <__malloc_lock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_lock+0x8>)
 800a7d2:	f7fe bd0c 	b.w	80091ee <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	20000a94 	.word	0x20000a94

0800a7dc <__malloc_unlock>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__malloc_unlock+0x8>)
 800a7de:	f7fe bd07 	b.w	80091f0 <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	20000a94 	.word	0x20000a94

0800a7e8 <_Balloc>:
 800a7e8:	b570      	push	{r4, r5, r6, lr}
 800a7ea:	69c6      	ldr	r6, [r0, #28]
 800a7ec:	4604      	mov	r4, r0
 800a7ee:	460d      	mov	r5, r1
 800a7f0:	b976      	cbnz	r6, 800a810 <_Balloc+0x28>
 800a7f2:	2010      	movs	r0, #16
 800a7f4:	f7ff ff32 	bl	800a65c <malloc>
 800a7f8:	4602      	mov	r2, r0
 800a7fa:	61e0      	str	r0, [r4, #28]
 800a7fc:	b920      	cbnz	r0, 800a808 <_Balloc+0x20>
 800a7fe:	4b18      	ldr	r3, [pc, #96]	; (800a860 <_Balloc+0x78>)
 800a800:	4818      	ldr	r0, [pc, #96]	; (800a864 <_Balloc+0x7c>)
 800a802:	216b      	movs	r1, #107	; 0x6b
 800a804:	f000 feda 	bl	800b5bc <__assert_func>
 800a808:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a80c:	6006      	str	r6, [r0, #0]
 800a80e:	60c6      	str	r6, [r0, #12]
 800a810:	69e6      	ldr	r6, [r4, #28]
 800a812:	68f3      	ldr	r3, [r6, #12]
 800a814:	b183      	cbz	r3, 800a838 <_Balloc+0x50>
 800a816:	69e3      	ldr	r3, [r4, #28]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a81e:	b9b8      	cbnz	r0, 800a850 <_Balloc+0x68>
 800a820:	2101      	movs	r1, #1
 800a822:	fa01 f605 	lsl.w	r6, r1, r5
 800a826:	1d72      	adds	r2, r6, #5
 800a828:	0092      	lsls	r2, r2, #2
 800a82a:	4620      	mov	r0, r4
 800a82c:	f000 fee4 	bl	800b5f8 <_calloc_r>
 800a830:	b160      	cbz	r0, 800a84c <_Balloc+0x64>
 800a832:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a836:	e00e      	b.n	800a856 <_Balloc+0x6e>
 800a838:	2221      	movs	r2, #33	; 0x21
 800a83a:	2104      	movs	r1, #4
 800a83c:	4620      	mov	r0, r4
 800a83e:	f000 fedb 	bl	800b5f8 <_calloc_r>
 800a842:	69e3      	ldr	r3, [r4, #28]
 800a844:	60f0      	str	r0, [r6, #12]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d1e4      	bne.n	800a816 <_Balloc+0x2e>
 800a84c:	2000      	movs	r0, #0
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	6802      	ldr	r2, [r0, #0]
 800a852:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a856:	2300      	movs	r3, #0
 800a858:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a85c:	e7f7      	b.n	800a84e <_Balloc+0x66>
 800a85e:	bf00      	nop
 800a860:	0800bd99 	.word	0x0800bd99
 800a864:	0800be79 	.word	0x0800be79

0800a868 <_Bfree>:
 800a868:	b570      	push	{r4, r5, r6, lr}
 800a86a:	69c6      	ldr	r6, [r0, #28]
 800a86c:	4605      	mov	r5, r0
 800a86e:	460c      	mov	r4, r1
 800a870:	b976      	cbnz	r6, 800a890 <_Bfree+0x28>
 800a872:	2010      	movs	r0, #16
 800a874:	f7ff fef2 	bl	800a65c <malloc>
 800a878:	4602      	mov	r2, r0
 800a87a:	61e8      	str	r0, [r5, #28]
 800a87c:	b920      	cbnz	r0, 800a888 <_Bfree+0x20>
 800a87e:	4b09      	ldr	r3, [pc, #36]	; (800a8a4 <_Bfree+0x3c>)
 800a880:	4809      	ldr	r0, [pc, #36]	; (800a8a8 <_Bfree+0x40>)
 800a882:	218f      	movs	r1, #143	; 0x8f
 800a884:	f000 fe9a 	bl	800b5bc <__assert_func>
 800a888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a88c:	6006      	str	r6, [r0, #0]
 800a88e:	60c6      	str	r6, [r0, #12]
 800a890:	b13c      	cbz	r4, 800a8a2 <_Bfree+0x3a>
 800a892:	69eb      	ldr	r3, [r5, #28]
 800a894:	6862      	ldr	r2, [r4, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a89c:	6021      	str	r1, [r4, #0]
 800a89e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8a2:	bd70      	pop	{r4, r5, r6, pc}
 800a8a4:	0800bd99 	.word	0x0800bd99
 800a8a8:	0800be79 	.word	0x0800be79

0800a8ac <__multadd>:
 800a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	690d      	ldr	r5, [r1, #16]
 800a8b2:	4607      	mov	r7, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	461e      	mov	r6, r3
 800a8b8:	f101 0c14 	add.w	ip, r1, #20
 800a8bc:	2000      	movs	r0, #0
 800a8be:	f8dc 3000 	ldr.w	r3, [ip]
 800a8c2:	b299      	uxth	r1, r3
 800a8c4:	fb02 6101 	mla	r1, r2, r1, r6
 800a8c8:	0c1e      	lsrs	r6, r3, #16
 800a8ca:	0c0b      	lsrs	r3, r1, #16
 800a8cc:	fb02 3306 	mla	r3, r2, r6, r3
 800a8d0:	b289      	uxth	r1, r1
 800a8d2:	3001      	adds	r0, #1
 800a8d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8d8:	4285      	cmp	r5, r0
 800a8da:	f84c 1b04 	str.w	r1, [ip], #4
 800a8de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8e2:	dcec      	bgt.n	800a8be <__multadd+0x12>
 800a8e4:	b30e      	cbz	r6, 800a92a <__multadd+0x7e>
 800a8e6:	68a3      	ldr	r3, [r4, #8]
 800a8e8:	42ab      	cmp	r3, r5
 800a8ea:	dc19      	bgt.n	800a920 <__multadd+0x74>
 800a8ec:	6861      	ldr	r1, [r4, #4]
 800a8ee:	4638      	mov	r0, r7
 800a8f0:	3101      	adds	r1, #1
 800a8f2:	f7ff ff79 	bl	800a7e8 <_Balloc>
 800a8f6:	4680      	mov	r8, r0
 800a8f8:	b928      	cbnz	r0, 800a906 <__multadd+0x5a>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	4b0c      	ldr	r3, [pc, #48]	; (800a930 <__multadd+0x84>)
 800a8fe:	480d      	ldr	r0, [pc, #52]	; (800a934 <__multadd+0x88>)
 800a900:	21ba      	movs	r1, #186	; 0xba
 800a902:	f000 fe5b 	bl	800b5bc <__assert_func>
 800a906:	6922      	ldr	r2, [r4, #16]
 800a908:	3202      	adds	r2, #2
 800a90a:	f104 010c 	add.w	r1, r4, #12
 800a90e:	0092      	lsls	r2, r2, #2
 800a910:	300c      	adds	r0, #12
 800a912:	f7fe fc6e 	bl	80091f2 <memcpy>
 800a916:	4621      	mov	r1, r4
 800a918:	4638      	mov	r0, r7
 800a91a:	f7ff ffa5 	bl	800a868 <_Bfree>
 800a91e:	4644      	mov	r4, r8
 800a920:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a924:	3501      	adds	r5, #1
 800a926:	615e      	str	r6, [r3, #20]
 800a928:	6125      	str	r5, [r4, #16]
 800a92a:	4620      	mov	r0, r4
 800a92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a930:	0800be08 	.word	0x0800be08
 800a934:	0800be79 	.word	0x0800be79

0800a938 <__s2b>:
 800a938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a93c:	460c      	mov	r4, r1
 800a93e:	4615      	mov	r5, r2
 800a940:	461f      	mov	r7, r3
 800a942:	2209      	movs	r2, #9
 800a944:	3308      	adds	r3, #8
 800a946:	4606      	mov	r6, r0
 800a948:	fb93 f3f2 	sdiv	r3, r3, r2
 800a94c:	2100      	movs	r1, #0
 800a94e:	2201      	movs	r2, #1
 800a950:	429a      	cmp	r2, r3
 800a952:	db09      	blt.n	800a968 <__s2b+0x30>
 800a954:	4630      	mov	r0, r6
 800a956:	f7ff ff47 	bl	800a7e8 <_Balloc>
 800a95a:	b940      	cbnz	r0, 800a96e <__s2b+0x36>
 800a95c:	4602      	mov	r2, r0
 800a95e:	4b19      	ldr	r3, [pc, #100]	; (800a9c4 <__s2b+0x8c>)
 800a960:	4819      	ldr	r0, [pc, #100]	; (800a9c8 <__s2b+0x90>)
 800a962:	21d3      	movs	r1, #211	; 0xd3
 800a964:	f000 fe2a 	bl	800b5bc <__assert_func>
 800a968:	0052      	lsls	r2, r2, #1
 800a96a:	3101      	adds	r1, #1
 800a96c:	e7f0      	b.n	800a950 <__s2b+0x18>
 800a96e:	9b08      	ldr	r3, [sp, #32]
 800a970:	6143      	str	r3, [r0, #20]
 800a972:	2d09      	cmp	r5, #9
 800a974:	f04f 0301 	mov.w	r3, #1
 800a978:	6103      	str	r3, [r0, #16]
 800a97a:	dd16      	ble.n	800a9aa <__s2b+0x72>
 800a97c:	f104 0909 	add.w	r9, r4, #9
 800a980:	46c8      	mov	r8, r9
 800a982:	442c      	add	r4, r5
 800a984:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a988:	4601      	mov	r1, r0
 800a98a:	3b30      	subs	r3, #48	; 0x30
 800a98c:	220a      	movs	r2, #10
 800a98e:	4630      	mov	r0, r6
 800a990:	f7ff ff8c 	bl	800a8ac <__multadd>
 800a994:	45a0      	cmp	r8, r4
 800a996:	d1f5      	bne.n	800a984 <__s2b+0x4c>
 800a998:	f1a5 0408 	sub.w	r4, r5, #8
 800a99c:	444c      	add	r4, r9
 800a99e:	1b2d      	subs	r5, r5, r4
 800a9a0:	1963      	adds	r3, r4, r5
 800a9a2:	42bb      	cmp	r3, r7
 800a9a4:	db04      	blt.n	800a9b0 <__s2b+0x78>
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	340a      	adds	r4, #10
 800a9ac:	2509      	movs	r5, #9
 800a9ae:	e7f6      	b.n	800a99e <__s2b+0x66>
 800a9b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9b4:	4601      	mov	r1, r0
 800a9b6:	3b30      	subs	r3, #48	; 0x30
 800a9b8:	220a      	movs	r2, #10
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7ff ff76 	bl	800a8ac <__multadd>
 800a9c0:	e7ee      	b.n	800a9a0 <__s2b+0x68>
 800a9c2:	bf00      	nop
 800a9c4:	0800be08 	.word	0x0800be08
 800a9c8:	0800be79 	.word	0x0800be79

0800a9cc <__hi0bits>:
 800a9cc:	0c03      	lsrs	r3, r0, #16
 800a9ce:	041b      	lsls	r3, r3, #16
 800a9d0:	b9d3      	cbnz	r3, 800aa08 <__hi0bits+0x3c>
 800a9d2:	0400      	lsls	r0, r0, #16
 800a9d4:	2310      	movs	r3, #16
 800a9d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a9da:	bf04      	itt	eq
 800a9dc:	0200      	lsleq	r0, r0, #8
 800a9de:	3308      	addeq	r3, #8
 800a9e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a9e4:	bf04      	itt	eq
 800a9e6:	0100      	lsleq	r0, r0, #4
 800a9e8:	3304      	addeq	r3, #4
 800a9ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a9ee:	bf04      	itt	eq
 800a9f0:	0080      	lsleq	r0, r0, #2
 800a9f2:	3302      	addeq	r3, #2
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	db05      	blt.n	800aa04 <__hi0bits+0x38>
 800a9f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a9fc:	f103 0301 	add.w	r3, r3, #1
 800aa00:	bf08      	it	eq
 800aa02:	2320      	moveq	r3, #32
 800aa04:	4618      	mov	r0, r3
 800aa06:	4770      	bx	lr
 800aa08:	2300      	movs	r3, #0
 800aa0a:	e7e4      	b.n	800a9d6 <__hi0bits+0xa>

0800aa0c <__lo0bits>:
 800aa0c:	6803      	ldr	r3, [r0, #0]
 800aa0e:	f013 0207 	ands.w	r2, r3, #7
 800aa12:	d00c      	beq.n	800aa2e <__lo0bits+0x22>
 800aa14:	07d9      	lsls	r1, r3, #31
 800aa16:	d422      	bmi.n	800aa5e <__lo0bits+0x52>
 800aa18:	079a      	lsls	r2, r3, #30
 800aa1a:	bf49      	itett	mi
 800aa1c:	085b      	lsrmi	r3, r3, #1
 800aa1e:	089b      	lsrpl	r3, r3, #2
 800aa20:	6003      	strmi	r3, [r0, #0]
 800aa22:	2201      	movmi	r2, #1
 800aa24:	bf5c      	itt	pl
 800aa26:	6003      	strpl	r3, [r0, #0]
 800aa28:	2202      	movpl	r2, #2
 800aa2a:	4610      	mov	r0, r2
 800aa2c:	4770      	bx	lr
 800aa2e:	b299      	uxth	r1, r3
 800aa30:	b909      	cbnz	r1, 800aa36 <__lo0bits+0x2a>
 800aa32:	0c1b      	lsrs	r3, r3, #16
 800aa34:	2210      	movs	r2, #16
 800aa36:	b2d9      	uxtb	r1, r3
 800aa38:	b909      	cbnz	r1, 800aa3e <__lo0bits+0x32>
 800aa3a:	3208      	adds	r2, #8
 800aa3c:	0a1b      	lsrs	r3, r3, #8
 800aa3e:	0719      	lsls	r1, r3, #28
 800aa40:	bf04      	itt	eq
 800aa42:	091b      	lsreq	r3, r3, #4
 800aa44:	3204      	addeq	r2, #4
 800aa46:	0799      	lsls	r1, r3, #30
 800aa48:	bf04      	itt	eq
 800aa4a:	089b      	lsreq	r3, r3, #2
 800aa4c:	3202      	addeq	r2, #2
 800aa4e:	07d9      	lsls	r1, r3, #31
 800aa50:	d403      	bmi.n	800aa5a <__lo0bits+0x4e>
 800aa52:	085b      	lsrs	r3, r3, #1
 800aa54:	f102 0201 	add.w	r2, r2, #1
 800aa58:	d003      	beq.n	800aa62 <__lo0bits+0x56>
 800aa5a:	6003      	str	r3, [r0, #0]
 800aa5c:	e7e5      	b.n	800aa2a <__lo0bits+0x1e>
 800aa5e:	2200      	movs	r2, #0
 800aa60:	e7e3      	b.n	800aa2a <__lo0bits+0x1e>
 800aa62:	2220      	movs	r2, #32
 800aa64:	e7e1      	b.n	800aa2a <__lo0bits+0x1e>
	...

0800aa68 <__i2b>:
 800aa68:	b510      	push	{r4, lr}
 800aa6a:	460c      	mov	r4, r1
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	f7ff febb 	bl	800a7e8 <_Balloc>
 800aa72:	4602      	mov	r2, r0
 800aa74:	b928      	cbnz	r0, 800aa82 <__i2b+0x1a>
 800aa76:	4b05      	ldr	r3, [pc, #20]	; (800aa8c <__i2b+0x24>)
 800aa78:	4805      	ldr	r0, [pc, #20]	; (800aa90 <__i2b+0x28>)
 800aa7a:	f240 1145 	movw	r1, #325	; 0x145
 800aa7e:	f000 fd9d 	bl	800b5bc <__assert_func>
 800aa82:	2301      	movs	r3, #1
 800aa84:	6144      	str	r4, [r0, #20]
 800aa86:	6103      	str	r3, [r0, #16]
 800aa88:	bd10      	pop	{r4, pc}
 800aa8a:	bf00      	nop
 800aa8c:	0800be08 	.word	0x0800be08
 800aa90:	0800be79 	.word	0x0800be79

0800aa94 <__multiply>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	4691      	mov	r9, r2
 800aa9a:	690a      	ldr	r2, [r1, #16]
 800aa9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	bfb8      	it	lt
 800aaa4:	460b      	movlt	r3, r1
 800aaa6:	460c      	mov	r4, r1
 800aaa8:	bfbc      	itt	lt
 800aaaa:	464c      	movlt	r4, r9
 800aaac:	4699      	movlt	r9, r3
 800aaae:	6927      	ldr	r7, [r4, #16]
 800aab0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aab4:	68a3      	ldr	r3, [r4, #8]
 800aab6:	6861      	ldr	r1, [r4, #4]
 800aab8:	eb07 060a 	add.w	r6, r7, sl
 800aabc:	42b3      	cmp	r3, r6
 800aabe:	b085      	sub	sp, #20
 800aac0:	bfb8      	it	lt
 800aac2:	3101      	addlt	r1, #1
 800aac4:	f7ff fe90 	bl	800a7e8 <_Balloc>
 800aac8:	b930      	cbnz	r0, 800aad8 <__multiply+0x44>
 800aaca:	4602      	mov	r2, r0
 800aacc:	4b44      	ldr	r3, [pc, #272]	; (800abe0 <__multiply+0x14c>)
 800aace:	4845      	ldr	r0, [pc, #276]	; (800abe4 <__multiply+0x150>)
 800aad0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800aad4:	f000 fd72 	bl	800b5bc <__assert_func>
 800aad8:	f100 0514 	add.w	r5, r0, #20
 800aadc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aae0:	462b      	mov	r3, r5
 800aae2:	2200      	movs	r2, #0
 800aae4:	4543      	cmp	r3, r8
 800aae6:	d321      	bcc.n	800ab2c <__multiply+0x98>
 800aae8:	f104 0314 	add.w	r3, r4, #20
 800aaec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aaf0:	f109 0314 	add.w	r3, r9, #20
 800aaf4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aaf8:	9202      	str	r2, [sp, #8]
 800aafa:	1b3a      	subs	r2, r7, r4
 800aafc:	3a15      	subs	r2, #21
 800aafe:	f022 0203 	bic.w	r2, r2, #3
 800ab02:	3204      	adds	r2, #4
 800ab04:	f104 0115 	add.w	r1, r4, #21
 800ab08:	428f      	cmp	r7, r1
 800ab0a:	bf38      	it	cc
 800ab0c:	2204      	movcc	r2, #4
 800ab0e:	9201      	str	r2, [sp, #4]
 800ab10:	9a02      	ldr	r2, [sp, #8]
 800ab12:	9303      	str	r3, [sp, #12]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d80c      	bhi.n	800ab32 <__multiply+0x9e>
 800ab18:	2e00      	cmp	r6, #0
 800ab1a:	dd03      	ble.n	800ab24 <__multiply+0x90>
 800ab1c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d05b      	beq.n	800abdc <__multiply+0x148>
 800ab24:	6106      	str	r6, [r0, #16]
 800ab26:	b005      	add	sp, #20
 800ab28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	f843 2b04 	str.w	r2, [r3], #4
 800ab30:	e7d8      	b.n	800aae4 <__multiply+0x50>
 800ab32:	f8b3 a000 	ldrh.w	sl, [r3]
 800ab36:	f1ba 0f00 	cmp.w	sl, #0
 800ab3a:	d024      	beq.n	800ab86 <__multiply+0xf2>
 800ab3c:	f104 0e14 	add.w	lr, r4, #20
 800ab40:	46a9      	mov	r9, r5
 800ab42:	f04f 0c00 	mov.w	ip, #0
 800ab46:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ab4a:	f8d9 1000 	ldr.w	r1, [r9]
 800ab4e:	fa1f fb82 	uxth.w	fp, r2
 800ab52:	b289      	uxth	r1, r1
 800ab54:	fb0a 110b 	mla	r1, sl, fp, r1
 800ab58:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab5c:	f8d9 2000 	ldr.w	r2, [r9]
 800ab60:	4461      	add	r1, ip
 800ab62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab66:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab6e:	b289      	uxth	r1, r1
 800ab70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab74:	4577      	cmp	r7, lr
 800ab76:	f849 1b04 	str.w	r1, [r9], #4
 800ab7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab7e:	d8e2      	bhi.n	800ab46 <__multiply+0xb2>
 800ab80:	9a01      	ldr	r2, [sp, #4]
 800ab82:	f845 c002 	str.w	ip, [r5, r2]
 800ab86:	9a03      	ldr	r2, [sp, #12]
 800ab88:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	f1b9 0f00 	cmp.w	r9, #0
 800ab92:	d021      	beq.n	800abd8 <__multiply+0x144>
 800ab94:	6829      	ldr	r1, [r5, #0]
 800ab96:	f104 0c14 	add.w	ip, r4, #20
 800ab9a:	46ae      	mov	lr, r5
 800ab9c:	f04f 0a00 	mov.w	sl, #0
 800aba0:	f8bc b000 	ldrh.w	fp, [ip]
 800aba4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aba8:	fb09 220b 	mla	r2, r9, fp, r2
 800abac:	4452      	add	r2, sl
 800abae:	b289      	uxth	r1, r1
 800abb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800abb4:	f84e 1b04 	str.w	r1, [lr], #4
 800abb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800abbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abc0:	f8be 1000 	ldrh.w	r1, [lr]
 800abc4:	fb09 110a 	mla	r1, r9, sl, r1
 800abc8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800abcc:	4567      	cmp	r7, ip
 800abce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800abd2:	d8e5      	bhi.n	800aba0 <__multiply+0x10c>
 800abd4:	9a01      	ldr	r2, [sp, #4]
 800abd6:	50a9      	str	r1, [r5, r2]
 800abd8:	3504      	adds	r5, #4
 800abda:	e799      	b.n	800ab10 <__multiply+0x7c>
 800abdc:	3e01      	subs	r6, #1
 800abde:	e79b      	b.n	800ab18 <__multiply+0x84>
 800abe0:	0800be08 	.word	0x0800be08
 800abe4:	0800be79 	.word	0x0800be79

0800abe8 <__pow5mult>:
 800abe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abec:	4615      	mov	r5, r2
 800abee:	f012 0203 	ands.w	r2, r2, #3
 800abf2:	4606      	mov	r6, r0
 800abf4:	460f      	mov	r7, r1
 800abf6:	d007      	beq.n	800ac08 <__pow5mult+0x20>
 800abf8:	4c25      	ldr	r4, [pc, #148]	; (800ac90 <__pow5mult+0xa8>)
 800abfa:	3a01      	subs	r2, #1
 800abfc:	2300      	movs	r3, #0
 800abfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac02:	f7ff fe53 	bl	800a8ac <__multadd>
 800ac06:	4607      	mov	r7, r0
 800ac08:	10ad      	asrs	r5, r5, #2
 800ac0a:	d03d      	beq.n	800ac88 <__pow5mult+0xa0>
 800ac0c:	69f4      	ldr	r4, [r6, #28]
 800ac0e:	b97c      	cbnz	r4, 800ac30 <__pow5mult+0x48>
 800ac10:	2010      	movs	r0, #16
 800ac12:	f7ff fd23 	bl	800a65c <malloc>
 800ac16:	4602      	mov	r2, r0
 800ac18:	61f0      	str	r0, [r6, #28]
 800ac1a:	b928      	cbnz	r0, 800ac28 <__pow5mult+0x40>
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <__pow5mult+0xac>)
 800ac1e:	481e      	ldr	r0, [pc, #120]	; (800ac98 <__pow5mult+0xb0>)
 800ac20:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ac24:	f000 fcca 	bl	800b5bc <__assert_func>
 800ac28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac2c:	6004      	str	r4, [r0, #0]
 800ac2e:	60c4      	str	r4, [r0, #12]
 800ac30:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ac34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac38:	b94c      	cbnz	r4, 800ac4e <__pow5mult+0x66>
 800ac3a:	f240 2171 	movw	r1, #625	; 0x271
 800ac3e:	4630      	mov	r0, r6
 800ac40:	f7ff ff12 	bl	800aa68 <__i2b>
 800ac44:	2300      	movs	r3, #0
 800ac46:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac4a:	4604      	mov	r4, r0
 800ac4c:	6003      	str	r3, [r0, #0]
 800ac4e:	f04f 0900 	mov.w	r9, #0
 800ac52:	07eb      	lsls	r3, r5, #31
 800ac54:	d50a      	bpl.n	800ac6c <__pow5mult+0x84>
 800ac56:	4639      	mov	r1, r7
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f7ff ff1a 	bl	800aa94 <__multiply>
 800ac60:	4639      	mov	r1, r7
 800ac62:	4680      	mov	r8, r0
 800ac64:	4630      	mov	r0, r6
 800ac66:	f7ff fdff 	bl	800a868 <_Bfree>
 800ac6a:	4647      	mov	r7, r8
 800ac6c:	106d      	asrs	r5, r5, #1
 800ac6e:	d00b      	beq.n	800ac88 <__pow5mult+0xa0>
 800ac70:	6820      	ldr	r0, [r4, #0]
 800ac72:	b938      	cbnz	r0, 800ac84 <__pow5mult+0x9c>
 800ac74:	4622      	mov	r2, r4
 800ac76:	4621      	mov	r1, r4
 800ac78:	4630      	mov	r0, r6
 800ac7a:	f7ff ff0b 	bl	800aa94 <__multiply>
 800ac7e:	6020      	str	r0, [r4, #0]
 800ac80:	f8c0 9000 	str.w	r9, [r0]
 800ac84:	4604      	mov	r4, r0
 800ac86:	e7e4      	b.n	800ac52 <__pow5mult+0x6a>
 800ac88:	4638      	mov	r0, r7
 800ac8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8e:	bf00      	nop
 800ac90:	0800bfc8 	.word	0x0800bfc8
 800ac94:	0800bd99 	.word	0x0800bd99
 800ac98:	0800be79 	.word	0x0800be79

0800ac9c <__lshift>:
 800ac9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca0:	460c      	mov	r4, r1
 800aca2:	6849      	ldr	r1, [r1, #4]
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acaa:	68a3      	ldr	r3, [r4, #8]
 800acac:	4607      	mov	r7, r0
 800acae:	4691      	mov	r9, r2
 800acb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acb4:	f108 0601 	add.w	r6, r8, #1
 800acb8:	42b3      	cmp	r3, r6
 800acba:	db0b      	blt.n	800acd4 <__lshift+0x38>
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff fd93 	bl	800a7e8 <_Balloc>
 800acc2:	4605      	mov	r5, r0
 800acc4:	b948      	cbnz	r0, 800acda <__lshift+0x3e>
 800acc6:	4602      	mov	r2, r0
 800acc8:	4b28      	ldr	r3, [pc, #160]	; (800ad6c <__lshift+0xd0>)
 800acca:	4829      	ldr	r0, [pc, #164]	; (800ad70 <__lshift+0xd4>)
 800accc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800acd0:	f000 fc74 	bl	800b5bc <__assert_func>
 800acd4:	3101      	adds	r1, #1
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	e7ee      	b.n	800acb8 <__lshift+0x1c>
 800acda:	2300      	movs	r3, #0
 800acdc:	f100 0114 	add.w	r1, r0, #20
 800ace0:	f100 0210 	add.w	r2, r0, #16
 800ace4:	4618      	mov	r0, r3
 800ace6:	4553      	cmp	r3, sl
 800ace8:	db33      	blt.n	800ad52 <__lshift+0xb6>
 800acea:	6920      	ldr	r0, [r4, #16]
 800acec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800acf0:	f104 0314 	add.w	r3, r4, #20
 800acf4:	f019 091f 	ands.w	r9, r9, #31
 800acf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800acfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad00:	d02b      	beq.n	800ad5a <__lshift+0xbe>
 800ad02:	f1c9 0e20 	rsb	lr, r9, #32
 800ad06:	468a      	mov	sl, r1
 800ad08:	2200      	movs	r2, #0
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	fa00 f009 	lsl.w	r0, r0, r9
 800ad10:	4310      	orrs	r0, r2
 800ad12:	f84a 0b04 	str.w	r0, [sl], #4
 800ad16:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad1a:	459c      	cmp	ip, r3
 800ad1c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad20:	d8f3      	bhi.n	800ad0a <__lshift+0x6e>
 800ad22:	ebac 0304 	sub.w	r3, ip, r4
 800ad26:	3b15      	subs	r3, #21
 800ad28:	f023 0303 	bic.w	r3, r3, #3
 800ad2c:	3304      	adds	r3, #4
 800ad2e:	f104 0015 	add.w	r0, r4, #21
 800ad32:	4584      	cmp	ip, r0
 800ad34:	bf38      	it	cc
 800ad36:	2304      	movcc	r3, #4
 800ad38:	50ca      	str	r2, [r1, r3]
 800ad3a:	b10a      	cbz	r2, 800ad40 <__lshift+0xa4>
 800ad3c:	f108 0602 	add.w	r6, r8, #2
 800ad40:	3e01      	subs	r6, #1
 800ad42:	4638      	mov	r0, r7
 800ad44:	612e      	str	r6, [r5, #16]
 800ad46:	4621      	mov	r1, r4
 800ad48:	f7ff fd8e 	bl	800a868 <_Bfree>
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad52:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad56:	3301      	adds	r3, #1
 800ad58:	e7c5      	b.n	800ace6 <__lshift+0x4a>
 800ad5a:	3904      	subs	r1, #4
 800ad5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad60:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad64:	459c      	cmp	ip, r3
 800ad66:	d8f9      	bhi.n	800ad5c <__lshift+0xc0>
 800ad68:	e7ea      	b.n	800ad40 <__lshift+0xa4>
 800ad6a:	bf00      	nop
 800ad6c:	0800be08 	.word	0x0800be08
 800ad70:	0800be79 	.word	0x0800be79

0800ad74 <__mcmp>:
 800ad74:	b530      	push	{r4, r5, lr}
 800ad76:	6902      	ldr	r2, [r0, #16]
 800ad78:	690c      	ldr	r4, [r1, #16]
 800ad7a:	1b12      	subs	r2, r2, r4
 800ad7c:	d10e      	bne.n	800ad9c <__mcmp+0x28>
 800ad7e:	f100 0314 	add.w	r3, r0, #20
 800ad82:	3114      	adds	r1, #20
 800ad84:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad88:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad8c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad90:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad94:	42a5      	cmp	r5, r4
 800ad96:	d003      	beq.n	800ada0 <__mcmp+0x2c>
 800ad98:	d305      	bcc.n	800ada6 <__mcmp+0x32>
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	bd30      	pop	{r4, r5, pc}
 800ada0:	4283      	cmp	r3, r0
 800ada2:	d3f3      	bcc.n	800ad8c <__mcmp+0x18>
 800ada4:	e7fa      	b.n	800ad9c <__mcmp+0x28>
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295
 800adaa:	e7f7      	b.n	800ad9c <__mcmp+0x28>

0800adac <__mdiff>:
 800adac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adb0:	460c      	mov	r4, r1
 800adb2:	4606      	mov	r6, r0
 800adb4:	4611      	mov	r1, r2
 800adb6:	4620      	mov	r0, r4
 800adb8:	4690      	mov	r8, r2
 800adba:	f7ff ffdb 	bl	800ad74 <__mcmp>
 800adbe:	1e05      	subs	r5, r0, #0
 800adc0:	d110      	bne.n	800ade4 <__mdiff+0x38>
 800adc2:	4629      	mov	r1, r5
 800adc4:	4630      	mov	r0, r6
 800adc6:	f7ff fd0f 	bl	800a7e8 <_Balloc>
 800adca:	b930      	cbnz	r0, 800adda <__mdiff+0x2e>
 800adcc:	4b3a      	ldr	r3, [pc, #232]	; (800aeb8 <__mdiff+0x10c>)
 800adce:	4602      	mov	r2, r0
 800add0:	f240 2137 	movw	r1, #567	; 0x237
 800add4:	4839      	ldr	r0, [pc, #228]	; (800aebc <__mdiff+0x110>)
 800add6:	f000 fbf1 	bl	800b5bc <__assert_func>
 800adda:	2301      	movs	r3, #1
 800addc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ade0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ade4:	bfa4      	itt	ge
 800ade6:	4643      	movge	r3, r8
 800ade8:	46a0      	movge	r8, r4
 800adea:	4630      	mov	r0, r6
 800adec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800adf0:	bfa6      	itte	ge
 800adf2:	461c      	movge	r4, r3
 800adf4:	2500      	movge	r5, #0
 800adf6:	2501      	movlt	r5, #1
 800adf8:	f7ff fcf6 	bl	800a7e8 <_Balloc>
 800adfc:	b920      	cbnz	r0, 800ae08 <__mdiff+0x5c>
 800adfe:	4b2e      	ldr	r3, [pc, #184]	; (800aeb8 <__mdiff+0x10c>)
 800ae00:	4602      	mov	r2, r0
 800ae02:	f240 2145 	movw	r1, #581	; 0x245
 800ae06:	e7e5      	b.n	800add4 <__mdiff+0x28>
 800ae08:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ae0c:	6926      	ldr	r6, [r4, #16]
 800ae0e:	60c5      	str	r5, [r0, #12]
 800ae10:	f104 0914 	add.w	r9, r4, #20
 800ae14:	f108 0514 	add.w	r5, r8, #20
 800ae18:	f100 0e14 	add.w	lr, r0, #20
 800ae1c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ae20:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ae24:	f108 0210 	add.w	r2, r8, #16
 800ae28:	46f2      	mov	sl, lr
 800ae2a:	2100      	movs	r1, #0
 800ae2c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ae30:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ae34:	fa11 f88b 	uxtah	r8, r1, fp
 800ae38:	b299      	uxth	r1, r3
 800ae3a:	0c1b      	lsrs	r3, r3, #16
 800ae3c:	eba8 0801 	sub.w	r8, r8, r1
 800ae40:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ae44:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ae48:	fa1f f888 	uxth.w	r8, r8
 800ae4c:	1419      	asrs	r1, r3, #16
 800ae4e:	454e      	cmp	r6, r9
 800ae50:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae54:	f84a 3b04 	str.w	r3, [sl], #4
 800ae58:	d8e8      	bhi.n	800ae2c <__mdiff+0x80>
 800ae5a:	1b33      	subs	r3, r6, r4
 800ae5c:	3b15      	subs	r3, #21
 800ae5e:	f023 0303 	bic.w	r3, r3, #3
 800ae62:	3304      	adds	r3, #4
 800ae64:	3415      	adds	r4, #21
 800ae66:	42a6      	cmp	r6, r4
 800ae68:	bf38      	it	cc
 800ae6a:	2304      	movcc	r3, #4
 800ae6c:	441d      	add	r5, r3
 800ae6e:	4473      	add	r3, lr
 800ae70:	469e      	mov	lr, r3
 800ae72:	462e      	mov	r6, r5
 800ae74:	4566      	cmp	r6, ip
 800ae76:	d30e      	bcc.n	800ae96 <__mdiff+0xea>
 800ae78:	f10c 0203 	add.w	r2, ip, #3
 800ae7c:	1b52      	subs	r2, r2, r5
 800ae7e:	f022 0203 	bic.w	r2, r2, #3
 800ae82:	3d03      	subs	r5, #3
 800ae84:	45ac      	cmp	ip, r5
 800ae86:	bf38      	it	cc
 800ae88:	2200      	movcc	r2, #0
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ae90:	b17a      	cbz	r2, 800aeb2 <__mdiff+0x106>
 800ae92:	6107      	str	r7, [r0, #16]
 800ae94:	e7a4      	b.n	800ade0 <__mdiff+0x34>
 800ae96:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae9a:	fa11 f288 	uxtah	r2, r1, r8
 800ae9e:	1414      	asrs	r4, r2, #16
 800aea0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800aea4:	b292      	uxth	r2, r2
 800aea6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800aeaa:	f84e 2b04 	str.w	r2, [lr], #4
 800aeae:	1421      	asrs	r1, r4, #16
 800aeb0:	e7e0      	b.n	800ae74 <__mdiff+0xc8>
 800aeb2:	3f01      	subs	r7, #1
 800aeb4:	e7ea      	b.n	800ae8c <__mdiff+0xe0>
 800aeb6:	bf00      	nop
 800aeb8:	0800be08 	.word	0x0800be08
 800aebc:	0800be79 	.word	0x0800be79

0800aec0 <__ulp>:
 800aec0:	b082      	sub	sp, #8
 800aec2:	ed8d 0b00 	vstr	d0, [sp]
 800aec6:	9a01      	ldr	r2, [sp, #4]
 800aec8:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <__ulp+0x48>)
 800aeca:	4013      	ands	r3, r2
 800aecc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	dc08      	bgt.n	800aee6 <__ulp+0x26>
 800aed4:	425b      	negs	r3, r3
 800aed6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800aeda:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aede:	da04      	bge.n	800aeea <__ulp+0x2a>
 800aee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aee4:	4113      	asrs	r3, r2
 800aee6:	2200      	movs	r2, #0
 800aee8:	e008      	b.n	800aefc <__ulp+0x3c>
 800aeea:	f1a2 0314 	sub.w	r3, r2, #20
 800aeee:	2b1e      	cmp	r3, #30
 800aef0:	bfda      	itte	le
 800aef2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800aef6:	40da      	lsrle	r2, r3
 800aef8:	2201      	movgt	r2, #1
 800aefa:	2300      	movs	r3, #0
 800aefc:	4619      	mov	r1, r3
 800aefe:	4610      	mov	r0, r2
 800af00:	ec41 0b10 	vmov	d0, r0, r1
 800af04:	b002      	add	sp, #8
 800af06:	4770      	bx	lr
 800af08:	7ff00000 	.word	0x7ff00000

0800af0c <__b2d>:
 800af0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af10:	6906      	ldr	r6, [r0, #16]
 800af12:	f100 0814 	add.w	r8, r0, #20
 800af16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af1a:	1f37      	subs	r7, r6, #4
 800af1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af20:	4610      	mov	r0, r2
 800af22:	f7ff fd53 	bl	800a9cc <__hi0bits>
 800af26:	f1c0 0320 	rsb	r3, r0, #32
 800af2a:	280a      	cmp	r0, #10
 800af2c:	600b      	str	r3, [r1, #0]
 800af2e:	491b      	ldr	r1, [pc, #108]	; (800af9c <__b2d+0x90>)
 800af30:	dc15      	bgt.n	800af5e <__b2d+0x52>
 800af32:	f1c0 0c0b 	rsb	ip, r0, #11
 800af36:	fa22 f30c 	lsr.w	r3, r2, ip
 800af3a:	45b8      	cmp	r8, r7
 800af3c:	ea43 0501 	orr.w	r5, r3, r1
 800af40:	bf34      	ite	cc
 800af42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af46:	2300      	movcs	r3, #0
 800af48:	3015      	adds	r0, #21
 800af4a:	fa02 f000 	lsl.w	r0, r2, r0
 800af4e:	fa23 f30c 	lsr.w	r3, r3, ip
 800af52:	4303      	orrs	r3, r0
 800af54:	461c      	mov	r4, r3
 800af56:	ec45 4b10 	vmov	d0, r4, r5
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	45b8      	cmp	r8, r7
 800af60:	bf3a      	itte	cc
 800af62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af66:	f1a6 0708 	subcc.w	r7, r6, #8
 800af6a:	2300      	movcs	r3, #0
 800af6c:	380b      	subs	r0, #11
 800af6e:	d012      	beq.n	800af96 <__b2d+0x8a>
 800af70:	f1c0 0120 	rsb	r1, r0, #32
 800af74:	fa23 f401 	lsr.w	r4, r3, r1
 800af78:	4082      	lsls	r2, r0
 800af7a:	4322      	orrs	r2, r4
 800af7c:	4547      	cmp	r7, r8
 800af7e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800af82:	bf8c      	ite	hi
 800af84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800af88:	2200      	movls	r2, #0
 800af8a:	4083      	lsls	r3, r0
 800af8c:	40ca      	lsrs	r2, r1
 800af8e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800af92:	4313      	orrs	r3, r2
 800af94:	e7de      	b.n	800af54 <__b2d+0x48>
 800af96:	ea42 0501 	orr.w	r5, r2, r1
 800af9a:	e7db      	b.n	800af54 <__b2d+0x48>
 800af9c:	3ff00000 	.word	0x3ff00000

0800afa0 <__d2b>:
 800afa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afa4:	460f      	mov	r7, r1
 800afa6:	2101      	movs	r1, #1
 800afa8:	ec59 8b10 	vmov	r8, r9, d0
 800afac:	4616      	mov	r6, r2
 800afae:	f7ff fc1b 	bl	800a7e8 <_Balloc>
 800afb2:	4604      	mov	r4, r0
 800afb4:	b930      	cbnz	r0, 800afc4 <__d2b+0x24>
 800afb6:	4602      	mov	r2, r0
 800afb8:	4b24      	ldr	r3, [pc, #144]	; (800b04c <__d2b+0xac>)
 800afba:	4825      	ldr	r0, [pc, #148]	; (800b050 <__d2b+0xb0>)
 800afbc:	f240 310f 	movw	r1, #783	; 0x30f
 800afc0:	f000 fafc 	bl	800b5bc <__assert_func>
 800afc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afcc:	bb2d      	cbnz	r5, 800b01a <__d2b+0x7a>
 800afce:	9301      	str	r3, [sp, #4]
 800afd0:	f1b8 0300 	subs.w	r3, r8, #0
 800afd4:	d026      	beq.n	800b024 <__d2b+0x84>
 800afd6:	4668      	mov	r0, sp
 800afd8:	9300      	str	r3, [sp, #0]
 800afda:	f7ff fd17 	bl	800aa0c <__lo0bits>
 800afde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800afe2:	b1e8      	cbz	r0, 800b020 <__d2b+0x80>
 800afe4:	f1c0 0320 	rsb	r3, r0, #32
 800afe8:	fa02 f303 	lsl.w	r3, r2, r3
 800afec:	430b      	orrs	r3, r1
 800afee:	40c2      	lsrs	r2, r0
 800aff0:	6163      	str	r3, [r4, #20]
 800aff2:	9201      	str	r2, [sp, #4]
 800aff4:	9b01      	ldr	r3, [sp, #4]
 800aff6:	61a3      	str	r3, [r4, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	bf14      	ite	ne
 800affc:	2202      	movne	r2, #2
 800affe:	2201      	moveq	r2, #1
 800b000:	6122      	str	r2, [r4, #16]
 800b002:	b1bd      	cbz	r5, 800b034 <__d2b+0x94>
 800b004:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b008:	4405      	add	r5, r0
 800b00a:	603d      	str	r5, [r7, #0]
 800b00c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b010:	6030      	str	r0, [r6, #0]
 800b012:	4620      	mov	r0, r4
 800b014:	b003      	add	sp, #12
 800b016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b01e:	e7d6      	b.n	800afce <__d2b+0x2e>
 800b020:	6161      	str	r1, [r4, #20]
 800b022:	e7e7      	b.n	800aff4 <__d2b+0x54>
 800b024:	a801      	add	r0, sp, #4
 800b026:	f7ff fcf1 	bl	800aa0c <__lo0bits>
 800b02a:	9b01      	ldr	r3, [sp, #4]
 800b02c:	6163      	str	r3, [r4, #20]
 800b02e:	3020      	adds	r0, #32
 800b030:	2201      	movs	r2, #1
 800b032:	e7e5      	b.n	800b000 <__d2b+0x60>
 800b034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b03c:	6038      	str	r0, [r7, #0]
 800b03e:	6918      	ldr	r0, [r3, #16]
 800b040:	f7ff fcc4 	bl	800a9cc <__hi0bits>
 800b044:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b048:	e7e2      	b.n	800b010 <__d2b+0x70>
 800b04a:	bf00      	nop
 800b04c:	0800be08 	.word	0x0800be08
 800b050:	0800be79 	.word	0x0800be79

0800b054 <__ratio>:
 800b054:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b058:	4688      	mov	r8, r1
 800b05a:	4669      	mov	r1, sp
 800b05c:	4681      	mov	r9, r0
 800b05e:	f7ff ff55 	bl	800af0c <__b2d>
 800b062:	a901      	add	r1, sp, #4
 800b064:	4640      	mov	r0, r8
 800b066:	ec55 4b10 	vmov	r4, r5, d0
 800b06a:	f7ff ff4f 	bl	800af0c <__b2d>
 800b06e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b072:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b076:	eba3 0c02 	sub.w	ip, r3, r2
 800b07a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b07e:	1a9b      	subs	r3, r3, r2
 800b080:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b084:	ec51 0b10 	vmov	r0, r1, d0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	bfd6      	itet	le
 800b08c:	460a      	movle	r2, r1
 800b08e:	462a      	movgt	r2, r5
 800b090:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b094:	468b      	mov	fp, r1
 800b096:	462f      	mov	r7, r5
 800b098:	bfd4      	ite	le
 800b09a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b09e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	ee10 2a10 	vmov	r2, s0
 800b0a8:	465b      	mov	r3, fp
 800b0aa:	4639      	mov	r1, r7
 800b0ac:	f7f5 fbee 	bl	800088c <__aeabi_ddiv>
 800b0b0:	ec41 0b10 	vmov	d0, r0, r1
 800b0b4:	b003      	add	sp, #12
 800b0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0ba <__copybits>:
 800b0ba:	3901      	subs	r1, #1
 800b0bc:	b570      	push	{r4, r5, r6, lr}
 800b0be:	1149      	asrs	r1, r1, #5
 800b0c0:	6914      	ldr	r4, [r2, #16]
 800b0c2:	3101      	adds	r1, #1
 800b0c4:	f102 0314 	add.w	r3, r2, #20
 800b0c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0d0:	1f05      	subs	r5, r0, #4
 800b0d2:	42a3      	cmp	r3, r4
 800b0d4:	d30c      	bcc.n	800b0f0 <__copybits+0x36>
 800b0d6:	1aa3      	subs	r3, r4, r2
 800b0d8:	3b11      	subs	r3, #17
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	3211      	adds	r2, #17
 800b0e0:	42a2      	cmp	r2, r4
 800b0e2:	bf88      	it	hi
 800b0e4:	2300      	movhi	r3, #0
 800b0e6:	4418      	add	r0, r3
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	4288      	cmp	r0, r1
 800b0ec:	d305      	bcc.n	800b0fa <__copybits+0x40>
 800b0ee:	bd70      	pop	{r4, r5, r6, pc}
 800b0f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800b0f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800b0f8:	e7eb      	b.n	800b0d2 <__copybits+0x18>
 800b0fa:	f840 3b04 	str.w	r3, [r0], #4
 800b0fe:	e7f4      	b.n	800b0ea <__copybits+0x30>

0800b100 <__any_on>:
 800b100:	f100 0214 	add.w	r2, r0, #20
 800b104:	6900      	ldr	r0, [r0, #16]
 800b106:	114b      	asrs	r3, r1, #5
 800b108:	4298      	cmp	r0, r3
 800b10a:	b510      	push	{r4, lr}
 800b10c:	db11      	blt.n	800b132 <__any_on+0x32>
 800b10e:	dd0a      	ble.n	800b126 <__any_on+0x26>
 800b110:	f011 011f 	ands.w	r1, r1, #31
 800b114:	d007      	beq.n	800b126 <__any_on+0x26>
 800b116:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b11a:	fa24 f001 	lsr.w	r0, r4, r1
 800b11e:	fa00 f101 	lsl.w	r1, r0, r1
 800b122:	428c      	cmp	r4, r1
 800b124:	d10b      	bne.n	800b13e <__any_on+0x3e>
 800b126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d803      	bhi.n	800b136 <__any_on+0x36>
 800b12e:	2000      	movs	r0, #0
 800b130:	bd10      	pop	{r4, pc}
 800b132:	4603      	mov	r3, r0
 800b134:	e7f7      	b.n	800b126 <__any_on+0x26>
 800b136:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b13a:	2900      	cmp	r1, #0
 800b13c:	d0f5      	beq.n	800b12a <__any_on+0x2a>
 800b13e:	2001      	movs	r0, #1
 800b140:	e7f6      	b.n	800b130 <__any_on+0x30>

0800b142 <__ascii_wctomb>:
 800b142:	b149      	cbz	r1, 800b158 <__ascii_wctomb+0x16>
 800b144:	2aff      	cmp	r2, #255	; 0xff
 800b146:	bf85      	ittet	hi
 800b148:	238a      	movhi	r3, #138	; 0x8a
 800b14a:	6003      	strhi	r3, [r0, #0]
 800b14c:	700a      	strbls	r2, [r1, #0]
 800b14e:	f04f 30ff 	movhi.w	r0, #4294967295
 800b152:	bf98      	it	ls
 800b154:	2001      	movls	r0, #1
 800b156:	4770      	bx	lr
 800b158:	4608      	mov	r0, r1
 800b15a:	4770      	bx	lr

0800b15c <__ssputs_r>:
 800b15c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b160:	688e      	ldr	r6, [r1, #8]
 800b162:	461f      	mov	r7, r3
 800b164:	42be      	cmp	r6, r7
 800b166:	680b      	ldr	r3, [r1, #0]
 800b168:	4682      	mov	sl, r0
 800b16a:	460c      	mov	r4, r1
 800b16c:	4690      	mov	r8, r2
 800b16e:	d82c      	bhi.n	800b1ca <__ssputs_r+0x6e>
 800b170:	898a      	ldrh	r2, [r1, #12]
 800b172:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b176:	d026      	beq.n	800b1c6 <__ssputs_r+0x6a>
 800b178:	6965      	ldr	r5, [r4, #20]
 800b17a:	6909      	ldr	r1, [r1, #16]
 800b17c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b180:	eba3 0901 	sub.w	r9, r3, r1
 800b184:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b188:	1c7b      	adds	r3, r7, #1
 800b18a:	444b      	add	r3, r9
 800b18c:	106d      	asrs	r5, r5, #1
 800b18e:	429d      	cmp	r5, r3
 800b190:	bf38      	it	cc
 800b192:	461d      	movcc	r5, r3
 800b194:	0553      	lsls	r3, r2, #21
 800b196:	d527      	bpl.n	800b1e8 <__ssputs_r+0x8c>
 800b198:	4629      	mov	r1, r5
 800b19a:	f7ff fa87 	bl	800a6ac <_malloc_r>
 800b19e:	4606      	mov	r6, r0
 800b1a0:	b360      	cbz	r0, 800b1fc <__ssputs_r+0xa0>
 800b1a2:	6921      	ldr	r1, [r4, #16]
 800b1a4:	464a      	mov	r2, r9
 800b1a6:	f7fe f824 	bl	80091f2 <memcpy>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b1b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1b4:	81a3      	strh	r3, [r4, #12]
 800b1b6:	6126      	str	r6, [r4, #16]
 800b1b8:	6165      	str	r5, [r4, #20]
 800b1ba:	444e      	add	r6, r9
 800b1bc:	eba5 0509 	sub.w	r5, r5, r9
 800b1c0:	6026      	str	r6, [r4, #0]
 800b1c2:	60a5      	str	r5, [r4, #8]
 800b1c4:	463e      	mov	r6, r7
 800b1c6:	42be      	cmp	r6, r7
 800b1c8:	d900      	bls.n	800b1cc <__ssputs_r+0x70>
 800b1ca:	463e      	mov	r6, r7
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	4632      	mov	r2, r6
 800b1d0:	4641      	mov	r1, r8
 800b1d2:	f000 f9c9 	bl	800b568 <memmove>
 800b1d6:	68a3      	ldr	r3, [r4, #8]
 800b1d8:	1b9b      	subs	r3, r3, r6
 800b1da:	60a3      	str	r3, [r4, #8]
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	4433      	add	r3, r6
 800b1e0:	6023      	str	r3, [r4, #0]
 800b1e2:	2000      	movs	r0, #0
 800b1e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e8:	462a      	mov	r2, r5
 800b1ea:	f000 fa1b 	bl	800b624 <_realloc_r>
 800b1ee:	4606      	mov	r6, r0
 800b1f0:	2800      	cmp	r0, #0
 800b1f2:	d1e0      	bne.n	800b1b6 <__ssputs_r+0x5a>
 800b1f4:	6921      	ldr	r1, [r4, #16]
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f7fe fe8c 	bl	8009f14 <_free_r>
 800b1fc:	230c      	movs	r3, #12
 800b1fe:	f8ca 3000 	str.w	r3, [sl]
 800b202:	89a3      	ldrh	r3, [r4, #12]
 800b204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b208:	81a3      	strh	r3, [r4, #12]
 800b20a:	f04f 30ff 	mov.w	r0, #4294967295
 800b20e:	e7e9      	b.n	800b1e4 <__ssputs_r+0x88>

0800b210 <_svfiprintf_r>:
 800b210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b214:	4698      	mov	r8, r3
 800b216:	898b      	ldrh	r3, [r1, #12]
 800b218:	061b      	lsls	r3, r3, #24
 800b21a:	b09d      	sub	sp, #116	; 0x74
 800b21c:	4607      	mov	r7, r0
 800b21e:	460d      	mov	r5, r1
 800b220:	4614      	mov	r4, r2
 800b222:	d50e      	bpl.n	800b242 <_svfiprintf_r+0x32>
 800b224:	690b      	ldr	r3, [r1, #16]
 800b226:	b963      	cbnz	r3, 800b242 <_svfiprintf_r+0x32>
 800b228:	2140      	movs	r1, #64	; 0x40
 800b22a:	f7ff fa3f 	bl	800a6ac <_malloc_r>
 800b22e:	6028      	str	r0, [r5, #0]
 800b230:	6128      	str	r0, [r5, #16]
 800b232:	b920      	cbnz	r0, 800b23e <_svfiprintf_r+0x2e>
 800b234:	230c      	movs	r3, #12
 800b236:	603b      	str	r3, [r7, #0]
 800b238:	f04f 30ff 	mov.w	r0, #4294967295
 800b23c:	e0d0      	b.n	800b3e0 <_svfiprintf_r+0x1d0>
 800b23e:	2340      	movs	r3, #64	; 0x40
 800b240:	616b      	str	r3, [r5, #20]
 800b242:	2300      	movs	r3, #0
 800b244:	9309      	str	r3, [sp, #36]	; 0x24
 800b246:	2320      	movs	r3, #32
 800b248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b24c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b250:	2330      	movs	r3, #48	; 0x30
 800b252:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b3f8 <_svfiprintf_r+0x1e8>
 800b256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b25a:	f04f 0901 	mov.w	r9, #1
 800b25e:	4623      	mov	r3, r4
 800b260:	469a      	mov	sl, r3
 800b262:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b266:	b10a      	cbz	r2, 800b26c <_svfiprintf_r+0x5c>
 800b268:	2a25      	cmp	r2, #37	; 0x25
 800b26a:	d1f9      	bne.n	800b260 <_svfiprintf_r+0x50>
 800b26c:	ebba 0b04 	subs.w	fp, sl, r4
 800b270:	d00b      	beq.n	800b28a <_svfiprintf_r+0x7a>
 800b272:	465b      	mov	r3, fp
 800b274:	4622      	mov	r2, r4
 800b276:	4629      	mov	r1, r5
 800b278:	4638      	mov	r0, r7
 800b27a:	f7ff ff6f 	bl	800b15c <__ssputs_r>
 800b27e:	3001      	adds	r0, #1
 800b280:	f000 80a9 	beq.w	800b3d6 <_svfiprintf_r+0x1c6>
 800b284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b286:	445a      	add	r2, fp
 800b288:	9209      	str	r2, [sp, #36]	; 0x24
 800b28a:	f89a 3000 	ldrb.w	r3, [sl]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 80a1 	beq.w	800b3d6 <_svfiprintf_r+0x1c6>
 800b294:	2300      	movs	r3, #0
 800b296:	f04f 32ff 	mov.w	r2, #4294967295
 800b29a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b29e:	f10a 0a01 	add.w	sl, sl, #1
 800b2a2:	9304      	str	r3, [sp, #16]
 800b2a4:	9307      	str	r3, [sp, #28]
 800b2a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b2aa:	931a      	str	r3, [sp, #104]	; 0x68
 800b2ac:	4654      	mov	r4, sl
 800b2ae:	2205      	movs	r2, #5
 800b2b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2b4:	4850      	ldr	r0, [pc, #320]	; (800b3f8 <_svfiprintf_r+0x1e8>)
 800b2b6:	f7f4 ffab 	bl	8000210 <memchr>
 800b2ba:	9a04      	ldr	r2, [sp, #16]
 800b2bc:	b9d8      	cbnz	r0, 800b2f6 <_svfiprintf_r+0xe6>
 800b2be:	06d0      	lsls	r0, r2, #27
 800b2c0:	bf44      	itt	mi
 800b2c2:	2320      	movmi	r3, #32
 800b2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2c8:	0711      	lsls	r1, r2, #28
 800b2ca:	bf44      	itt	mi
 800b2cc:	232b      	movmi	r3, #43	; 0x2b
 800b2ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b2d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2d6:	2b2a      	cmp	r3, #42	; 0x2a
 800b2d8:	d015      	beq.n	800b306 <_svfiprintf_r+0xf6>
 800b2da:	9a07      	ldr	r2, [sp, #28]
 800b2dc:	4654      	mov	r4, sl
 800b2de:	2000      	movs	r0, #0
 800b2e0:	f04f 0c0a 	mov.w	ip, #10
 800b2e4:	4621      	mov	r1, r4
 800b2e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b2ea:	3b30      	subs	r3, #48	; 0x30
 800b2ec:	2b09      	cmp	r3, #9
 800b2ee:	d94d      	bls.n	800b38c <_svfiprintf_r+0x17c>
 800b2f0:	b1b0      	cbz	r0, 800b320 <_svfiprintf_r+0x110>
 800b2f2:	9207      	str	r2, [sp, #28]
 800b2f4:	e014      	b.n	800b320 <_svfiprintf_r+0x110>
 800b2f6:	eba0 0308 	sub.w	r3, r0, r8
 800b2fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b2fe:	4313      	orrs	r3, r2
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	46a2      	mov	sl, r4
 800b304:	e7d2      	b.n	800b2ac <_svfiprintf_r+0x9c>
 800b306:	9b03      	ldr	r3, [sp, #12]
 800b308:	1d19      	adds	r1, r3, #4
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	9103      	str	r1, [sp, #12]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bfbb      	ittet	lt
 800b312:	425b      	neglt	r3, r3
 800b314:	f042 0202 	orrlt.w	r2, r2, #2
 800b318:	9307      	strge	r3, [sp, #28]
 800b31a:	9307      	strlt	r3, [sp, #28]
 800b31c:	bfb8      	it	lt
 800b31e:	9204      	strlt	r2, [sp, #16]
 800b320:	7823      	ldrb	r3, [r4, #0]
 800b322:	2b2e      	cmp	r3, #46	; 0x2e
 800b324:	d10c      	bne.n	800b340 <_svfiprintf_r+0x130>
 800b326:	7863      	ldrb	r3, [r4, #1]
 800b328:	2b2a      	cmp	r3, #42	; 0x2a
 800b32a:	d134      	bne.n	800b396 <_svfiprintf_r+0x186>
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	1d1a      	adds	r2, r3, #4
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	9203      	str	r2, [sp, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	bfb8      	it	lt
 800b338:	f04f 33ff 	movlt.w	r3, #4294967295
 800b33c:	3402      	adds	r4, #2
 800b33e:	9305      	str	r3, [sp, #20]
 800b340:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b408 <_svfiprintf_r+0x1f8>
 800b344:	7821      	ldrb	r1, [r4, #0]
 800b346:	2203      	movs	r2, #3
 800b348:	4650      	mov	r0, sl
 800b34a:	f7f4 ff61 	bl	8000210 <memchr>
 800b34e:	b138      	cbz	r0, 800b360 <_svfiprintf_r+0x150>
 800b350:	9b04      	ldr	r3, [sp, #16]
 800b352:	eba0 000a 	sub.w	r0, r0, sl
 800b356:	2240      	movs	r2, #64	; 0x40
 800b358:	4082      	lsls	r2, r0
 800b35a:	4313      	orrs	r3, r2
 800b35c:	3401      	adds	r4, #1
 800b35e:	9304      	str	r3, [sp, #16]
 800b360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b364:	4825      	ldr	r0, [pc, #148]	; (800b3fc <_svfiprintf_r+0x1ec>)
 800b366:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b36a:	2206      	movs	r2, #6
 800b36c:	f7f4 ff50 	bl	8000210 <memchr>
 800b370:	2800      	cmp	r0, #0
 800b372:	d038      	beq.n	800b3e6 <_svfiprintf_r+0x1d6>
 800b374:	4b22      	ldr	r3, [pc, #136]	; (800b400 <_svfiprintf_r+0x1f0>)
 800b376:	bb1b      	cbnz	r3, 800b3c0 <_svfiprintf_r+0x1b0>
 800b378:	9b03      	ldr	r3, [sp, #12]
 800b37a:	3307      	adds	r3, #7
 800b37c:	f023 0307 	bic.w	r3, r3, #7
 800b380:	3308      	adds	r3, #8
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b386:	4433      	add	r3, r6
 800b388:	9309      	str	r3, [sp, #36]	; 0x24
 800b38a:	e768      	b.n	800b25e <_svfiprintf_r+0x4e>
 800b38c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b390:	460c      	mov	r4, r1
 800b392:	2001      	movs	r0, #1
 800b394:	e7a6      	b.n	800b2e4 <_svfiprintf_r+0xd4>
 800b396:	2300      	movs	r3, #0
 800b398:	3401      	adds	r4, #1
 800b39a:	9305      	str	r3, [sp, #20]
 800b39c:	4619      	mov	r1, r3
 800b39e:	f04f 0c0a 	mov.w	ip, #10
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3a8:	3a30      	subs	r2, #48	; 0x30
 800b3aa:	2a09      	cmp	r2, #9
 800b3ac:	d903      	bls.n	800b3b6 <_svfiprintf_r+0x1a6>
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0c6      	beq.n	800b340 <_svfiprintf_r+0x130>
 800b3b2:	9105      	str	r1, [sp, #20]
 800b3b4:	e7c4      	b.n	800b340 <_svfiprintf_r+0x130>
 800b3b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b3ba:	4604      	mov	r4, r0
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e7f0      	b.n	800b3a2 <_svfiprintf_r+0x192>
 800b3c0:	ab03      	add	r3, sp, #12
 800b3c2:	9300      	str	r3, [sp, #0]
 800b3c4:	462a      	mov	r2, r5
 800b3c6:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <_svfiprintf_r+0x1f4>)
 800b3c8:	a904      	add	r1, sp, #16
 800b3ca:	4638      	mov	r0, r7
 800b3cc:	f7fd f994 	bl	80086f8 <_printf_float>
 800b3d0:	1c42      	adds	r2, r0, #1
 800b3d2:	4606      	mov	r6, r0
 800b3d4:	d1d6      	bne.n	800b384 <_svfiprintf_r+0x174>
 800b3d6:	89ab      	ldrh	r3, [r5, #12]
 800b3d8:	065b      	lsls	r3, r3, #25
 800b3da:	f53f af2d 	bmi.w	800b238 <_svfiprintf_r+0x28>
 800b3de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b3e0:	b01d      	add	sp, #116	; 0x74
 800b3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e6:	ab03      	add	r3, sp, #12
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	462a      	mov	r2, r5
 800b3ec:	4b05      	ldr	r3, [pc, #20]	; (800b404 <_svfiprintf_r+0x1f4>)
 800b3ee:	a904      	add	r1, sp, #16
 800b3f0:	4638      	mov	r0, r7
 800b3f2:	f7fd fc25 	bl	8008c40 <_printf_i>
 800b3f6:	e7eb      	b.n	800b3d0 <_svfiprintf_r+0x1c0>
 800b3f8:	0800c0d5 	.word	0x0800c0d5
 800b3fc:	0800c0df 	.word	0x0800c0df
 800b400:	080086f9 	.word	0x080086f9
 800b404:	0800b15d 	.word	0x0800b15d
 800b408:	0800c0db 	.word	0x0800c0db

0800b40c <__sflush_r>:
 800b40c:	898a      	ldrh	r2, [r1, #12]
 800b40e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b412:	4605      	mov	r5, r0
 800b414:	0710      	lsls	r0, r2, #28
 800b416:	460c      	mov	r4, r1
 800b418:	d458      	bmi.n	800b4cc <__sflush_r+0xc0>
 800b41a:	684b      	ldr	r3, [r1, #4]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dc05      	bgt.n	800b42c <__sflush_r+0x20>
 800b420:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b422:	2b00      	cmp	r3, #0
 800b424:	dc02      	bgt.n	800b42c <__sflush_r+0x20>
 800b426:	2000      	movs	r0, #0
 800b428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b42c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b42e:	2e00      	cmp	r6, #0
 800b430:	d0f9      	beq.n	800b426 <__sflush_r+0x1a>
 800b432:	2300      	movs	r3, #0
 800b434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b438:	682f      	ldr	r7, [r5, #0]
 800b43a:	6a21      	ldr	r1, [r4, #32]
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	d032      	beq.n	800b4a6 <__sflush_r+0x9a>
 800b440:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b442:	89a3      	ldrh	r3, [r4, #12]
 800b444:	075a      	lsls	r2, r3, #29
 800b446:	d505      	bpl.n	800b454 <__sflush_r+0x48>
 800b448:	6863      	ldr	r3, [r4, #4]
 800b44a:	1ac0      	subs	r0, r0, r3
 800b44c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b44e:	b10b      	cbz	r3, 800b454 <__sflush_r+0x48>
 800b450:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b452:	1ac0      	subs	r0, r0, r3
 800b454:	2300      	movs	r3, #0
 800b456:	4602      	mov	r2, r0
 800b458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b45a:	6a21      	ldr	r1, [r4, #32]
 800b45c:	4628      	mov	r0, r5
 800b45e:	47b0      	blx	r6
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	d106      	bne.n	800b474 <__sflush_r+0x68>
 800b466:	6829      	ldr	r1, [r5, #0]
 800b468:	291d      	cmp	r1, #29
 800b46a:	d82b      	bhi.n	800b4c4 <__sflush_r+0xb8>
 800b46c:	4a29      	ldr	r2, [pc, #164]	; (800b514 <__sflush_r+0x108>)
 800b46e:	410a      	asrs	r2, r1
 800b470:	07d6      	lsls	r6, r2, #31
 800b472:	d427      	bmi.n	800b4c4 <__sflush_r+0xb8>
 800b474:	2200      	movs	r2, #0
 800b476:	6062      	str	r2, [r4, #4]
 800b478:	04d9      	lsls	r1, r3, #19
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	6022      	str	r2, [r4, #0]
 800b47e:	d504      	bpl.n	800b48a <__sflush_r+0x7e>
 800b480:	1c42      	adds	r2, r0, #1
 800b482:	d101      	bne.n	800b488 <__sflush_r+0x7c>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	b903      	cbnz	r3, 800b48a <__sflush_r+0x7e>
 800b488:	6560      	str	r0, [r4, #84]	; 0x54
 800b48a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b48c:	602f      	str	r7, [r5, #0]
 800b48e:	2900      	cmp	r1, #0
 800b490:	d0c9      	beq.n	800b426 <__sflush_r+0x1a>
 800b492:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b496:	4299      	cmp	r1, r3
 800b498:	d002      	beq.n	800b4a0 <__sflush_r+0x94>
 800b49a:	4628      	mov	r0, r5
 800b49c:	f7fe fd3a 	bl	8009f14 <_free_r>
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	6360      	str	r0, [r4, #52]	; 0x34
 800b4a4:	e7c0      	b.n	800b428 <__sflush_r+0x1c>
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	47b0      	blx	r6
 800b4ac:	1c41      	adds	r1, r0, #1
 800b4ae:	d1c8      	bne.n	800b442 <__sflush_r+0x36>
 800b4b0:	682b      	ldr	r3, [r5, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d0c5      	beq.n	800b442 <__sflush_r+0x36>
 800b4b6:	2b1d      	cmp	r3, #29
 800b4b8:	d001      	beq.n	800b4be <__sflush_r+0xb2>
 800b4ba:	2b16      	cmp	r3, #22
 800b4bc:	d101      	bne.n	800b4c2 <__sflush_r+0xb6>
 800b4be:	602f      	str	r7, [r5, #0]
 800b4c0:	e7b1      	b.n	800b426 <__sflush_r+0x1a>
 800b4c2:	89a3      	ldrh	r3, [r4, #12]
 800b4c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4c8:	81a3      	strh	r3, [r4, #12]
 800b4ca:	e7ad      	b.n	800b428 <__sflush_r+0x1c>
 800b4cc:	690f      	ldr	r7, [r1, #16]
 800b4ce:	2f00      	cmp	r7, #0
 800b4d0:	d0a9      	beq.n	800b426 <__sflush_r+0x1a>
 800b4d2:	0793      	lsls	r3, r2, #30
 800b4d4:	680e      	ldr	r6, [r1, #0]
 800b4d6:	bf08      	it	eq
 800b4d8:	694b      	ldreq	r3, [r1, #20]
 800b4da:	600f      	str	r7, [r1, #0]
 800b4dc:	bf18      	it	ne
 800b4de:	2300      	movne	r3, #0
 800b4e0:	eba6 0807 	sub.w	r8, r6, r7
 800b4e4:	608b      	str	r3, [r1, #8]
 800b4e6:	f1b8 0f00 	cmp.w	r8, #0
 800b4ea:	dd9c      	ble.n	800b426 <__sflush_r+0x1a>
 800b4ec:	6a21      	ldr	r1, [r4, #32]
 800b4ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b4f0:	4643      	mov	r3, r8
 800b4f2:	463a      	mov	r2, r7
 800b4f4:	4628      	mov	r0, r5
 800b4f6:	47b0      	blx	r6
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	dc06      	bgt.n	800b50a <__sflush_r+0xfe>
 800b4fc:	89a3      	ldrh	r3, [r4, #12]
 800b4fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b502:	81a3      	strh	r3, [r4, #12]
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	e78e      	b.n	800b428 <__sflush_r+0x1c>
 800b50a:	4407      	add	r7, r0
 800b50c:	eba8 0800 	sub.w	r8, r8, r0
 800b510:	e7e9      	b.n	800b4e6 <__sflush_r+0xda>
 800b512:	bf00      	nop
 800b514:	dfbffffe 	.word	0xdfbffffe

0800b518 <_fflush_r>:
 800b518:	b538      	push	{r3, r4, r5, lr}
 800b51a:	690b      	ldr	r3, [r1, #16]
 800b51c:	4605      	mov	r5, r0
 800b51e:	460c      	mov	r4, r1
 800b520:	b913      	cbnz	r3, 800b528 <_fflush_r+0x10>
 800b522:	2500      	movs	r5, #0
 800b524:	4628      	mov	r0, r5
 800b526:	bd38      	pop	{r3, r4, r5, pc}
 800b528:	b118      	cbz	r0, 800b532 <_fflush_r+0x1a>
 800b52a:	6a03      	ldr	r3, [r0, #32]
 800b52c:	b90b      	cbnz	r3, 800b532 <_fflush_r+0x1a>
 800b52e:	f7fd fd35 	bl	8008f9c <__sinit>
 800b532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d0f3      	beq.n	800b522 <_fflush_r+0xa>
 800b53a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b53c:	07d0      	lsls	r0, r2, #31
 800b53e:	d404      	bmi.n	800b54a <_fflush_r+0x32>
 800b540:	0599      	lsls	r1, r3, #22
 800b542:	d402      	bmi.n	800b54a <_fflush_r+0x32>
 800b544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b546:	f7fd fe52 	bl	80091ee <__retarget_lock_acquire_recursive>
 800b54a:	4628      	mov	r0, r5
 800b54c:	4621      	mov	r1, r4
 800b54e:	f7ff ff5d 	bl	800b40c <__sflush_r>
 800b552:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b554:	07da      	lsls	r2, r3, #31
 800b556:	4605      	mov	r5, r0
 800b558:	d4e4      	bmi.n	800b524 <_fflush_r+0xc>
 800b55a:	89a3      	ldrh	r3, [r4, #12]
 800b55c:	059b      	lsls	r3, r3, #22
 800b55e:	d4e1      	bmi.n	800b524 <_fflush_r+0xc>
 800b560:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b562:	f7fd fe45 	bl	80091f0 <__retarget_lock_release_recursive>
 800b566:	e7dd      	b.n	800b524 <_fflush_r+0xc>

0800b568 <memmove>:
 800b568:	4288      	cmp	r0, r1
 800b56a:	b510      	push	{r4, lr}
 800b56c:	eb01 0402 	add.w	r4, r1, r2
 800b570:	d902      	bls.n	800b578 <memmove+0x10>
 800b572:	4284      	cmp	r4, r0
 800b574:	4623      	mov	r3, r4
 800b576:	d807      	bhi.n	800b588 <memmove+0x20>
 800b578:	1e43      	subs	r3, r0, #1
 800b57a:	42a1      	cmp	r1, r4
 800b57c:	d008      	beq.n	800b590 <memmove+0x28>
 800b57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b586:	e7f8      	b.n	800b57a <memmove+0x12>
 800b588:	4402      	add	r2, r0
 800b58a:	4601      	mov	r1, r0
 800b58c:	428a      	cmp	r2, r1
 800b58e:	d100      	bne.n	800b592 <memmove+0x2a>
 800b590:	bd10      	pop	{r4, pc}
 800b592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b59a:	e7f7      	b.n	800b58c <memmove+0x24>

0800b59c <_sbrk_r>:
 800b59c:	b538      	push	{r3, r4, r5, lr}
 800b59e:	4d06      	ldr	r5, [pc, #24]	; (800b5b8 <_sbrk_r+0x1c>)
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	4608      	mov	r0, r1
 800b5a6:	602b      	str	r3, [r5, #0]
 800b5a8:	f7f7 fb84 	bl	8002cb4 <_sbrk>
 800b5ac:	1c43      	adds	r3, r0, #1
 800b5ae:	d102      	bne.n	800b5b6 <_sbrk_r+0x1a>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	b103      	cbz	r3, 800b5b6 <_sbrk_r+0x1a>
 800b5b4:	6023      	str	r3, [r4, #0]
 800b5b6:	bd38      	pop	{r3, r4, r5, pc}
 800b5b8:	20000a90 	.word	0x20000a90

0800b5bc <__assert_func>:
 800b5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b5be:	4614      	mov	r4, r2
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4b09      	ldr	r3, [pc, #36]	; (800b5e8 <__assert_func+0x2c>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	4605      	mov	r5, r0
 800b5c8:	68d8      	ldr	r0, [r3, #12]
 800b5ca:	b14c      	cbz	r4, 800b5e0 <__assert_func+0x24>
 800b5cc:	4b07      	ldr	r3, [pc, #28]	; (800b5ec <__assert_func+0x30>)
 800b5ce:	9100      	str	r1, [sp, #0]
 800b5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b5d4:	4906      	ldr	r1, [pc, #24]	; (800b5f0 <__assert_func+0x34>)
 800b5d6:	462b      	mov	r3, r5
 800b5d8:	f000 f854 	bl	800b684 <fiprintf>
 800b5dc:	f000 f864 	bl	800b6a8 <abort>
 800b5e0:	4b04      	ldr	r3, [pc, #16]	; (800b5f4 <__assert_func+0x38>)
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	e7f3      	b.n	800b5ce <__assert_func+0x12>
 800b5e6:	bf00      	nop
 800b5e8:	200001d4 	.word	0x200001d4
 800b5ec:	0800c0e6 	.word	0x0800c0e6
 800b5f0:	0800c0f3 	.word	0x0800c0f3
 800b5f4:	0800c121 	.word	0x0800c121

0800b5f8 <_calloc_r>:
 800b5f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b5fa:	fba1 2402 	umull	r2, r4, r1, r2
 800b5fe:	b94c      	cbnz	r4, 800b614 <_calloc_r+0x1c>
 800b600:	4611      	mov	r1, r2
 800b602:	9201      	str	r2, [sp, #4]
 800b604:	f7ff f852 	bl	800a6ac <_malloc_r>
 800b608:	9a01      	ldr	r2, [sp, #4]
 800b60a:	4605      	mov	r5, r0
 800b60c:	b930      	cbnz	r0, 800b61c <_calloc_r+0x24>
 800b60e:	4628      	mov	r0, r5
 800b610:	b003      	add	sp, #12
 800b612:	bd30      	pop	{r4, r5, pc}
 800b614:	220c      	movs	r2, #12
 800b616:	6002      	str	r2, [r0, #0]
 800b618:	2500      	movs	r5, #0
 800b61a:	e7f8      	b.n	800b60e <_calloc_r+0x16>
 800b61c:	4621      	mov	r1, r4
 800b61e:	f7fd fd56 	bl	80090ce <memset>
 800b622:	e7f4      	b.n	800b60e <_calloc_r+0x16>

0800b624 <_realloc_r>:
 800b624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b628:	4680      	mov	r8, r0
 800b62a:	4614      	mov	r4, r2
 800b62c:	460e      	mov	r6, r1
 800b62e:	b921      	cbnz	r1, 800b63a <_realloc_r+0x16>
 800b630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b634:	4611      	mov	r1, r2
 800b636:	f7ff b839 	b.w	800a6ac <_malloc_r>
 800b63a:	b92a      	cbnz	r2, 800b648 <_realloc_r+0x24>
 800b63c:	f7fe fc6a 	bl	8009f14 <_free_r>
 800b640:	4625      	mov	r5, r4
 800b642:	4628      	mov	r0, r5
 800b644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b648:	f000 f835 	bl	800b6b6 <_malloc_usable_size_r>
 800b64c:	4284      	cmp	r4, r0
 800b64e:	4607      	mov	r7, r0
 800b650:	d802      	bhi.n	800b658 <_realloc_r+0x34>
 800b652:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b656:	d812      	bhi.n	800b67e <_realloc_r+0x5a>
 800b658:	4621      	mov	r1, r4
 800b65a:	4640      	mov	r0, r8
 800b65c:	f7ff f826 	bl	800a6ac <_malloc_r>
 800b660:	4605      	mov	r5, r0
 800b662:	2800      	cmp	r0, #0
 800b664:	d0ed      	beq.n	800b642 <_realloc_r+0x1e>
 800b666:	42bc      	cmp	r4, r7
 800b668:	4622      	mov	r2, r4
 800b66a:	4631      	mov	r1, r6
 800b66c:	bf28      	it	cs
 800b66e:	463a      	movcs	r2, r7
 800b670:	f7fd fdbf 	bl	80091f2 <memcpy>
 800b674:	4631      	mov	r1, r6
 800b676:	4640      	mov	r0, r8
 800b678:	f7fe fc4c 	bl	8009f14 <_free_r>
 800b67c:	e7e1      	b.n	800b642 <_realloc_r+0x1e>
 800b67e:	4635      	mov	r5, r6
 800b680:	e7df      	b.n	800b642 <_realloc_r+0x1e>
	...

0800b684 <fiprintf>:
 800b684:	b40e      	push	{r1, r2, r3}
 800b686:	b503      	push	{r0, r1, lr}
 800b688:	4601      	mov	r1, r0
 800b68a:	ab03      	add	r3, sp, #12
 800b68c:	4805      	ldr	r0, [pc, #20]	; (800b6a4 <fiprintf+0x20>)
 800b68e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b692:	6800      	ldr	r0, [r0, #0]
 800b694:	9301      	str	r3, [sp, #4]
 800b696:	f000 f83f 	bl	800b718 <_vfiprintf_r>
 800b69a:	b002      	add	sp, #8
 800b69c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6a0:	b003      	add	sp, #12
 800b6a2:	4770      	bx	lr
 800b6a4:	200001d4 	.word	0x200001d4

0800b6a8 <abort>:
 800b6a8:	b508      	push	{r3, lr}
 800b6aa:	2006      	movs	r0, #6
 800b6ac:	f000 fa0c 	bl	800bac8 <raise>
 800b6b0:	2001      	movs	r0, #1
 800b6b2:	f7f7 fa87 	bl	8002bc4 <_exit>

0800b6b6 <_malloc_usable_size_r>:
 800b6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6ba:	1f18      	subs	r0, r3, #4
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	bfbc      	itt	lt
 800b6c0:	580b      	ldrlt	r3, [r1, r0]
 800b6c2:	18c0      	addlt	r0, r0, r3
 800b6c4:	4770      	bx	lr

0800b6c6 <__sfputc_r>:
 800b6c6:	6893      	ldr	r3, [r2, #8]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	b410      	push	{r4}
 800b6ce:	6093      	str	r3, [r2, #8]
 800b6d0:	da08      	bge.n	800b6e4 <__sfputc_r+0x1e>
 800b6d2:	6994      	ldr	r4, [r2, #24]
 800b6d4:	42a3      	cmp	r3, r4
 800b6d6:	db01      	blt.n	800b6dc <__sfputc_r+0x16>
 800b6d8:	290a      	cmp	r1, #10
 800b6da:	d103      	bne.n	800b6e4 <__sfputc_r+0x1e>
 800b6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6e0:	f000 b934 	b.w	800b94c <__swbuf_r>
 800b6e4:	6813      	ldr	r3, [r2, #0]
 800b6e6:	1c58      	adds	r0, r3, #1
 800b6e8:	6010      	str	r0, [r2, #0]
 800b6ea:	7019      	strb	r1, [r3, #0]
 800b6ec:	4608      	mov	r0, r1
 800b6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <__sfputs_r>:
 800b6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f6:	4606      	mov	r6, r0
 800b6f8:	460f      	mov	r7, r1
 800b6fa:	4614      	mov	r4, r2
 800b6fc:	18d5      	adds	r5, r2, r3
 800b6fe:	42ac      	cmp	r4, r5
 800b700:	d101      	bne.n	800b706 <__sfputs_r+0x12>
 800b702:	2000      	movs	r0, #0
 800b704:	e007      	b.n	800b716 <__sfputs_r+0x22>
 800b706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b70a:	463a      	mov	r2, r7
 800b70c:	4630      	mov	r0, r6
 800b70e:	f7ff ffda 	bl	800b6c6 <__sfputc_r>
 800b712:	1c43      	adds	r3, r0, #1
 800b714:	d1f3      	bne.n	800b6fe <__sfputs_r+0xa>
 800b716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b718 <_vfiprintf_r>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	460d      	mov	r5, r1
 800b71e:	b09d      	sub	sp, #116	; 0x74
 800b720:	4614      	mov	r4, r2
 800b722:	4698      	mov	r8, r3
 800b724:	4606      	mov	r6, r0
 800b726:	b118      	cbz	r0, 800b730 <_vfiprintf_r+0x18>
 800b728:	6a03      	ldr	r3, [r0, #32]
 800b72a:	b90b      	cbnz	r3, 800b730 <_vfiprintf_r+0x18>
 800b72c:	f7fd fc36 	bl	8008f9c <__sinit>
 800b730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b732:	07d9      	lsls	r1, r3, #31
 800b734:	d405      	bmi.n	800b742 <_vfiprintf_r+0x2a>
 800b736:	89ab      	ldrh	r3, [r5, #12]
 800b738:	059a      	lsls	r2, r3, #22
 800b73a:	d402      	bmi.n	800b742 <_vfiprintf_r+0x2a>
 800b73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b73e:	f7fd fd56 	bl	80091ee <__retarget_lock_acquire_recursive>
 800b742:	89ab      	ldrh	r3, [r5, #12]
 800b744:	071b      	lsls	r3, r3, #28
 800b746:	d501      	bpl.n	800b74c <_vfiprintf_r+0x34>
 800b748:	692b      	ldr	r3, [r5, #16]
 800b74a:	b99b      	cbnz	r3, 800b774 <_vfiprintf_r+0x5c>
 800b74c:	4629      	mov	r1, r5
 800b74e:	4630      	mov	r0, r6
 800b750:	f000 f93a 	bl	800b9c8 <__swsetup_r>
 800b754:	b170      	cbz	r0, 800b774 <_vfiprintf_r+0x5c>
 800b756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b758:	07dc      	lsls	r4, r3, #31
 800b75a:	d504      	bpl.n	800b766 <_vfiprintf_r+0x4e>
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	b01d      	add	sp, #116	; 0x74
 800b762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b766:	89ab      	ldrh	r3, [r5, #12]
 800b768:	0598      	lsls	r0, r3, #22
 800b76a:	d4f7      	bmi.n	800b75c <_vfiprintf_r+0x44>
 800b76c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b76e:	f7fd fd3f 	bl	80091f0 <__retarget_lock_release_recursive>
 800b772:	e7f3      	b.n	800b75c <_vfiprintf_r+0x44>
 800b774:	2300      	movs	r3, #0
 800b776:	9309      	str	r3, [sp, #36]	; 0x24
 800b778:	2320      	movs	r3, #32
 800b77a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b782:	2330      	movs	r3, #48	; 0x30
 800b784:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b938 <_vfiprintf_r+0x220>
 800b788:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b78c:	f04f 0901 	mov.w	r9, #1
 800b790:	4623      	mov	r3, r4
 800b792:	469a      	mov	sl, r3
 800b794:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b798:	b10a      	cbz	r2, 800b79e <_vfiprintf_r+0x86>
 800b79a:	2a25      	cmp	r2, #37	; 0x25
 800b79c:	d1f9      	bne.n	800b792 <_vfiprintf_r+0x7a>
 800b79e:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a2:	d00b      	beq.n	800b7bc <_vfiprintf_r+0xa4>
 800b7a4:	465b      	mov	r3, fp
 800b7a6:	4622      	mov	r2, r4
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	f7ff ffa2 	bl	800b6f4 <__sfputs_r>
 800b7b0:	3001      	adds	r0, #1
 800b7b2:	f000 80a9 	beq.w	800b908 <_vfiprintf_r+0x1f0>
 800b7b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b8:	445a      	add	r2, fp
 800b7ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b7bc:	f89a 3000 	ldrb.w	r3, [sl]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	f000 80a1 	beq.w	800b908 <_vfiprintf_r+0x1f0>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b7cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7d0:	f10a 0a01 	add.w	sl, sl, #1
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7dc:	931a      	str	r3, [sp, #104]	; 0x68
 800b7de:	4654      	mov	r4, sl
 800b7e0:	2205      	movs	r2, #5
 800b7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e6:	4854      	ldr	r0, [pc, #336]	; (800b938 <_vfiprintf_r+0x220>)
 800b7e8:	f7f4 fd12 	bl	8000210 <memchr>
 800b7ec:	9a04      	ldr	r2, [sp, #16]
 800b7ee:	b9d8      	cbnz	r0, 800b828 <_vfiprintf_r+0x110>
 800b7f0:	06d1      	lsls	r1, r2, #27
 800b7f2:	bf44      	itt	mi
 800b7f4:	2320      	movmi	r3, #32
 800b7f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7fa:	0713      	lsls	r3, r2, #28
 800b7fc:	bf44      	itt	mi
 800b7fe:	232b      	movmi	r3, #43	; 0x2b
 800b800:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b804:	f89a 3000 	ldrb.w	r3, [sl]
 800b808:	2b2a      	cmp	r3, #42	; 0x2a
 800b80a:	d015      	beq.n	800b838 <_vfiprintf_r+0x120>
 800b80c:	9a07      	ldr	r2, [sp, #28]
 800b80e:	4654      	mov	r4, sl
 800b810:	2000      	movs	r0, #0
 800b812:	f04f 0c0a 	mov.w	ip, #10
 800b816:	4621      	mov	r1, r4
 800b818:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81c:	3b30      	subs	r3, #48	; 0x30
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d94d      	bls.n	800b8be <_vfiprintf_r+0x1a6>
 800b822:	b1b0      	cbz	r0, 800b852 <_vfiprintf_r+0x13a>
 800b824:	9207      	str	r2, [sp, #28]
 800b826:	e014      	b.n	800b852 <_vfiprintf_r+0x13a>
 800b828:	eba0 0308 	sub.w	r3, r0, r8
 800b82c:	fa09 f303 	lsl.w	r3, r9, r3
 800b830:	4313      	orrs	r3, r2
 800b832:	9304      	str	r3, [sp, #16]
 800b834:	46a2      	mov	sl, r4
 800b836:	e7d2      	b.n	800b7de <_vfiprintf_r+0xc6>
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	1d19      	adds	r1, r3, #4
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	9103      	str	r1, [sp, #12]
 800b840:	2b00      	cmp	r3, #0
 800b842:	bfbb      	ittet	lt
 800b844:	425b      	neglt	r3, r3
 800b846:	f042 0202 	orrlt.w	r2, r2, #2
 800b84a:	9307      	strge	r3, [sp, #28]
 800b84c:	9307      	strlt	r3, [sp, #28]
 800b84e:	bfb8      	it	lt
 800b850:	9204      	strlt	r2, [sp, #16]
 800b852:	7823      	ldrb	r3, [r4, #0]
 800b854:	2b2e      	cmp	r3, #46	; 0x2e
 800b856:	d10c      	bne.n	800b872 <_vfiprintf_r+0x15a>
 800b858:	7863      	ldrb	r3, [r4, #1]
 800b85a:	2b2a      	cmp	r3, #42	; 0x2a
 800b85c:	d134      	bne.n	800b8c8 <_vfiprintf_r+0x1b0>
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	1d1a      	adds	r2, r3, #4
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	9203      	str	r2, [sp, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	bfb8      	it	lt
 800b86a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b86e:	3402      	adds	r4, #2
 800b870:	9305      	str	r3, [sp, #20]
 800b872:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b948 <_vfiprintf_r+0x230>
 800b876:	7821      	ldrb	r1, [r4, #0]
 800b878:	2203      	movs	r2, #3
 800b87a:	4650      	mov	r0, sl
 800b87c:	f7f4 fcc8 	bl	8000210 <memchr>
 800b880:	b138      	cbz	r0, 800b892 <_vfiprintf_r+0x17a>
 800b882:	9b04      	ldr	r3, [sp, #16]
 800b884:	eba0 000a 	sub.w	r0, r0, sl
 800b888:	2240      	movs	r2, #64	; 0x40
 800b88a:	4082      	lsls	r2, r0
 800b88c:	4313      	orrs	r3, r2
 800b88e:	3401      	adds	r4, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4829      	ldr	r0, [pc, #164]	; (800b93c <_vfiprintf_r+0x224>)
 800b898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89c:	2206      	movs	r2, #6
 800b89e:	f7f4 fcb7 	bl	8000210 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d03f      	beq.n	800b926 <_vfiprintf_r+0x20e>
 800b8a6:	4b26      	ldr	r3, [pc, #152]	; (800b940 <_vfiprintf_r+0x228>)
 800b8a8:	bb1b      	cbnz	r3, 800b8f2 <_vfiprintf_r+0x1da>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	443b      	add	r3, r7
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e768      	b.n	800b790 <_vfiprintf_r+0x78>
 800b8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	e7a6      	b.n	800b816 <_vfiprintf_r+0xfe>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3401      	adds	r4, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d903      	bls.n	800b8e8 <_vfiprintf_r+0x1d0>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0c6      	beq.n	800b872 <_vfiprintf_r+0x15a>
 800b8e4:	9105      	str	r1, [sp, #20]
 800b8e6:	e7c4      	b.n	800b872 <_vfiprintf_r+0x15a>
 800b8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7f0      	b.n	800b8d4 <_vfiprintf_r+0x1bc>
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4b12      	ldr	r3, [pc, #72]	; (800b944 <_vfiprintf_r+0x22c>)
 800b8fa:	a904      	add	r1, sp, #16
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7fc fefb 	bl	80086f8 <_printf_float>
 800b902:	4607      	mov	r7, r0
 800b904:	1c78      	adds	r0, r7, #1
 800b906:	d1d6      	bne.n	800b8b6 <_vfiprintf_r+0x19e>
 800b908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	d405      	bmi.n	800b91a <_vfiprintf_r+0x202>
 800b90e:	89ab      	ldrh	r3, [r5, #12]
 800b910:	059a      	lsls	r2, r3, #22
 800b912:	d402      	bmi.n	800b91a <_vfiprintf_r+0x202>
 800b914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b916:	f7fd fc6b 	bl	80091f0 <__retarget_lock_release_recursive>
 800b91a:	89ab      	ldrh	r3, [r5, #12]
 800b91c:	065b      	lsls	r3, r3, #25
 800b91e:	f53f af1d 	bmi.w	800b75c <_vfiprintf_r+0x44>
 800b922:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b924:	e71c      	b.n	800b760 <_vfiprintf_r+0x48>
 800b926:	ab03      	add	r3, sp, #12
 800b928:	9300      	str	r3, [sp, #0]
 800b92a:	462a      	mov	r2, r5
 800b92c:	4b05      	ldr	r3, [pc, #20]	; (800b944 <_vfiprintf_r+0x22c>)
 800b92e:	a904      	add	r1, sp, #16
 800b930:	4630      	mov	r0, r6
 800b932:	f7fd f985 	bl	8008c40 <_printf_i>
 800b936:	e7e4      	b.n	800b902 <_vfiprintf_r+0x1ea>
 800b938:	0800c0d5 	.word	0x0800c0d5
 800b93c:	0800c0df 	.word	0x0800c0df
 800b940:	080086f9 	.word	0x080086f9
 800b944:	0800b6f5 	.word	0x0800b6f5
 800b948:	0800c0db 	.word	0x0800c0db

0800b94c <__swbuf_r>:
 800b94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b94e:	460e      	mov	r6, r1
 800b950:	4614      	mov	r4, r2
 800b952:	4605      	mov	r5, r0
 800b954:	b118      	cbz	r0, 800b95e <__swbuf_r+0x12>
 800b956:	6a03      	ldr	r3, [r0, #32]
 800b958:	b90b      	cbnz	r3, 800b95e <__swbuf_r+0x12>
 800b95a:	f7fd fb1f 	bl	8008f9c <__sinit>
 800b95e:	69a3      	ldr	r3, [r4, #24]
 800b960:	60a3      	str	r3, [r4, #8]
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	071a      	lsls	r2, r3, #28
 800b966:	d525      	bpl.n	800b9b4 <__swbuf_r+0x68>
 800b968:	6923      	ldr	r3, [r4, #16]
 800b96a:	b31b      	cbz	r3, 800b9b4 <__swbuf_r+0x68>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	6922      	ldr	r2, [r4, #16]
 800b970:	1a98      	subs	r0, r3, r2
 800b972:	6963      	ldr	r3, [r4, #20]
 800b974:	b2f6      	uxtb	r6, r6
 800b976:	4283      	cmp	r3, r0
 800b978:	4637      	mov	r7, r6
 800b97a:	dc04      	bgt.n	800b986 <__swbuf_r+0x3a>
 800b97c:	4621      	mov	r1, r4
 800b97e:	4628      	mov	r0, r5
 800b980:	f7ff fdca 	bl	800b518 <_fflush_r>
 800b984:	b9e0      	cbnz	r0, 800b9c0 <__swbuf_r+0x74>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	3b01      	subs	r3, #1
 800b98a:	60a3      	str	r3, [r4, #8]
 800b98c:	6823      	ldr	r3, [r4, #0]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	6022      	str	r2, [r4, #0]
 800b992:	701e      	strb	r6, [r3, #0]
 800b994:	6962      	ldr	r2, [r4, #20]
 800b996:	1c43      	adds	r3, r0, #1
 800b998:	429a      	cmp	r2, r3
 800b99a:	d004      	beq.n	800b9a6 <__swbuf_r+0x5a>
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	07db      	lsls	r3, r3, #31
 800b9a0:	d506      	bpl.n	800b9b0 <__swbuf_r+0x64>
 800b9a2:	2e0a      	cmp	r6, #10
 800b9a4:	d104      	bne.n	800b9b0 <__swbuf_r+0x64>
 800b9a6:	4621      	mov	r1, r4
 800b9a8:	4628      	mov	r0, r5
 800b9aa:	f7ff fdb5 	bl	800b518 <_fflush_r>
 800b9ae:	b938      	cbnz	r0, 800b9c0 <__swbuf_r+0x74>
 800b9b0:	4638      	mov	r0, r7
 800b9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9b4:	4621      	mov	r1, r4
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	f000 f806 	bl	800b9c8 <__swsetup_r>
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d0d5      	beq.n	800b96c <__swbuf_r+0x20>
 800b9c0:	f04f 37ff 	mov.w	r7, #4294967295
 800b9c4:	e7f4      	b.n	800b9b0 <__swbuf_r+0x64>
	...

0800b9c8 <__swsetup_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <__swsetup_r+0xac>)
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	460c      	mov	r4, r1
 800b9d2:	b118      	cbz	r0, 800b9dc <__swsetup_r+0x14>
 800b9d4:	6a03      	ldr	r3, [r0, #32]
 800b9d6:	b90b      	cbnz	r3, 800b9dc <__swsetup_r+0x14>
 800b9d8:	f7fd fae0 	bl	8008f9c <__sinit>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b9e2:	0718      	lsls	r0, r3, #28
 800b9e4:	d422      	bmi.n	800ba2c <__swsetup_r+0x64>
 800b9e6:	06d9      	lsls	r1, r3, #27
 800b9e8:	d407      	bmi.n	800b9fa <__swsetup_r+0x32>
 800b9ea:	2309      	movs	r3, #9
 800b9ec:	602b      	str	r3, [r5, #0]
 800b9ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b9f2:	81a3      	strh	r3, [r4, #12]
 800b9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f8:	e034      	b.n	800ba64 <__swsetup_r+0x9c>
 800b9fa:	0758      	lsls	r0, r3, #29
 800b9fc:	d512      	bpl.n	800ba24 <__swsetup_r+0x5c>
 800b9fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ba00:	b141      	cbz	r1, 800ba14 <__swsetup_r+0x4c>
 800ba02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba06:	4299      	cmp	r1, r3
 800ba08:	d002      	beq.n	800ba10 <__swsetup_r+0x48>
 800ba0a:	4628      	mov	r0, r5
 800ba0c:	f7fe fa82 	bl	8009f14 <_free_r>
 800ba10:	2300      	movs	r3, #0
 800ba12:	6363      	str	r3, [r4, #52]	; 0x34
 800ba14:	89a3      	ldrh	r3, [r4, #12]
 800ba16:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ba1a:	81a3      	strh	r3, [r4, #12]
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	6063      	str	r3, [r4, #4]
 800ba20:	6923      	ldr	r3, [r4, #16]
 800ba22:	6023      	str	r3, [r4, #0]
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f043 0308 	orr.w	r3, r3, #8
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	b94b      	cbnz	r3, 800ba44 <__swsetup_r+0x7c>
 800ba30:	89a3      	ldrh	r3, [r4, #12]
 800ba32:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ba36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba3a:	d003      	beq.n	800ba44 <__swsetup_r+0x7c>
 800ba3c:	4621      	mov	r1, r4
 800ba3e:	4628      	mov	r0, r5
 800ba40:	f000 f884 	bl	800bb4c <__smakebuf_r>
 800ba44:	89a0      	ldrh	r0, [r4, #12]
 800ba46:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ba4a:	f010 0301 	ands.w	r3, r0, #1
 800ba4e:	d00a      	beq.n	800ba66 <__swsetup_r+0x9e>
 800ba50:	2300      	movs	r3, #0
 800ba52:	60a3      	str	r3, [r4, #8]
 800ba54:	6963      	ldr	r3, [r4, #20]
 800ba56:	425b      	negs	r3, r3
 800ba58:	61a3      	str	r3, [r4, #24]
 800ba5a:	6923      	ldr	r3, [r4, #16]
 800ba5c:	b943      	cbnz	r3, 800ba70 <__swsetup_r+0xa8>
 800ba5e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ba62:	d1c4      	bne.n	800b9ee <__swsetup_r+0x26>
 800ba64:	bd38      	pop	{r3, r4, r5, pc}
 800ba66:	0781      	lsls	r1, r0, #30
 800ba68:	bf58      	it	pl
 800ba6a:	6963      	ldrpl	r3, [r4, #20]
 800ba6c:	60a3      	str	r3, [r4, #8]
 800ba6e:	e7f4      	b.n	800ba5a <__swsetup_r+0x92>
 800ba70:	2000      	movs	r0, #0
 800ba72:	e7f7      	b.n	800ba64 <__swsetup_r+0x9c>
 800ba74:	200001d4 	.word	0x200001d4

0800ba78 <_raise_r>:
 800ba78:	291f      	cmp	r1, #31
 800ba7a:	b538      	push	{r3, r4, r5, lr}
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	d904      	bls.n	800ba8c <_raise_r+0x14>
 800ba82:	2316      	movs	r3, #22
 800ba84:	6003      	str	r3, [r0, #0]
 800ba86:	f04f 30ff 	mov.w	r0, #4294967295
 800ba8a:	bd38      	pop	{r3, r4, r5, pc}
 800ba8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ba8e:	b112      	cbz	r2, 800ba96 <_raise_r+0x1e>
 800ba90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba94:	b94b      	cbnz	r3, 800baaa <_raise_r+0x32>
 800ba96:	4620      	mov	r0, r4
 800ba98:	f000 f830 	bl	800bafc <_getpid_r>
 800ba9c:	462a      	mov	r2, r5
 800ba9e:	4601      	mov	r1, r0
 800baa0:	4620      	mov	r0, r4
 800baa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baa6:	f000 b817 	b.w	800bad8 <_kill_r>
 800baaa:	2b01      	cmp	r3, #1
 800baac:	d00a      	beq.n	800bac4 <_raise_r+0x4c>
 800baae:	1c59      	adds	r1, r3, #1
 800bab0:	d103      	bne.n	800baba <_raise_r+0x42>
 800bab2:	2316      	movs	r3, #22
 800bab4:	6003      	str	r3, [r0, #0]
 800bab6:	2001      	movs	r0, #1
 800bab8:	e7e7      	b.n	800ba8a <_raise_r+0x12>
 800baba:	2400      	movs	r4, #0
 800babc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bac0:	4628      	mov	r0, r5
 800bac2:	4798      	blx	r3
 800bac4:	2000      	movs	r0, #0
 800bac6:	e7e0      	b.n	800ba8a <_raise_r+0x12>

0800bac8 <raise>:
 800bac8:	4b02      	ldr	r3, [pc, #8]	; (800bad4 <raise+0xc>)
 800baca:	4601      	mov	r1, r0
 800bacc:	6818      	ldr	r0, [r3, #0]
 800bace:	f7ff bfd3 	b.w	800ba78 <_raise_r>
 800bad2:	bf00      	nop
 800bad4:	200001d4 	.word	0x200001d4

0800bad8 <_kill_r>:
 800bad8:	b538      	push	{r3, r4, r5, lr}
 800bada:	4d07      	ldr	r5, [pc, #28]	; (800baf8 <_kill_r+0x20>)
 800badc:	2300      	movs	r3, #0
 800bade:	4604      	mov	r4, r0
 800bae0:	4608      	mov	r0, r1
 800bae2:	4611      	mov	r1, r2
 800bae4:	602b      	str	r3, [r5, #0]
 800bae6:	f7f7 f85d 	bl	8002ba4 <_kill>
 800baea:	1c43      	adds	r3, r0, #1
 800baec:	d102      	bne.n	800baf4 <_kill_r+0x1c>
 800baee:	682b      	ldr	r3, [r5, #0]
 800baf0:	b103      	cbz	r3, 800baf4 <_kill_r+0x1c>
 800baf2:	6023      	str	r3, [r4, #0]
 800baf4:	bd38      	pop	{r3, r4, r5, pc}
 800baf6:	bf00      	nop
 800baf8:	20000a90 	.word	0x20000a90

0800bafc <_getpid_r>:
 800bafc:	f7f7 b84a 	b.w	8002b94 <_getpid>

0800bb00 <__swhatbuf_r>:
 800bb00:	b570      	push	{r4, r5, r6, lr}
 800bb02:	460c      	mov	r4, r1
 800bb04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	b096      	sub	sp, #88	; 0x58
 800bb0c:	4615      	mov	r5, r2
 800bb0e:	461e      	mov	r6, r3
 800bb10:	da0d      	bge.n	800bb2e <__swhatbuf_r+0x2e>
 800bb12:	89a3      	ldrh	r3, [r4, #12]
 800bb14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bb18:	f04f 0100 	mov.w	r1, #0
 800bb1c:	bf0c      	ite	eq
 800bb1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bb22:	2340      	movne	r3, #64	; 0x40
 800bb24:	2000      	movs	r0, #0
 800bb26:	6031      	str	r1, [r6, #0]
 800bb28:	602b      	str	r3, [r5, #0]
 800bb2a:	b016      	add	sp, #88	; 0x58
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	466a      	mov	r2, sp
 800bb30:	f000 f848 	bl	800bbc4 <_fstat_r>
 800bb34:	2800      	cmp	r0, #0
 800bb36:	dbec      	blt.n	800bb12 <__swhatbuf_r+0x12>
 800bb38:	9901      	ldr	r1, [sp, #4]
 800bb3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bb3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bb42:	4259      	negs	r1, r3
 800bb44:	4159      	adcs	r1, r3
 800bb46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb4a:	e7eb      	b.n	800bb24 <__swhatbuf_r+0x24>

0800bb4c <__smakebuf_r>:
 800bb4c:	898b      	ldrh	r3, [r1, #12]
 800bb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bb50:	079d      	lsls	r5, r3, #30
 800bb52:	4606      	mov	r6, r0
 800bb54:	460c      	mov	r4, r1
 800bb56:	d507      	bpl.n	800bb68 <__smakebuf_r+0x1c>
 800bb58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bb5c:	6023      	str	r3, [r4, #0]
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	2301      	movs	r3, #1
 800bb62:	6163      	str	r3, [r4, #20]
 800bb64:	b002      	add	sp, #8
 800bb66:	bd70      	pop	{r4, r5, r6, pc}
 800bb68:	ab01      	add	r3, sp, #4
 800bb6a:	466a      	mov	r2, sp
 800bb6c:	f7ff ffc8 	bl	800bb00 <__swhatbuf_r>
 800bb70:	9900      	ldr	r1, [sp, #0]
 800bb72:	4605      	mov	r5, r0
 800bb74:	4630      	mov	r0, r6
 800bb76:	f7fe fd99 	bl	800a6ac <_malloc_r>
 800bb7a:	b948      	cbnz	r0, 800bb90 <__smakebuf_r+0x44>
 800bb7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb80:	059a      	lsls	r2, r3, #22
 800bb82:	d4ef      	bmi.n	800bb64 <__smakebuf_r+0x18>
 800bb84:	f023 0303 	bic.w	r3, r3, #3
 800bb88:	f043 0302 	orr.w	r3, r3, #2
 800bb8c:	81a3      	strh	r3, [r4, #12]
 800bb8e:	e7e3      	b.n	800bb58 <__smakebuf_r+0xc>
 800bb90:	89a3      	ldrh	r3, [r4, #12]
 800bb92:	6020      	str	r0, [r4, #0]
 800bb94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb98:	81a3      	strh	r3, [r4, #12]
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	6163      	str	r3, [r4, #20]
 800bb9e:	9b01      	ldr	r3, [sp, #4]
 800bba0:	6120      	str	r0, [r4, #16]
 800bba2:	b15b      	cbz	r3, 800bbbc <__smakebuf_r+0x70>
 800bba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bba8:	4630      	mov	r0, r6
 800bbaa:	f000 f81d 	bl	800bbe8 <_isatty_r>
 800bbae:	b128      	cbz	r0, 800bbbc <__smakebuf_r+0x70>
 800bbb0:	89a3      	ldrh	r3, [r4, #12]
 800bbb2:	f023 0303 	bic.w	r3, r3, #3
 800bbb6:	f043 0301 	orr.w	r3, r3, #1
 800bbba:	81a3      	strh	r3, [r4, #12]
 800bbbc:	89a3      	ldrh	r3, [r4, #12]
 800bbbe:	431d      	orrs	r5, r3
 800bbc0:	81a5      	strh	r5, [r4, #12]
 800bbc2:	e7cf      	b.n	800bb64 <__smakebuf_r+0x18>

0800bbc4 <_fstat_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d07      	ldr	r5, [pc, #28]	; (800bbe4 <_fstat_r+0x20>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f7f7 f846 	bl	8002c62 <_fstat>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	d102      	bne.n	800bbe0 <_fstat_r+0x1c>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	b103      	cbz	r3, 800bbe0 <_fstat_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000a90 	.word	0x20000a90

0800bbe8 <_isatty_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_isatty_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f7 f845 	bl	8002c82 <_isatty>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_isatty_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_isatty_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000a90 	.word	0x20000a90

0800bc08 <round>:
 800bc08:	ec53 2b10 	vmov	r2, r3, d0
 800bc0c:	b570      	push	{r4, r5, r6, lr}
 800bc0e:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bc12:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800bc16:	2813      	cmp	r0, #19
 800bc18:	ee10 5a10 	vmov	r5, s0
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	dc18      	bgt.n	800bc52 <round+0x4a>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	da09      	bge.n	800bc38 <round+0x30>
 800bc24:	3001      	adds	r0, #1
 800bc26:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800bc2a:	d103      	bne.n	800bc34 <round+0x2c>
 800bc2c:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800bc30:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bc34:	2300      	movs	r3, #0
 800bc36:	e02a      	b.n	800bc8e <round+0x86>
 800bc38:	4c16      	ldr	r4, [pc, #88]	; (800bc94 <round+0x8c>)
 800bc3a:	4104      	asrs	r4, r0
 800bc3c:	ea03 0604 	and.w	r6, r3, r4
 800bc40:	4316      	orrs	r6, r2
 800bc42:	d011      	beq.n	800bc68 <round+0x60>
 800bc44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bc48:	4103      	asrs	r3, r0
 800bc4a:	440b      	add	r3, r1
 800bc4c:	ea23 0104 	bic.w	r1, r3, r4
 800bc50:	e7f0      	b.n	800bc34 <round+0x2c>
 800bc52:	2833      	cmp	r0, #51	; 0x33
 800bc54:	dd0b      	ble.n	800bc6e <round+0x66>
 800bc56:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800bc5a:	d105      	bne.n	800bc68 <round+0x60>
 800bc5c:	ee10 0a10 	vmov	r0, s0
 800bc60:	f7f4 fb34 	bl	80002cc <__adddf3>
 800bc64:	4602      	mov	r2, r0
 800bc66:	460b      	mov	r3, r1
 800bc68:	ec43 2b10 	vmov	d0, r2, r3
 800bc6c:	bd70      	pop	{r4, r5, r6, pc}
 800bc6e:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800bc72:	f04f 34ff 	mov.w	r4, #4294967295
 800bc76:	40f4      	lsrs	r4, r6
 800bc78:	4214      	tst	r4, r2
 800bc7a:	d0f5      	beq.n	800bc68 <round+0x60>
 800bc7c:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800bc80:	2301      	movs	r3, #1
 800bc82:	4083      	lsls	r3, r0
 800bc84:	195b      	adds	r3, r3, r5
 800bc86:	bf28      	it	cs
 800bc88:	3101      	addcs	r1, #1
 800bc8a:	ea23 0304 	bic.w	r3, r3, r4
 800bc8e:	461a      	mov	r2, r3
 800bc90:	460b      	mov	r3, r1
 800bc92:	e7e9      	b.n	800bc68 <round+0x60>
 800bc94:	000fffff 	.word	0x000fffff

0800bc98 <_init>:
 800bc98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9a:	bf00      	nop
 800bc9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9e:	bc08      	pop	{r3}
 800bca0:	469e      	mov	lr, r3
 800bca2:	4770      	bx	lr

0800bca4 <_fini>:
 800bca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bca6:	bf00      	nop
 800bca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcaa:	bc08      	pop	{r3}
 800bcac:	469e      	mov	lr, r3
 800bcae:	4770      	bx	lr
